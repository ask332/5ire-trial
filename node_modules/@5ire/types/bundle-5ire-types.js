const f5ireTypes = (function (exports, typesKnown, require$$0$1) {
  'use strict';

  const global = window;

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  const require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);

  function evaluateThis$2(fn) {
    return fn('return this');
  }
  const xglobal$2 = typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis$2(Function);

  class TextDecoder$3 {
    constructor(_) {
    }
    decode(value) {
      let result = '';
      for (let i = 0; i < value.length; i++) {
        result += String.fromCharCode(value[i]);
      }
      return result;
    }
  }

  const TextDecoder$2 = typeof xglobal$2.TextDecoder === 'undefined' ? TextDecoder$3 : xglobal$2.TextDecoder;

  function evaluateThis$1(fn) {
    return fn('return this');
  }
  const xglobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis$1(Function);

  class TextEncoder$3 {
    encode(value) {
      const u8a = new Uint8Array(value.length);
      for (let i = 0; i < value.length; i++) {
        u8a[i] = value.charCodeAt(i);
      }
      return u8a;
    }
  }

  const TextEncoder$2 = typeof xglobal$1.TextEncoder === 'undefined' ? TextEncoder$3 : xglobal$1.TextEncoder;

  function evaluateThis(fn) {
    return fn('return this');
  }
  const xglobal = typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis(Function);

  function isFunction$1(value) {
    return typeof value === 'function';
  }

  function isString$1(value) {
    return typeof value === 'string' || value instanceof String;
  }

  function isUndefined(value) {
    return typeof value === 'undefined';
  }

  function assert$h(condition, message) {
    if (!condition) {
      throw new Error(isFunction$1(message) ? message() : message);
    }
  }
  function assertReturn(value, message) {
    assert$h(!isUndefined(value), message);
    return value;
  }

  function isNull(value) {
    return value === null;
  }

  function arrayRange$1(size, startAt = 0) {
    assert$h(size > 0, 'Expected non-zero, positive number as a range size');
    const result = new Array(size).fill(0);
    for (let i = 0; i < result.length; i++) {
      result[i] = i + startAt;
    }
    return result;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var bn = {exports: {}};

  (function (module) {
  (function (module, exports) {
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      this.negative = 0;
      this.words = null;
      this.length = 0;
      this.red = null;
      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
      if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
        Buffer = window.Buffer;
      } else {
        Buffer = require('buffer').Buffer;
      }
    } catch (e) {
    }
    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };
    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };
    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }
      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
        this.negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === 'le') {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000);
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }
      if (endian !== 'le') return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray (number, base, endian) {
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }
      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits (string, index) {
      var c = string.charCodeAt(index);
      if (c >= 65 && c <= 70) {
        return c - 55;
      } else if (c >= 97 && c <= 102) {
        return c - 87;
      } else {
        return (c - 48) & 0xf;
      }
    }
    function parseHexByte (string, lowerBound, index) {
      var r = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r |= parseHex4Bits(string, index - 1) << 4;
      }
      return r;
    }
    BN.prototype._parseHex = function _parseHex (number, start, endian) {
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
      var off = 0;
      var j = 0;
      var w;
      if (endian === 'be') {
        for (i = number.length - 1; i >= start; i -= 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r *= mul;
        if (c >= 49) {
          r += c - 49 + 0xa;
        } else if (c >= 17) {
          r += c - 17 + 0xa;
        } else {
          r += c;
        }
      }
      return r;
    }
    BN.prototype._parseBase = function _parseBase (number, base, start) {
      this.words = [ 0 ];
      this.length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);
        for (i = 0; i < mod; i++) {
          pow *= base;
        }
        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };
    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };
    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign () {
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };
    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];
    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];
    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];
    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);
          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
      assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');
      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);
      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[i] = b;
        }
        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }
    BN.prototype._zeroBits = function _zeroBits (w) {
      if (w === 0) return 26;
      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };
    function toBitArray (num) {
      var w = new Array(num.bitLength());
      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }
      return w;
    }
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;
      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };
    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }
      return this;
    };
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }
      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };
    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };
    BN.prototype.iuand = function iuand (num) {
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }
      this.length = b.length;
      return this.strip();
    };
    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };
    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };
    BN.prototype.iuxor = function iuxor (num) {
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }
      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = a.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }
      return this.strip();
    };
    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
      var off = (bit / 26) | 0;
      var wbit = bit % 26;
      this._expand(off + 1);
      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd (num) {
      var r;
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      return this;
    };
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }
      if (this.length > num.length) return this.clone().iadd(num);
      return num.clone().iadd(this);
    };
    BN.prototype.isub = function isub (num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
      this.length = Math.max(this.length, i);
      if (a !== this) {
        this.negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };
    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;
      for (var k = 1; k < len; k++) {
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;
      out.negative = self.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }
      return res;
    };
    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }
      return t;
    };
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;
      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };
    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);
      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;
        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);
        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];
            var ro = rtws[p + j + s];
            var io = itws[p + j + s];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;
            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }
      return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;
      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];
        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;
        t = iws[i];
        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;
        ws[i] = w & 0x3ffffff;
        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);
        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }
      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };
    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);
      var rbt = this.makeRBT(N);
      var _ = this.stub(N);
      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);
      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);
      var rmws = out.words;
      rmws.length = N;
      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);
      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);
      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }
      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);
      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }
      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;
          res = res.mul(q);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;
      if (r !== 0) {
        var carry = 0;
        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }
        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }
      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }
        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }
        this.length += s;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln (bits) {
      assert(this.negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }
      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;
      h -= s;
      h = Math.max(0, h);
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }
      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }
      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
      if (this.length <= s) return false;
      var w = this.words[s];
      return !!(w & q);
    };
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      assert(this.negative === 0, 'imaskn works only with positive numbers');
      if (this.length <= s) {
        return this;
      }
      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);
      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }
        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);
      return this;
    };
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);
      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }
      this.words[0] -= num;
      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs () {
      this.negative = 0;
      return this;
    };
    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;
      this._expand(len);
      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }
      if (carry === 0) return this.strip();
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;
      var a = this.clone();
      var b = num;
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }
      var m = a.length - b.length;
      var q;
      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }
      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }
      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);
        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }
      return {
        div: q || null,
        mod: a
      };
    };
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== 'mod') {
          div = res.div.neg();
        }
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div: div,
          mod: mod
        };
      }
      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== 'mod') {
          div = res.div.neg();
        }
        return {
          div: div,
          mod: res.mod
        };
      }
      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod: mod
        };
      }
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero()) return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;
      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);
      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var x = this;
      var y = p.clone();
      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }
      var A = new BN(1);
      var B = new BN(0);
      var C = new BN(0);
      var D = new BN(1);
      var g = 0;
      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }
      var yp = y.clone();
      var xp = x.clone();
      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }
            A.iushrn(1);
            B.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }
            C.iushrn(1);
            D.iushrn(1);
          }
        }
        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }
      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var a = this;
      var b = p.clone();
      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }
      var x1 = new BN(1);
      var x2 = new BN(0);
      var delta = b.clone();
      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }
            x2.iushrn(1);
          }
        }
        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }
      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }
      return res;
    };
    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }
      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }
        var r = a.cmp(b);
        if (r < 0) {
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }
        a.isub(b);
      } while (true);
      return b.iushln(shift);
    };
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;
      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;
      this.strip();
      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert(num <= 0x3ffffff, 'Number is too big');
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;
      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp (num) {
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;
      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red (num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };
    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime (name, p) {
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);
      this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce (num) {
      var r = num;
      var rlen;
      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);
      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        if (r.strip !== undefined) {
          r.strip();
        } else {
          r._strip();
        }
      }
      return r;
    };
    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };
    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split (input, output) {
      var mask = 0x3fffff;
      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK (num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519 () {
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK (num) {
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime (name) {
      if (primes[name]) return primes[name];
      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;
      return prime;
    };
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };
    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }
      return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);
      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);
      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };
    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);
      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);
      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };
    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);
      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }
      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }
      return r;
    };
    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);
      return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont (num) {
      return new Mont(num);
    };
    function Mont (m) {
      Red.call(this, m);
      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }
      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };
    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }
      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
      return res._forceRed(this);
    };
    Mont.prototype.invm = function invm (a) {
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  }(bn));
  const BN$8 = bn.exports;

  const BN_ZERO = new BN$8(0);
  const BN_ONE = new BN$8(1);
  const BN_TWO = new BN$8(2);
  new BN$8(3);
  const BN_FOUR = new BN$8(4);
  new BN$8(5);
  new BN$8(6);
  new BN$8(7);
  new BN$8(8);
  new BN$8(9);
  new BN$8(10);
  const BN_HUNDRED = new BN$8(100);
  new BN$8(1000);
  const BN_MILLION = new BN$8(1000000);
  const BN_BILLION = new BN$8(1000000000);
  const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
  new BN$8(Number.MAX_SAFE_INTEGER);

  function isBoolean$1(value) {
    return typeof value === 'boolean';
  }

  function objectSpread$1(dest, ...sources) {
    for (let i = 0; i < sources.length; i++) {
      const src = sources[i];
      if (src) {
        const keys = Object.keys(src);
        for (let j = 0; j < keys.length; j++) {
          const key = keys[j];
          dest[key] = src[key];
        }
      }
    }
    return dest;
  }

  const HEX_REGEX$1 = /^0x[a-fA-F0-9]+$/;
  function isHex$1(value, bitLength = -1, ignoreLength = false) {
    return typeof value === 'string' && (value === '0x' || HEX_REGEX$1.test(value)) ? bitLength === -1 ? value.length % 2 === 0 || ignoreLength : value.length === 2 + Math.ceil(bitLength / 4) : false;
  }

  function hexHasPrefix$1(value) {
    return !!(value && isHex$1(value, -1, true) && value.substr(0, 2) === '0x');
  }

  const UNPREFIX_HEX_REGEX$1 = /^[a-fA-F0-9]+$/;
  function hexStripPrefix$1(value) {
    if (!value) {
      return '';
    } else if (hexHasPrefix$1(value)) {
      return value.substr(2);
    } else if (UNPREFIX_HEX_REGEX$1.test(value)) {
      return value;
    }
    throw new Error(`Invalid hex ${value} passed to hexStripPrefix`);
  }

  function reverse$1(value) {
    return (value.match(/.{1,2}/g) || []).reverse().join('');
  }
  function hexToBn$1(value, options = {
    isLe: false,
    isNegative: false
  }) {
    if (!value) {
      return new BN$8(0);
    }
    const _options = objectSpread$1({
      isLe: false,
      isNegative: false
    }, isBoolean$1(options) ? {
      isLe: options
    } : options);
    const _value = hexStripPrefix$1(value);
    const bn = new BN$8((_options.isLe ? reverse$1(_value) : _value) || '00', 16);
    return _options.isNegative ? bn.fromTwos(_value.length * 4) : bn;
  }

  function isBigInt$1(value) {
    return typeof value === 'bigint';
  }

  function isToBn$1(value) {
    return !!value && isFunction$1(value.toBn);
  }

  function bnToBn$1(value) {
    if (!value) {
      return new BN$8(0);
    } else if (isHex$1(value)) {
      return hexToBn$1(value.toString());
    } else if (isBigInt$1(value)) {
      return new BN$8(value.toString());
    }
    return BN$8.isBN(value) ? value : isToBn$1(value) ? value.toBn() : new BN$8(value);
  }

  function isNumber$1(value) {
    return typeof value === 'number';
  }

  function hexToU8a$1(_value, bitLength = -1) {
    if (!_value) {
      return new Uint8Array();
    }
    assert$h(isHex$1(_value), () => `Expected hex value to convert, found '${_value}'`);
    const value = hexStripPrefix$1(_value);
    const valLength = value.length / 2;
    const bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);
    const result = new Uint8Array(bufLength);
    const offset = Math.max(0, bufLength - valLength);
    for (let index = 0; index < bufLength; index++) {
      result[index + offset] = parseInt(value.substr(index * 2, 2), 16);
    }
    return result;
  }

  function isBuffer$1(value) {
    return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);
  }

  function isU8a$1(value) {
    return value instanceof Uint8Array;
  }

  const encoder$1 = new TextEncoder$2();
  function stringToU8a$1(value) {
    return value ? encoder$1.encode(value.toString()) : new Uint8Array();
  }

  function u8aToU8a$1(value) {
    if (!value) {
      return new Uint8Array();
    } else if (isHex$1(value)) {
      return hexToU8a$1(value);
    } else if (isString$1(value)) {
      return stringToU8a$1(value);
    } else if (Array.isArray(value) || isBuffer$1(value)) {
      return new Uint8Array(value);
    }
    assert$h(isU8a$1(value), () => `Unable to convert ${value.toString()} (typeof ${typeof value}) to a Uint8Array`);
    return value;
  }

  function compare(a, b) {
    let i = 0;
    while (true) {
      const overA = i >= a.length;
      const overB = i >= b.length;
      if (overA && overB) {
        return 0;
      } else if (overA) {
        return -1;
      } else if (overB) {
        return 1;
      } else if (a[i] !== b[i]) {
        return a[i] > b[i] ? 1 : -1;
      }
      i++;
    }
  }
  function u8aCmp(a, b) {
    return compare(u8aToU8a$1(a), u8aToU8a$1(b));
  }

  function u8aConcat$1(...list) {
    let length = 0;
    let offset = 0;
    const u8as = new Array(list.length);
    for (let i = 0; i < list.length; i++) {
      u8as[i] = u8aToU8a$1(list[i]);
      length += u8as[i].length;
    }
    const result = new Uint8Array(length);
    for (let i = 0; i < u8as.length; i++) {
      result.set(u8as[i], offset);
      offset += u8as[i].length;
    }
    return result;
  }

  function equals(a, b) {
    return a.length === b.length && u8aCmp(a, b) === 0;
  }
  function u8aEq(a, b) {
    return equals(u8aToU8a$1(a), u8aToU8a$1(b));
  }

  const ALPHABET$1 = arrayRange$1(256).map(n => n.toString(16).padStart(2, '0'));
  function extract$1(value) {
    const result = new Array(value.length);
    for (let i = 0; i < value.length; i++) {
      result[i] = ALPHABET$1[value[i]];
    }
    return result.join('');
  }
  function unprefixed$1(value, bitLength = -1) {
    const byteLength = Math.ceil(bitLength / 8);
    return byteLength > 0 && value.length > byteLength ? trim$1(value, Math.ceil(byteLength / 2)) : extract$1(value);
  }
  function trim$1(value, halfLength) {
    return `${unprefixed$1(value.subarray(0, halfLength))}…${unprefixed$1(value.subarray(value.length - halfLength))}`;
  }
  function u8aToHex$1(value, bitLength = -1, isPrefixed = true) {
    return `${isPrefixed ? '0x' : ''}${!value || !value.length ? '' : unprefixed$1(value, bitLength)}`;
  }

  function u8aToBn(value, options = {
    isLe: true,
    isNegative: false
  }) {
    return hexToBn$1(u8aToHex$1(value), options);
  }

  const decoder$1 = new TextDecoder$2('utf-8');
  function u8aToString$1(value) {
    return !(value !== null && value !== void 0 && value.length) ? '' : decoder$1.decode(value);
  }

  function createEmpty$1(byteLength, options) {
    return options.bitLength === -1 ? new Uint8Array() : new Uint8Array(byteLength);
  }
  function createValue$2(valueBn, byteLength, {
    isLe,
    isNegative
  }) {
    const output = new Uint8Array(byteLength);
    const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
    return output;
  }
  function bnToU8a$1(value, arg1 = {
    bitLength: -1,
    isLe: true,
    isNegative: false
  }, arg2) {
    const options = objectSpread$1({
      bitLength: -1,
      isLe: true,
      isNegative: false
    }, isNumber$1(arg1) ? {
      bitLength: arg1,
      isLe: arg2
    } : arg1);
    const valueBn = bnToBn$1(value);
    const byteLength = options.bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((options.bitLength || 0) / 8);
    return value ? createValue$2(valueBn, byteLength, options) : createEmpty$1(byteLength, options);
  }

  const ZERO_STR = '0x00';
  function bnToHex(value, arg1 = {
    bitLength: -1,
    isLe: false,
    isNegative: false
  }, arg2) {
    if (!value) {
      return ZERO_STR;
    }
    return u8aToHex$1(bnToU8a$1(value, objectSpread$1({
      isLe: false,
      isNegative: false
    }, isNumber$1(arg1) ? {
      bitLength: arg1,
      isLe: arg2
    } : arg1)));
  }

  const MAX_U8 = new BN$8(2).pow(new BN$8(8 - 2)).subn(1);
  const MAX_U16 = new BN$8(2).pow(new BN$8(16 - 2)).subn(1);
  const MAX_U32 = new BN$8(2).pow(new BN$8(32 - 2)).subn(1);
  function compactToU8a(_value) {
    const value = bnToBn$1(_value);
    if (value.lte(MAX_U8)) {
      return new Uint8Array([value.toNumber() << 2]);
    } else if (value.lte(MAX_U16)) {
      return bnToU8a$1(value.shln(2).iadd(BN_ONE), 16, true);
    } else if (value.lte(MAX_U32)) {
      return bnToU8a$1(value.shln(2).iadd(BN_TWO), 32, true);
    }
    const u8a = bnToU8a$1(value);
    let length = u8a.length;
    while (u8a[length - 1] === 0) {
      length--;
    }
    assert$h(length >= 4, 'Invalid length, previous checks match anything less than 2^30');
    return u8aConcat$1(
    [(length - 4 << 2) + 0b11], u8a.subarray(0, length));
  }

  function compactAddLength(input) {
    return u8aConcat$1(compactToU8a(input.length), input);
  }

  function compactFromU8a(_input) {
    const input = u8aToU8a$1(_input);
    const flag = input[0] & 0b11;
    if (flag === 0b00) {
      return [1, new BN$8(input[0]).ishrn(2)];
    } else if (flag === 0b01) {
      return [2, u8aToBn(input.slice(0, 2), true).ishrn(2)];
    } else if (flag === 0b10) {
      return [4, u8aToBn(input.slice(0, 4), true).ishrn(2)];
    }
    const offset = 1 + new BN$8(input[0]).ishrn(2)
    .iadd(BN_FOUR)
    .toNumber();
    return [offset, u8aToBn(input.subarray(1, offset), true)];
  }

  function compactStripLength(input) {
    const [offset, length] = compactFromU8a(input);
    const total = offset + length.toNumber();
    return [total, input.subarray(offset, total)];
  }

  const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');
  function formatDecimal(value) {
    const isNegative = value[0].startsWith('-');
    const matched = isNegative ? value.substr(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
    return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;
  }

  const SI_MID = 8;
  const SI = [{
    power: -24,
    text: 'yocto',
    value: 'y'
  }, {
    power: -21,
    text: 'zepto',
    value: 'z'
  }, {
    power: -18,
    text: 'atto',
    value: 'a'
  }, {
    power: -15,
    text: 'femto',
    value: 'f'
  }, {
    power: -12,
    text: 'pico',
    value: 'p'
  }, {
    power: -9,
    text: 'nano',
    value: 'n'
  }, {
    power: -6,
    text: 'micro',
    value: 'µ'
  }, {
    power: -3,
    text: 'milli',
    value: 'm'
  }, {
    power: 0,
    text: 'Unit',
    value: '-'
  },
  {
    power: 3,
    text: 'Kilo',
    value: 'k'
  }, {
    power: 6,
    text: 'Mill',
    value: 'M'
  },
  {
    power: 9,
    text: 'Bill',
    value: 'B'
  },
  {
    power: 12,
    text: 'Tril',
    value: 'T'
  },
  {
    power: 15,
    text: 'Peta',
    value: 'P'
  }, {
    power: 18,
    text: 'Exa',
    value: 'E'
  }, {
    power: 21,
    text: 'Zeta',
    value: 'Z'
  }, {
    power: 24,
    text: 'Yotta',
    value: 'Y'
  }];
  function findSi(type) {
    for (let i = 0; i < SI.length; i++) {
      if (SI[i].value === type) {
        return SI[i];
      }
    }
    return SI[SI_MID];
  }
  function calcSi(text, decimals, forceUnit) {
    if (forceUnit) {
      return findSi(forceUnit);
    }
    const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
  }

  const DEFAULT_DECIMALS = 0;
  const DEFAULT_UNIT = SI[SI_MID].text;
  let defaultDecimals = DEFAULT_DECIMALS;
  let defaultUnit = DEFAULT_UNIT;
  function _formatBalance(input, options = true, optDecimals = defaultDecimals) {
    let text = bnToBn$1(input).toString();
    if (text.length === 0 || text === '0') {
      return '0';
    }
    const isNegative = text[0].startsWith('-');
    if (isNegative) {
      text = text.substr(1);
    }
    const {
      decimals = optDecimals,
      forceUnit = undefined,
      withSi = true,
      withSiFull = false,
      withUnit = true
    } = isBoolean$1(options) ? {
      withSi: options
    } : options;
    const si = calcSi(text, decimals, forceUnit);
    const mid = text.length - (decimals + si.power);
    const prefix = text.substr(0, mid);
    const padding = mid < 0 ? 0 - mid : 0;
    const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substr(mid < 0 ? 0 : mid)}0000`.substr(0, 4);
    const units = withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${isBoolean$1(withUnit) ? si.text : withUnit}` : '' : ` ${withSiFull ? si.text : si.value}${withUnit ? `${withSiFull ? ' ' : ''}${isBoolean$1(withUnit) ? SI[SI_MID].text : withUnit}` : ''}` : '';
    return `${isNegative ? '-' : ''}${formatDecimal(prefix || '0')}.${postfix}${units}`;
  }
  const formatBalance = _formatBalance;
  formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);
  formatBalance.findSi = findSi;
  formatBalance.getDefaults = () => {
    return {
      decimals: defaultDecimals,
      unit: defaultUnit
    };
  };
  formatBalance.getOptions = (decimals = defaultDecimals) => {
    return SI.filter(({
      power
    }) => power < 0 ? decimals + power >= 0 : true);
  };
  formatBalance.setDefaults = ({
    decimals,
    unit
  }) => {
    defaultDecimals = isUndefined(decimals) ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;
    defaultUnit = isUndefined(unit) ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;
    SI[SI_MID].text = defaultUnit;
  };

  function zeroPad(value) {
    return value.toString().padStart(2, '0');
  }
  function formatDate(date) {
    const year = date.getFullYear().toString();
    const month = zeroPad(date.getMonth() + 1);
    const day = zeroPad(date.getDate());
    const hour = zeroPad(date.getHours());
    const minute = zeroPad(date.getMinutes());
    const second = zeroPad(date.getSeconds());
    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
  }

  function formatNumber(value) {
    return formatDecimal(bnToBn$1(value).toString());
  }

  const FORMAT = [9, 10, 13];
  function getCharCode0(s) {
    return s.charCodeAt(0);
  }
  function isAsciiByte(b) {
    return b < 127 && (b >= 32 || FORMAT.includes(b));
  }
  function isAscii(value) {
    const isStringIn = isString$1(value);
    if (value) {
      return (isStringIn && !isHex$1(value) ? value.toString().split('').map(getCharCode0) : u8aToU8a$1(value)).every(isAsciiByte);
    }
    return isStringIn;
  }

  function isBn(value) {
    return BN$8.isBN(value);
  }

  function replacer(_, v) {
    return isBigInt$1(v) ? v.toString() : v;
  }
  function stringify(args, space) {
    return JSON.stringify(args, replacer, space);
  }

  function isObject(value) {
    return typeof value === 'object';
  }

  function isUtf8(value) {
    if (!value) {
      return isString$1(value);
    }
    const u8a = u8aToU8a$1(value);
    const len = u8a.length;
    let i = 0;
    while (i < len) {
      if (u8a[i] <= 0x7F)
        {
          i += 1;
        } else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF)
        {
          if (i + 1 < len)
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                return false;
              }
            } else {
            return false;
          }
          i += 2;
        } else if (u8a[i] === 0xE0)
        {
          if (i + 2 < len)
            {
              if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
                return false;
              }
              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                return false;
              }
            } else {
            return false;
          }
          i += 3;
        } else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC)
        {
          if (i + 2 < len)
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                return false;
              }
              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                return false;
              }
            } else {
            return false;
          }
          i += 3;
        } else if (u8a[i] === 0xED)
        {
          if (i + 2 < len)
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
                return false;
              }
              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                return false;
              }
            } else {
            return false;
          }
          i += 3;
        } else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF)
        {
          if (i + 2 < len)
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                return false;
              }
              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                return false;
              }
            } else {
            return false;
          }
          i += 3;
        } else if (u8a[i] === 0xF0)
        {
          if (i + 3 < len)
            {
              if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
                return false;
              }
              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                return false;
              }
              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                return false;
              }
            } else {
            return false;
          }
          i += 4;
        } else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3)
        {
          if (i + 3 < len)
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                return false;
              }
              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                return false;
              }
              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                return false;
              }
            } else {
            return false;
          }
          i += 4;
        } else if (u8a[i] === 0xF4)
        {
          if (i + 3 < len)
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
                return false;
              }
              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                return false;
              }
              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                return false;
              }
            } else {
            return false;
          }
          i += 4;
        } else {
        return false;
      }
    }
    return true;
  }

  function lazyMethod(result, item, creator, getName) {
    const name = getName ? getName(item) : item.toString();
    let value;
    Object.defineProperty(result, name, {
      configurable: true,
      enumerable: true,
      get: function () {
        if (isUndefined(value)) {
          value = creator(item);
          try {
            Object.defineProperty(this, name, {
              value
            });
          } catch {
          }
        }
        return value;
      }
    });
  }
  function lazyMethods(result, items, creator, getName) {
    for (let i = 0; i < items.length; i++) {
      lazyMethod(result, items[i], creator, getName);
    }
    return result;
  }

  const logTo = {
    debug: 'log',
    error: 'error',
    log: 'log',
    warn: 'warn'
  };
  function formatOther(value) {
    if (value && isObject(value) && value.constructor === Object) {
      const result = {};
      for (const k of Object.keys(value)) {
        result[k] = loggerFormat(value[k]);
      }
      return result;
    }
    return value;
  }
  function loggerFormat(value) {
    if (Array.isArray(value)) {
      return value.map(loggerFormat);
    } else if (isBn(value)) {
      return value.toString();
    } else if (isU8a$1(value) || isBuffer$1(value)) {
      return u8aToHex$1(u8aToU8a$1(value));
    }
    return formatOther(value);
  }
  function formatWithLength(maxLength) {
    return v => {
      if (maxLength <= 0) {
        return v;
      }
      const r = `${v}`;
      return r.length < maxLength ? v : `${r.substr(0, maxLength)} ...`;
    };
  }
  function apply(log, type, values, maxSize = -1) {
    if (values.length === 1 && isFunction$1(values[0])) {
      const fnResult = values[0]();
      return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
    }
    console[logTo[log]](formatDate(new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
  }
  function noop() {
  }
  function isDebugOn(e, type) {
    return !!e && (e === '*' || type === e || e.endsWith('*') && type.startsWith(e.slice(0, -1)));
  }
  function isDebugOff(e, type) {
    return !!e && e.startsWith('-') && (type === e.slice(1) || e.endsWith('*') && type.startsWith(e.slice(1, -1)));
  }
  function getDebugFlag(env, type) {
    let flag = false;
    for (const e of env) {
      if (isDebugOn(e, type)) {
        flag = true;
      } else if (isDebugOff(e, type)) {
        flag = false;
      }
    }
    return flag;
  }
  function parseEnv(type) {
    const env = (typeof process === 'object' ? process : {}).env || {};
    const maxSize = parseInt(env.DEBUG_MAX || '-1', 10);
    return [getDebugFlag((env.DEBUG || '').toLowerCase().split(','), type), isNaN(maxSize) ? -1 : maxSize];
  }
  function logger(_type) {
    const type = `${_type.toUpperCase()}:`.padStart(16);
    const [isDebug, maxSize] = parseEnv(_type.toLowerCase());
    return {
      debug: isDebug ? (...values) => apply('debug', type, values, maxSize) : noop,
      error: (...values) => apply('error', type, values),
      log: (...values) => apply('log', type, values),
      noop,
      warn: (...values) => apply('warn', type, values)
    };
  }

  function objectProperty(that, key, getter) {
    if (!Object.prototype.hasOwnProperty.call(that, key) && isUndefined(that[key])) {
      const get = () => getter(key);
      Object.defineProperty(that, key, {
        enumerable: true,
        get
      });
    }
  }
  function objectProperties(that, keys, getter) {
    for (let i = 0; i < keys.length; i++) {
      objectProperty(that, keys[i], k => getter(k, i));
    }
  }

  var camelcase$1 = {exports: {}};

  const preserveCamelCase = (string, locale) => {
  	let isLastCharLower = false;
  	let isLastCharUpper = false;
  	let isLastLastCharUpper = false;
  	for (let i = 0; i < string.length; i++) {
  		const character = string[i];
  		if (isLastCharLower && /[\p{Lu}]/u.test(character)) {
  			string = string.slice(0, i) + '-' + string.slice(i);
  			isLastCharLower = false;
  			isLastLastCharUpper = isLastCharUpper;
  			isLastCharUpper = true;
  			i++;
  		} else if (isLastCharUpper && isLastLastCharUpper && /[\p{Ll}]/u.test(character)) {
  			string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
  			isLastLastCharUpper = isLastCharUpper;
  			isLastCharUpper = false;
  			isLastCharLower = true;
  		} else {
  			isLastCharLower = character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;
  			isLastLastCharUpper = isLastCharUpper;
  			isLastCharUpper = character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;
  		}
  	}
  	return string;
  };
  const preserveConsecutiveUppercase = input => {
  	return input.replace(/^[\p{Lu}](?![\p{Lu}])/gu, m1 => m1.toLowerCase());
  };
  const postProcess = (input, options) => {
  	return input.replace(/[_.\- ]+([\p{Alpha}\p{N}_]|$)/gu, (_, p1) => p1.toLocaleUpperCase(options.locale))
  		.replace(/\d+([\p{Alpha}\p{N}_]|$)/gu, m => m.toLocaleUpperCase(options.locale));
  };
  const camelCase = (input, options) => {
  	if (!(typeof input === 'string' || Array.isArray(input))) {
  		throw new TypeError('Expected the input to be `string | string[]`');
  	}
  	options = {
  		pascalCase: false,
  		preserveConsecutiveUppercase: false,
  		...options
  	};
  	if (Array.isArray(input)) {
  		input = input.map(x => x.trim())
  			.filter(x => x.length)
  			.join('-');
  	} else {
  		input = input.trim();
  	}
  	if (input.length === 0) {
  		return '';
  	}
  	if (input.length === 1) {
  		return options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);
  	}
  	const hasUpperCase = input !== input.toLocaleLowerCase(options.locale);
  	if (hasUpperCase) {
  		input = preserveCamelCase(input, options.locale);
  	}
  	input = input.replace(/^[_.\- ]+/, '');
  	if (options.preserveConsecutiveUppercase) {
  		input = preserveConsecutiveUppercase(input);
  	} else {
  		input = input.toLocaleLowerCase();
  	}
  	if (options.pascalCase) {
  		input = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);
  	}
  	return postProcess(input, options);
  };
  camelcase$1.exports = camelCase;
  camelcase$1.exports.default = camelCase;
  const camelcase = camelcase$1.exports;

  function stringCamelCase(value) {
    return camelcase(value.toString());
  }

  function stringLowerFirst(value) {
    return value ? value.charAt(0).toLowerCase() + value.slice(1) : '';
  }

  function stringUpperFirst(value) {
    return value ? value.charAt(0).toUpperCase() + value.slice(1) : '';
  }

  const numberTypes = {
    Fixed64: 'Int<64, Fixed64>',
    FixedI64: 'Int<64, FixedI64>',
    FixedU64: 'UInt<64, FixedU64>',
    Fixed128: 'Int<128, Fixed128>',
    FixedI128: 'Int<128, FixedI128>',
    FixedU128: 'UInt<128, FixedU128>',
    I32F32: 'Int<64, I32F32>',
    U32F32: 'UInt<64, U32F32>',
    PerU16: 'UInt<16, PerU16>',
    Perbill: 'UInt<32, Perbill>',
    Percent: 'UInt<8, Percent>',
    Permill: 'UInt<32, Permill>',
    Perquintill: 'UInt<64, Perquintill>'
  };
  const definitions$V = {
    rpc: {},
    types: objectSpread$1({}, numberTypes, {
      AccountId: 'AccountId32',
      AccountId20: 'GenericEthereumAccountId',
      AccountId32: 'GenericAccountId',
      AccountIdOf: 'AccountId',
      AccountIndex: 'GenericAccountIndex',
      Address: 'MultiAddress',
      AssetId: 'u32',
      Balance: 'UInt<128, Balance>',
      BalanceOf: 'Balance',
      Block: 'GenericBlock',
      BlockNumber: 'u32',
      BlockNumberFor: 'BlockNumber',
      BlockNumberOf: 'BlockNumber',
      Call: 'GenericCall',
      CallHash: 'Hash',
      CallHashOf: 'CallHash',
      ChangesTrieConfiguration: {
        digestInterval: 'u32',
        digestLevels: 'u32'
      },
      ChangesTrieSignal: {
        _enum: {
          NewConfiguration: 'Option<ChangesTrieConfiguration>'
        }
      },
      ConsensusEngineId: 'GenericConsensusEngineId',
      CodecHash: 'Hash',
      CrateVersion: {
        major: 'u16',
        minor: 'u8',
        patch: 'u8'
      },
      Digest: {
        logs: 'Vec<DigestItem>'
      },
      DigestItem: {
        _enum: {
          Other: 'Bytes',
          AuthoritiesChange: 'Vec<AuthorityId>',
          ChangesTrieRoot: 'Hash',
          SealV0: 'SealV0',
          Consensus: 'Consensus',
          Seal: 'Seal',
          PreRuntime: 'PreRuntime',
          ChangesTrieSignal: 'ChangesTrieSignal',
          RuntimeEnvironmentUpdated: 'Null'
        }
      },
      ExtrinsicsWeight: {
        normal: 'Weight',
        operational: 'Weight'
      },
      H32: '[u8; 4; H32]',
      H64: '[u8; 8; H64]',
      H128: '[u8; 16; H128]',
      H160: '[u8; 20; H160]',
      H256: '[u8; 32; H256]',
      H512: '[u8; 64; H512]',
      H1024: '[u8; 128; H1024]',
      H2048: '[u8; 256; H2048]',
      Hash: 'H256',
      Header: {
        parentHash: 'Hash',
        number: 'Compact<BlockNumber>',
        stateRoot: 'Hash',
        extrinsicsRoot: 'Hash',
        digest: 'Digest'
      },
      HeaderPartial: {
        parentHash: 'Hash',
        number: 'BlockNumber'
      },
      IndicesLookupSource: 'GenericLookupSource',
      Index: 'u32',
      Justification: '(ConsensusEngineId, EncodedJustification)',
      EncodedJustification: 'Bytes',
      Justifications: 'Vec<Justification>',
      KeyValue: '(StorageKey, StorageData)',
      KeyTypeId: 'u32',
      LockIdentifier: '[u8; 8]',
      LookupSource: 'MultiAddress',
      LookupTarget: 'AccountId',
      ModuleId: 'LockIdentifier',
      MultiAddress: 'GenericMultiAddress',
      MultiSigner: {
        _enum: {
          Ed25519: '[u8; 32]',
          Sr25519: '[u8; 32]',
          Ecdsa: '[u8; 33]'
        }
      },
      Moment: 'UInt<64, Moment>',
      OpaqueCall: 'Bytes',
      Origin: 'DoNotConstruct<Origin>',
      OriginCaller: {
        _enum: {
          System: 'SystemOrigin'
        }
      },
      PalletId: 'LockIdentifier',
      PalletsOrigin: 'OriginCaller',
      PalletVersion: {
        major: 'u16',
        minor: 'u8',
        patch: 'u8'
      },
      Pays: {
        _enum: ['Yes', 'No']
      },
      Phantom: 'Null',
      PhantomData: 'Null',
      Releases: {
        _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
      },
      RuntimeDbWeight: {
        read: 'Weight',
        write: 'Weight'
      },
      SignedBlock: 'SignedBlockWithJustifications',
      SignedBlockWithJustification: {
        block: 'Block',
        justification: 'Option<EncodedJustification>'
      },
      SignedBlockWithJustifications: {
        block: 'Block',
        justifications: 'Option<Justifications>'
      },
      Slot: 'u64',
      StorageData: 'Bytes',
      StorageProof: {
        trieNodes: 'Vec<Bytes>'
      },
      TransactionPriority: 'u64',
      TransactionInfo: {
        _alias: {
          dataSize: 'size'
        },
        chunkRoot: 'H256',
        contentHash: 'H256',
        dataSize: 'u32',
        blockChunks: 'u32'
      },
      TransactionStorageProof: {
        chunk: 'Vec<u8>',
        proof: 'Vec<Vec<u8>>'
      },
      ValidatorId: 'AccountId',
      ValidatorIdOf: 'ValidatorId',
      Weight: 'u64',
      WeightMultiplier: 'Fixed64',
      PreRuntime: '(ConsensusEngineId, Bytes)',
      SealV0: '(u64, Signature)',
      Seal: '(ConsensusEngineId, Bytes)',
      Consensus: '(ConsensusEngineId, Bytes)'
    })
  };

  const definitions$U = {
    rpc: {},
    types: {
      AssetApprovalKey: {
        owner: 'AccountId',
        delegate: 'AccountId'
      },
      AssetApproval: {
        amount: 'TAssetBalance',
        deposit: 'TAssetDepositBalance'
      },
      AssetBalance: {
        balance: 'TAssetBalance',
        isFrozen: 'bool',
        isSufficient: 'bool'
      },
      AssetDestroyWitness: {
        accounts: 'Compact<u32>',
        sufficients: 'Compact<u32>',
        approvals: 'Compact<u32>'
      },
      AssetDetails: {
        owner: 'AccountId',
        issuer: 'AccountId',
        admin: 'AccountId',
        freezer: 'AccountId',
        supply: 'TAssetBalance',
        deposit: 'TAssetDepositBalance',
        minBalance: 'TAssetBalance',
        isSufficient: 'bool',
        accounts: 'u32',
        sufficients: 'u32',
        approvals: 'u32',
        isFrozen: 'bool'
      },
      AssetMetadata: {
        deposit: 'TAssetDepositBalance',
        name: 'Vec<u8>',
        symbol: 'Vec<u8>',
        decimals: 'u8',
        isFrozen: 'bool'
      },
      TAssetBalance: 'u64',
      TAssetDepositBalance: 'BalanceOf'
    }
  };

  const definitions$T = {
    rpc: {},
    types: {
      UncleEntryItem: {
        _enum: {
          InclusionHeight: 'BlockNumber',
          Uncle: '(Hash, Option<AccountId>)'
        }
      }
    }
  };

  const definitions$S = {
    rpc: {},
    types: {
      RawAuraPreDigest: {
        slotNumber: 'u64'
      }
    }
  };

  const definitions$R = {
    rpc: {
      epochAuthorship: {
        description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
        params: [],
        type: 'HashMap<AuthorityId, EpochAuthorship>'
      }
    },
    types: {
      AllowedSlots: {
        _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
      },
      BabeAuthorityWeight: 'u64',
      BabeEpochConfiguration: {
        c: '(u64, u64)',
        allowedSlots: 'AllowedSlots'
      },
      BabeBlockWeight: 'u32',
      BabeEquivocationProof: {
        offender: 'AuthorityId',
        slotNumber: 'SlotNumber',
        firstHeader: 'Header',
        secondHeader: 'Header'
      },
      BabeWeight: 'u64',
      MaybeRandomness: 'Option<Randomness>',
      MaybeVrf: 'Option<VrfData>',
      EpochAuthorship: {
        primary: 'Vec<u64>',
        secondary: 'Vec<u64>',
        secondary_vrf: 'Vec<u64>'
      },
      NextConfigDescriptor: {
        _enum: {
          V0: 'Null',
          V1: 'NextConfigDescriptorV1'
        }
      },
      NextConfigDescriptorV1: {
        c: '(u64, u64)',
        allowedSlots: 'AllowedSlots'
      },
      Randomness: 'Hash',
      RawBabePreDigest: {
        _enum: {
          Phantom: 'Null',
          Primary: 'RawBabePreDigestPrimary',
          SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
          SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
        }
      },
      RawBabePreDigestPrimary: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestSecondaryPlain: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber'
      },
      RawBabePreDigestSecondaryVRF: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestTo159: {
        _enum: {
          Primary: 'RawBabePreDigestPrimaryTo159',
          Secondary: 'RawBabePreDigestSecondaryTo159'
        }
      },
      RawBabePreDigestPrimaryTo159: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        weight: 'BabeBlockWeight',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestSecondaryTo159: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        weight: 'BabeBlockWeight'
      },
      RawBabePreDigestCompat: {
        _enum: {
          Zero: 'u32',
          One: 'u32',
          Two: 'u32',
          Three: 'u32'
        }
      },
      SlotNumber: 'u64',
      VrfData: '[u8; 32]',
      VrfOutput: '[u8; 32]',
      VrfProof: '[u8; 64]'
    }
  };

  const definitions$Q = {
    rpc: {},
    types: {
      AccountData: {
        free: 'Balance',
        reserved: 'Balance',
        miscFrozen: 'Balance',
        feeFrozen: 'Balance'
      },
      BalanceLockTo212: {
        id: 'LockIdentifier',
        amount: 'Balance',
        until: 'BlockNumber',
        reasons: 'WithdrawReasons'
      },
      BalanceLock: {
        id: 'LockIdentifier',
        amount: 'Balance',
        reasons: 'Reasons'
      },
      BalanceStatus: {
        _enum: ['Free', 'Reserved']
      },
      Reasons: {
        _enum: ['Fee', 'Misc', 'All']
      },
      ReserveData: {
        id: 'ReserveIdentifier',
        amount: 'Balance'
      },
      ReserveIdentifier: '[u8; 8]',
      VestingSchedule: {
        offset: 'Balance',
        perBlock: 'Balance',
        startingBlock: 'BlockNumber'
      },
      WithdrawReasons: {
        _set: {
          TransactionPayment: 0b00000001,
          Transfer: 0b00000010,
          Reserve: 0b00000100,
          Fee: 0b00001000,
          Tip: 0b00010000
        }
      }
    }
  };

  const definitions$P = {
    rpc: {
      subscribeJustifications: {
        description: 'Returns the block most recently finalized by BEEFY, alongside side its justification.',
        params: [],
        pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
        type: 'BeefySignedCommitment'
      }
    },
    types: {
      BeefyCommitment: {
        payload: 'BeefyPayload',
        blockNumber: 'BlockNumber',
        validatorSetId: 'ValidatorSetId'
      },
      BeefyId: '[u8; 33]',
      BeefySignedCommitment: {
        commitment: 'BeefyCommitment',
        signatures: 'Vec<Option<Signature>>'
      },
      BeefyNextAuthoritySet: {
        id: 'u64',
        len: 'u32',
        root: 'H256'
      },
      BeefyPayload: 'MmrRootHash',
      MmrRootHash: 'H256',
      ValidatorSetId: 'u64'
    }
  };

  const definitions$O = {
    rpc: {},
    types: {
      CollectiveOrigin: {
        _enum: {
          Members: '(MemberCount, MemberCount)',
          Member: 'AccountId'
        }
      },
      MemberCount: 'u32',
      ProposalIndex: 'u32',
      VotesTo230: {
        index: 'ProposalIndex',
        threshold: 'MemberCount',
        ayes: 'Vec<AccountId>',
        nays: 'Vec<AccountId>'
      },
      Votes: {
        index: 'ProposalIndex',
        threshold: 'MemberCount',
        ayes: 'Vec<AccountId>',
        nays: 'Vec<AccountId>',
        end: 'BlockNumber'
      }
    }
  };

  const definitions$N = {
    rpc: {},
    types: {
      AuthorityId: 'AccountId',
      RawVRFOutput: '[u8; 32]'
    }
  };

  const definitions$M = {
    rpc: {
      call: {
        description: 'Executes a call to a contract',
        params: [{
          name: 'callRequest',
          type: 'ContractCallRequest'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ContractExecResult'
      },
      instantiate: {
        description: 'Instantiate a new contract',
        params: [{
          name: 'request',
          type: 'InstantiateRequest'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHstoric: true,
          isOptional: true
        }],
        type: 'ContractInstantiateResult'
      },
      getStorage: {
        description: 'Returns the value under a specified storage key in a contract',
        params: [{
          name: 'address',
          type: 'AccountId'
        }, {
          name: 'key',
          type: 'H256'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<Bytes>'
      },
      rentProjection: {
        description: 'Returns the projected time a given contract will be able to sustain paying its rent',
        params: [{
          name: 'address',
          type: 'AccountId'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<BlockNumber>'
      }
    },
    types: {
      AliveContractInfo: {
        trieId: 'TrieId',
        storageSize: 'u32',
        pairCount: 'u32',
        codeHash: 'CodeHash',
        rentAllowance: 'Balance',
        rentPaid: 'Balance',
        deductBlock: 'BlockNumber',
        lastWrite: 'Option<BlockNumber>',
        _reserved: 'Option<Null>'
      },
      CodeHash: 'Hash',
      ContractCallRequest: {
        origin: 'AccountId',
        dest: 'AccountId',
        value: 'Balance',
        gasLimit: 'u64',
        inputData: 'Bytes'
      },
      ContractExecResultSuccessTo255: {
        status: 'u8',
        data: 'Raw'
      },
      ContractExecResultTo255: {
        _enum: {
          Success: 'ContractExecResultSuccessTo255',
          Error: 'Null'
        }
      },
      ContractExecResultSuccessTo260: {
        flags: 'u32',
        data: 'Bytes',
        gasConsumed: 'u64'
      },
      ContractExecResultTo260: {
        _enum: {
          Success: 'ContractExecResultSuccessTo260',
          Error: 'Null'
        }
      },
      ContractExecResultErrModule: {
        index: 'u8',
        error: 'u8',
        message: 'Option<Text>'
      },
      ContractExecResultErr: {
        _enum: {
          Other: 'Text',
          CannotLookup: 'Null',
          BadOrigin: 'Null',
          Module: 'ContractExecResultErrModule'
        }
      },
      ContractExecResultOk: {
        flags: 'u32',
        data: 'Bytes'
      },
      ContractExecResultResult: {
        _enum: {
          Ok: 'ContractExecResultOk',
          Err: 'ContractExecResultErr'
        }
      },
      ContractExecResultTo267: {
        gasConsumed: 'u64',
        debugMessage: 'Text',
        result: 'ContractExecResultResult'
      },
      ContractExecResult: {
        gasConsumed: 'u64',
        gasRequired: 'u64',
        debugMessage: 'Text',
        result: 'ContractExecResultResult'
      },
      ContractInfo: {
        _enum: {
          Alive: 'AliveContractInfo',
          Tombstone: 'TombstoneContractInfo'
        }
      },
      ContractStorageKey: '[u8; 32]',
      DeletedContract: {
        pairCount: 'u32',
        trieId: 'TrieId'
      },
      ExecReturnValue: {
        flags: 'u32',
        data: 'Bytes'
      },
      Gas: 'u64',
      HostFnWeightsTo264: {
        caller: 'Weight',
        address: 'Weight',
        gasLeft: 'Weight',
        balance: 'Weight',
        valueTransferred: 'Weight',
        minimumBalance: 'Weight',
        tombstoneDeposit: 'Weight',
        rentAllowance: 'Weight',
        blockNumber: 'Weight',
        now: 'Weight',
        weightToFee: 'Weight',
        gas: 'Weight',
        input: 'Weight',
        inputPerByte: 'Weight',
        return: 'Weight',
        returnPerByte: 'Weight',
        terminate: 'Weight',
        restoreTo: 'Weight',
        restoreToPerDelta: 'Weight',
        random: 'Weight',
        depositEvent: 'Weight',
        depositEventPerTopic: 'Weight',
        depositEventPerByte: 'Weight',
        setRentAllowance: 'Weight',
        setStorage: 'Weight',
        setStoragePerByte: 'Weight',
        clearStorage: 'Weight',
        getStorage: 'Weight',
        getStoragePerByte: 'Weight',
        transfer: 'Weight',
        call: 'Weight',
        callTransferSurcharge: 'Weight',
        callPerInputByte: 'Weight',
        callPerOutputByte: 'Weight',
        instantiate: 'Weight',
        instantiatePerInputByte: 'Weight',
        instantiatePerOutputByte: 'Weight',
        hashSha2256: 'Weight',
        hashSha2256PerByte: 'Weight',
        hashKeccak256: 'Weight',
        hashKeccak256PerByte: 'Weight',
        hashBlake2256: 'Weight',
        hashBlake2256PerByte: 'Weight',
        hashBlake2128: 'Weight',
        hashBlake2128PerByte: 'Weight'
      },
      HostFnWeights: {
        caller: 'Weight',
        address: 'Weight',
        gasLeft: 'Weight',
        balance: 'Weight',
        valueTransferred: 'Weight',
        minimumBalance: 'Weight',
        tombstoneDeposit: 'Weight',
        rentAllowance: 'Weight',
        blockNumber: 'Weight',
        now: 'Weight',
        weightToFee: 'Weight',
        gas: 'Weight',
        input: 'Weight',
        inputPerByte: 'Weight',
        return: 'Weight',
        returnPerByte: 'Weight',
        terminate: 'Weight',
        terminatePerCodeByte: 'Weight',
        restoreTo: 'Weight',
        restoreToPerCallerCodeByte: 'Weight',
        restoreToPerTombstoneCodeByte: 'Weight',
        restoreToPerDelta: 'Weight',
        random: 'Weight',
        depositEvent: 'Weight',
        depositEventPerTopic: 'Weight',
        depositEventPerByte: 'Weight',
        setRentAllowance: 'Weight',
        setStorage: 'Weight',
        setStoragePerByte: 'Weight',
        clearStorage: 'Weight',
        getStorage: 'Weight',
        getStoragePerByte: 'Weight',
        transfer: 'Weight',
        call: 'Weight',
        callPerCodeByte: 'Weight',
        callTransferSurcharge: 'Weight',
        callPerInputByte: 'Weight',
        callPerOutputByte: 'Weight',
        instantiate: 'Weight',
        instantiatePerCodeByte: 'Weight',
        instantiatePerInputByte: 'Weight',
        instantiatePerOutputByte: 'Weight',
        instantiatePerSaltByte: 'Weight',
        hashSha2256: 'Weight',
        hashSha2256PerByte: 'Weight',
        hashKeccak256: 'Weight',
        hashKeccak256PerByte: 'Weight',
        hashBlake2256: 'Weight',
        hashBlake2256PerByte: 'Weight',
        hashBlake2128: 'Weight',
        hashBlake2128PerByte: 'Weight',
        rentParams: 'Weight'
      },
      InstantiateRequest: {
        origin: 'AccountId',
        endowment: 'Balance',
        gasLimit: 'Gas',
        code: 'Bytes',
        data: 'Bytes',
        salt: 'Bytes'
      },
      ContractInstantiateResultTo267: {
        _enum: {
          Ok: 'InstantiateReturnValueTo267',
          Err: 'Null'
        }
      },
      ContractInstantiateResult: {
        _enum: {
          Ok: 'InstantiateReturnValue',
          Err: 'Null'
        }
      },
      InstantiateReturnValueTo267: {
        result: 'ExecReturnValue',
        accountId: 'AccountId',
        rentProjection: 'Option<RentProjection>'
      },
      InstantiateReturnValue: {
        _fallback: 'InstantiateReturnValueTo267',
        result: 'ExecReturnValue',
        accountId: 'AccountId'
      },
      InstructionWeights: {
        i64const: 'u32',
        i64load: 'u32',
        i64store: 'u32',
        select: 'u32',
        rIf: 'u32',
        br: 'u32',
        brIf: 'u32',
        brIable: 'u32',
        brIablePerEntry: 'u32',
        call: 'u32',
        callIndirect: 'u32',
        callIndirectPerParam: 'u32',
        localGet: 'u32',
        localSet: 'u32',
        local_tee: 'u32',
        globalGet: 'u32',
        globalSet: 'u32',
        memoryCurrent: 'u32',
        memoryGrow: 'u32',
        i64clz: 'u32',
        i64ctz: 'u32',
        i64popcnt: 'u32',
        i64eqz: 'u32',
        i64extendsi32: 'u32',
        i64extendui32: 'u32',
        i32wrapi64: 'u32',
        i64eq: 'u32',
        i64ne: 'u32',
        i64lts: 'u32',
        i64ltu: 'u32',
        i64gts: 'u32',
        i64gtu: 'u32',
        i64les: 'u32',
        i64leu: 'u32',
        i64ges: 'u32',
        i64geu: 'u32',
        i64add: 'u32',
        i64sub: 'u32',
        i64mul: 'u32',
        i64divs: 'u32',
        i64divu: 'u32',
        i64rems: 'u32',
        i64remu: 'u32',
        i64and: 'u32',
        i64or: 'u32',
        i64xor: 'u32',
        i64shl: 'u32',
        i64shrs: 'u32',
        i64shru: 'u32',
        i64rotl: 'u32',
        i64rotr: 'u32'
      },
      LimitsTo264: {
        eventTopics: 'u32',
        stackHeight: 'u32',
        globals: 'u32',
        parameters: 'u32',
        memoryPages: 'u32',
        tableSize: 'u32',
        brTableSize: 'u32',
        subjectLen: 'u32',
        codeSize: 'u32'
      },
      Limits: {
        eventTopics: 'u32',
        stackHeight: 'u32',
        globals: 'u32',
        parameters: 'u32',
        memoryPages: 'u32',
        tableSize: 'u32',
        brTableSize: 'u32',
        subjectLen: 'u32'
      },
      PrefabWasmModule: {
        scheduleVersion: 'Compact<u32>',
        initial: 'Compact<u32>',
        maximum: 'Compact<u32>',
        refcount: 'Compact<u64>',
        _reserved: 'Option<Null>',
        code: 'Bytes',
        originalCodeLen: 'u32'
      },
      RentProjection: {
        _enum: {
          EvictionAt: 'BlockNumber',
          NoEviction: 'Null'
        }
      },
      ScheduleTo212: {
        version: 'u32',
        putCodePerByteCost: 'Gas',
        growMemCost: 'Gas',
        regularOpCost: 'Gas',
        returnDataPerByteCost: 'Gas',
        eventDataPerByteCost: 'Gas',
        eventPerTopicCost: 'Gas',
        eventBaseCost: 'Gas',
        sandboxDataReadCost: 'Gas',
        sandboxDataWriteCost: 'Gas',
        maxEventTopics: 'u32',
        maxStackHeight: 'u32',
        maxMemoryPages: 'u32',
        enablePrintln: 'bool',
        maxSubjectLen: 'u32'
      },
      ScheduleTo258: {
        version: 'u32',
        putCodePerByteCost: 'Gas',
        growMemCost: 'Gas',
        regularOpCost: 'Gas',
        returnDataPerByteCost: 'Gas',
        eventDataPerByteCost: 'Gas',
        eventPerTopicCost: 'Gas',
        eventBaseCost: 'Gas',
        sandboxDataReadCost: 'Gas',
        sandboxDataWriteCost: 'Gas',
        transferCost: 'Gas',
        maxEventTopics: 'u32',
        maxStackHeight: 'u32',
        maxMemoryPages: 'u32',
        enablePrintln: 'bool',
        maxSubjectLen: 'u32'
      },
      ScheduleTo264: {
        version: 'u32',
        enablePrintln: 'bool',
        limits: 'LimitsTo264',
        instructionWeights: 'InstructionWeights',
        hostFnWeights: 'HostFnWeightsTo264'
      },
      Schedule: {
        version: 'u32',
        enablePrintln: 'bool',
        limits: 'Limits',
        instructionWeights: 'InstructionWeights',
        hostFnWeights: 'HostFnWeights'
      },
      SeedOf: 'Hash',
      TombstoneContractInfo: 'Hash',
      TrieId: 'Bytes'
    }
  };

  const AllConvictions = [
  'None',
  'Locked1x',
  'Locked2x',
  'Locked3x',
  'Locked4x',
  'Locked5x',
  'Locked6x'];
  const definitions$L = {
    rpc: {},
    types: {
      AccountVote: {
        _enum: {
          Standard: 'AccountVoteStandard',
          Split: 'AccountVoteSplit'
        }
      },
      AccountVoteSplit: {
        aye: 'Balance',
        nay: 'Balance'
      },
      AccountVoteStandard: {
        vote: 'Vote',
        balance: 'Balance'
      },
      Conviction: {
        _enum: AllConvictions
      },
      Delegations: {
        votes: 'Balance',
        capital: 'Balance'
      },
      PreimageStatus: {
        _enum: {
          Missing: 'BlockNumber',
          Available: 'PreimageStatusAvailable'
        }
      },
      PreimageStatusAvailable: {
        data: 'Bytes',
        provider: 'AccountId',
        deposit: 'Balance',
        since: 'BlockNumber',
        expiry: 'Option<BlockNumber>'
      },
      PriorLock: '(BlockNumber, Balance)',
      PropIndex: 'u32',
      Proposal: 'Call',
      ProxyState: {
        _enum: {
          Open: 'AccountId',
          Active: 'AccountId'
        }
      },
      ReferendumIndex: 'u32',
      ReferendumInfoTo239: {
        end: 'BlockNumber',
        proposalHash: 'Hash',
        threshold: 'VoteThreshold',
        delay: 'BlockNumber'
      },
      ReferendumInfo: {
        _enum: {
          Ongoing: 'ReferendumStatus',
          Finished: 'ReferendumInfoFinished'
        }
      },
      ReferendumInfoFinished: {
        approved: 'bool',
        end: 'BlockNumber'
      },
      ReferendumStatus: {
        end: 'BlockNumber',
        proposalHash: 'Hash',
        threshold: 'VoteThreshold',
        delay: 'BlockNumber',
        tally: 'Tally'
      },
      Tally: {
        ayes: 'Balance',
        nays: 'Balance',
        turnout: 'Balance'
      },
      Voting: {
        _enum: {
          Direct: 'VotingDirect',
          Delegating: 'VotingDelegating'
        }
      },
      VotingDirect: {
        votes: 'Vec<VotingDirectVote>',
        delegations: 'Delegations',
        prior: 'PriorLock'
      },
      VotingDirectVote: '(ReferendumIndex, AccountVote)',
      VotingDelegating: {
        balance: 'Balance',
        target: 'AccountId',
        conviction: 'Conviction',
        delegations: 'Delegations',
        prior: 'PriorLock'
      }
    }
  };

  const definitions$K = {
    rpc: {},
    types: {
      ApprovalFlag: 'u32',
      DefunctVoter: {
        who: 'AccountId',
        voteCount: 'Compact<u32>',
        candidateCount: 'Compact<u32>'
      },
      Renouncing: {
        _enum: {
          Member: 'Null',
          RunnerUp: 'Null',
          Candidate: 'Compact<u32>'
        }
      },
      SetIndex: 'u32',
      Vote: 'GenericVote',
      VoteIndex: 'u32',
      VoterInfo: {
        lastActive: 'VoteIndex',
        lastWin: 'VoteIndex',
        pot: 'Balance',
        stake: 'Balance'
      },
      VoteThreshold: {
        _enum: ['Super Majority Approve', 'Super Majority Against', 'Simple Majority']
      }
    }
  };

  const definitions$J = {
    rpc: {
      createBlock: {
        description: 'Instructs the manual-seal authorship task to create a new block',
        params: [{
          name: 'createEmpty',
          type: 'bool'
        }, {
          name: 'finalize',
          type: 'bool'
        }, {
          name: 'parentHash',
          type: 'BlockHash',
          isOptional: true
        }],
        type: 'CreatedBlock'
      },
      finalizeBlock: {
        description: 'Instructs the manual-seal authorship task to finalize a block',
        params: [{
          name: 'hash',
          type: 'BlockHash'
        }, {
          name: 'justification',
          type: 'Justification',
          isOptional: true
        }],
        type: 'bool'
      }
    },
    types: {
      CreatedBlock: {
        hash: 'BlockHash',
        aux: 'ImportedAux'
      },
      ImportedAux: {
        headerOnly: 'bool',
        clearJustificationRequests: 'bool',
        needsJustification: 'bool',
        badJustification: 'bool',
        needsFinalityProof: 'bool',
        isNewBest: 'bool'
      }
    }
  };

  const definitions$I = {
    rpc: {},
    types: {
      EvmAccount: {
        nonce: 'u256',
        balance: 'u256'
      },
      EvmLog: {
        address: 'H160',
        topics: 'Vec<H256>',
        data: 'Bytes'
      },
      EvmVicinity: {
        gasPrice: 'u256',
        origin: 'H160'
      },
      ExitError: {
        _enum: {
          StackUnderflow: 'Null',
          StackOverflow: 'Null',
          InvalidJump: 'Null',
          InvalidRange: 'Null',
          DesignatedInvalid: 'Null',
          CallTooDeep: 'Null',
          CreateCollision: 'Null',
          CreateContractLimit: 'Null',
          OutOfOffset: 'Null',
          OutOfGas: 'Null',
          OutOfFund: 'Null',
          PCUnderflow: 'Null',
          CreateEmpty: 'Null',
          Other: 'Text'
        }
      },
      ExitFatal: {
        _enum: {
          NotSupported: 'Null',
          UnhandledInterrupt: 'Null',
          CallErrorAsFatal: 'ExitError',
          Other: 'Text'
        }
      },
      ExitReason: {
        _enum: {
          Succeed: 'ExitSucceed',
          Error: 'ExitError',
          Revert: 'ExitRevert',
          Fatal: 'ExitFatal'
        }
      },
      ExitRevert: {
        _enum: ['Reverted']
      },
      ExitSucceed: {
        _enum: ['Stopped', 'Returned', 'Suicided']
      }
    }
  };

  const definitions$H = {
    rpc: {},
    types: {
      Extrinsic: 'GenericExtrinsic',
      ExtrinsicEra: 'GenericExtrinsicEra',
      ExtrinsicPayload: 'GenericExtrinsicPayload',
      ExtrinsicSignature: 'MultiSignature',
      ExtrinsicV4: 'GenericExtrinsicV4',
      ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
      ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
      ExtrinsicUnknown: 'GenericExtrinsicUnknown',
      ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
      Era: 'ExtrinsicEra',
      ImmortalEra: 'GenericImmortalEra',
      MortalEra: 'GenericMortalEra',
      AnySignature: 'H512',
      MultiSignature: {
        _enum: {
          Ed25519: 'Ed25519Signature',
          Sr25519: 'Sr25519Signature',
          Ecdsa: 'EcdsaSignature'
        }
      },
      Signature: 'H512',
      SignerPayload: 'GenericSignerPayload',
      EcdsaSignature: '[u8; 65]',
      Ed25519Signature: 'H512',
      Sr25519Signature: 'H512'
    }
  };

  const definitions$G = {
    rpc: {},
    types: {
      AssetOptions: {
        initalIssuance: 'Compact<Balance>',
        permissions: 'PermissionLatest'
      },
      Owner: {
        _enum: {
          None: 'Null',
          Address: 'AccountId'
        }
      },
      PermissionsV1: {
        update: 'Owner',
        mint: 'Owner',
        burn: 'Owner'
      },
      PermissionVersions: {
        _enum: {
          V1: 'PermissionsV1'
        }
      },
      PermissionLatest: 'PermissionsV1'
    }
  };

  const definitions$F = {
    rpc: {},
    types: {
      ActiveGilt: {
        proportion: 'Perquintill',
        amount: 'Balance',
        who: 'AccountId',
        expiry: 'BlockNumber'
      },
      ActiveGiltsTotal: {
        frozen: 'Balance',
        proportion: 'Perquintill',
        index: 'ActiveIndex',
        target: 'Perquintill'
      },
      ActiveIndex: 'u32',
      GiltBid: {
        amount: 'Balance',
        who: 'AccountId'
      }
    }
  };

  const definitions$E = {
    rpc: {
      proveFinality: {
        description: 'Prove finality for the range (begin; end] hash.',
        params: [{
          name: 'begin',
          type: 'BlockHash'
        }, {
          name: 'end',
          type: 'BlockHash'
        }, {
          name: 'authoritiesSetId',
          type: 'u64',
          isOptional: true
        }],
        type: 'Option<EncodedFinalityProofs>'
      },
      roundState: {
        description: 'Returns the state of the current best round state as well as the ongoing background rounds',
        params: [],
        type: 'ReportedRoundStates'
      },
      subscribeJustifications: {
        description: 'Subscribes to grandpa justifications',
        params: [],
        pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
        type: 'JustificationNotification'
      }
    },
    types: {
      AuthorityIndex: 'u64',
      AuthorityList: 'Vec<NextAuthority>',
      AuthoritySet: {
        currentAuthorities: 'AuthorityList',
        setId: 'u64',
        pendingStandardChanges: 'ForkTreePendingChange',
        pendingForcedChanges: 'Vec<PendingChange>',
        authoritySetChanges: 'AuthoritySetChanges'
      },
      ForkTreePendingChange: {
        roots: 'Vec<ForkTreePendingChangeNode>',
        bestFinalizedNumber: 'Option<BlockNumber>'
      },
      ForkTreePendingChangeNode: {
        hash: 'BlockHash',
        number: 'BlockNumber',
        data: 'PendingChange',
        children: 'Vec<ForkTreePendingChangeNode>'
      },
      AuthoritySetChange: '(U64, BlockNumber)',
      AuthoritySetChanges: 'Vec<AuthoritySetChange>',
      AuthorityWeight: 'u64',
      DelayKind: {
        _enum: {
          Finalized: 'Null',
          Best: 'DelayKindBest'
        }
      },
      DelayKindBest: {
        medianLastFinalized: 'BlockNumber'
      },
      EncodedFinalityProofs: 'Bytes',
      GrandpaEquivocation: {
        _enum: {
          Prevote: 'GrandpaEquivocationValue',
          Precommit: 'GrandpaEquivocationValue'
        }
      },
      GrandpaEquivocationProof: {
        setId: 'SetId',
        equivocation: 'GrandpaEquivocation'
      },
      GrandpaEquivocationValue: {
        roundNumber: 'u64',
        identity: 'AuthorityId',
        first: '(GrandpaPrevote, AuthoritySignature)',
        second: '(GrandpaPrevote, AuthoritySignature)'
      },
      GrandpaPrevote: {
        targetHash: 'Hash',
        targetNumber: 'BlockNumber'
      },
      GrandpaCommit: {
        targetHash: 'BlockHash',
        targetNumber: 'BlockNumber',
        precommits: 'Vec<GrandpaSignedPrecommit>'
      },
      GrandpaPrecommit: {
        targetHash: 'BlockHash',
        targetNumber: 'BlockNumber'
      },
      GrandpaSignedPrecommit: {
        precommit: 'GrandpaPrecommit',
        signature: 'AuthoritySignature',
        id: 'AuthorityId'
      },
      GrandpaJustification: {
        round: 'u64',
        commit: 'GrandpaCommit',
        votesAncestries: 'Vec<Header>'
      },
      JustificationNotification: 'Bytes',
      KeyOwnerProof: 'MembershipProof',
      NextAuthority: '(AuthorityId, AuthorityWeight)',
      PendingChange: {
        nextAuthorities: 'AuthorityList',
        delay: 'BlockNumber',
        canonHeight: 'BlockNumber',
        canonHash: 'BlockHash',
        delayKind: 'DelayKind'
      },
      PendingPause: {
        scheduledAt: 'BlockNumber',
        delay: 'BlockNumber'
      },
      PendingResume: {
        scheduledAt: 'BlockNumber',
        delay: 'BlockNumber'
      },
      Precommits: {
        currentWeight: 'u32',
        missing: 'BTreeSet<AuthorityId>'
      },
      Prevotes: {
        currentWeight: 'u32',
        missing: 'BTreeSet<AuthorityId>'
      },
      ReportedRoundStates: {
        setId: 'u32',
        best: 'RoundState',
        background: 'Vec<RoundState>'
      },
      RoundState: {
        round: 'u32',
        totalWeight: 'u32',
        thresholdWeight: 'u32',
        prevotes: 'Prevotes',
        precommits: 'Precommits'
      },
      SetId: 'u64',
      StoredPendingChange: {
        scheduledAt: 'BlockNumber',
        delay: 'BlockNumber',
        nextAuthorities: 'AuthorityList'
      },
      StoredState: {
        _enum: {
          Live: 'Null',
          PendingPause: 'PendingPause',
          Paused: 'Null',
          PendingResume: 'PendingResume'
        }
      }
    }
  };

  const definitions$D = {
    rpc: {},
    types: {
      IdentityFields: {
        _set: {
          _bitLength: 64,
          Display: 0b00000000000000000000000000000001,
          Legal: 0b00000000000000000000000000000010,
          Web: 0b00000000000000000000000000000100,
          Riot: 0b00000000000000000000000000001000,
          Email: 0b00000000000000000000000000010000,
          PgpFingerprint: 0b00000000000000000000000000100000,
          Image: 0b00000000000000000000000001000000,
          Twitter: 0b00000000000000000000000010000000
        }
      },
      IdentityInfoAdditional: '(Data, Data)',
      IdentityInfoTo198: {
        additional: 'Vec<IdentityInfoAdditional>',
        display: 'Data',
        legal: 'Data',
        web: 'Data',
        riot: 'Data',
        email: 'Data',
        pgpFingerprint: 'Option<H160>',
        image: 'Data'
      },
      IdentityInfo: {
        _fallback: 'IdentityInfoTo198',
        additional: 'Vec<IdentityInfoAdditional>',
        display: 'Data',
        legal: 'Data',
        web: 'Data',
        riot: 'Data',
        email: 'Data',
        pgpFingerprint: 'Option<H160>',
        image: 'Data',
        twitter: 'Data'
      },
      IdentityJudgement: {
        _enum: {
          Unknown: 'Null',
          FeePaid: 'Balance',
          Reasonable: 'Null',
          KnownGood: 'Null',
          OutOfDate: 'Null',
          LowQuality: 'Null',
          Erroneous: 'Null'
        }
      },
      RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
      RegistrationTo198: {
        judgements: 'Vec<RegistrationJudgement>',
        deposit: 'Balance',
        info: 'IdentityInfoTo198'
      },
      Registration: {
        _fallback: 'RegistrationTo198',
        judgements: 'Vec<RegistrationJudgement>',
        deposit: 'Balance',
        info: 'IdentityInfo'
      },
      RegistrarIndex: 'u32',
      RegistrarInfo: {
        account: 'AccountId',
        fee: 'Balance',
        fields: 'IdentityFields'
      }
    }
  };

  const definitions$C = {
    rpc: {},
    types: {
      AuthIndex: 'u32',
      AuthoritySignature: 'Signature',
      Heartbeat: {
        blockNumber: 'BlockNumber',
        networkState: 'OpaqueNetworkState',
        sessionIndex: 'SessionIndex',
        authorityIndex: 'AuthIndex',
        validatorsLen: 'u32'
      },
      HeartbeatTo244: {
        blockNumber: 'BlockNumber',
        networkState: 'OpaqueNetworkState',
        sessionIndex: 'SessionIndex',
        authorityIndex: 'AuthIndex'
      },
      OpaqueMultiaddr: 'Bytes',
      OpaquePeerId: 'Bytes',
      OpaqueNetworkState: {
        peerId: 'OpaquePeerId',
        externalAddresses: 'Vec<OpaqueMultiaddr>'
      }
    }
  };

  const definitions$B = {
    rpc: {},
    types: {
      CallIndex: '(u8, u8)',
      LotteryConfig: {
        price: 'Balance',
        start: 'BlockNumber',
        length: 'BlockNumber',
        delay: 'BlockNumber',
        repeat: 'bool'
      }
    }
  };

  const definitions$A = {
    rpc: {
      generateProof: {
        description: 'Generate MMR proof for given leaf index.',
        params: [{
          name: 'leafIndex',
          type: 'u64'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'MmrLeafProof'
      }
    },
    types: {
      MmrLeafProof: {
        blockHash: 'BlockHash',
        leaf: 'Bytes',
        proof: 'Bytes'
      }
    }
  };

  const definitions$z = {
    rpc: {},
    types: {
      DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
      Kind: '[u8; 16]',
      OffenceDetails: {
        offender: 'Offender',
        reporters: 'Vec<Reporter>'
      },
      Offender: 'IdentificationTuple',
      OpaqueTimeSlot: 'Bytes',
      ReportIdOf: 'Hash',
      Reporter: 'AccountId'
    }
  };

  const definitions$y = {
    rpc: {},
    types: {
      ProxyDefinition: {
        delegate: 'AccountId',
        proxyType: 'ProxyType',
        delay: 'BlockNumber'
      },
      ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
      },
      ProxyAnnouncement: {
        real: 'AccountId',
        callHash: 'Hash',
        height: 'BlockNumber'
      }
    }
  };

  const definitions$x = {
    rpc: {},
    types: {
      ActiveRecovery: {
        created: 'BlockNumber',
        deposit: 'Balance',
        friends: 'Vec<AccountId>'
      },
      RecoveryConfig: {
        delayPeriod: 'BlockNumber',
        deposit: 'Balance',
        friends: 'Vec<AccountId>',
        threshold: 'u16'
      }
    }
  };

  const definitions$w = {
    rpc: {},
    types: {
      Period: '(BlockNumber, u32)',
      Priority: 'u8',
      SchedulePeriod: 'Period',
      SchedulePriority: 'Priority',
      Scheduled: {
        maybeId: 'Option<Bytes>',
        priority: 'SchedulePriority',
        call: 'Call',
        maybePeriodic: 'Option<SchedulePeriod>',
        origin: 'PalletsOrigin'
      },
      ScheduledTo254: {
        maybeId: 'Option<Bytes>',
        priority: 'SchedulePriority',
        call: 'Call',
        maybePeriodic: 'Option<SchedulePeriod>'
      },
      TaskAddress: '(BlockNumber, u32)'
    }
  };

  const keyTypes = {
    BeefyKey: '[u8; 33]',
    Keys: 'SessionKeys4',
    SessionKeys1: '(AccountId)',
    SessionKeys2: '(AccountId, AccountId)',
    SessionKeys3: '(AccountId, AccountId, AccountId)',
    SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
    SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6B: '(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys7B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys8B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys9B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys10: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys10B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)'
  };
  const definitions$v = {
    rpc: {},
    types: objectSpread$1({}, keyTypes, {
      FullIdentification: 'Exposure',
      IdentificationTuple: '(ValidatorId, FullIdentification)',
      MembershipProof: {
        session: 'SessionIndex',
        trieNodes: 'Vec<Vec<u8>>',
        validatorCount: 'ValidatorCount'
      },
      SessionIndex: 'u32',
      ValidatorCount: 'u32'
    })
  };

  const definitions$u = {
    rpc: {},
    types: {
      Bid: {
        who: 'AccountId',
        kind: 'BidKind',
        value: 'Balance'
      },
      BidKind: {
        _enum: {
          Deposit: 'Balance',
          Vouch: '(AccountId, Balance)'
        }
      },
      SocietyJudgement: {
        _enum: ['Rebid', 'Reject', 'Approve']
      },
      SocietyVote: {
        _enum: ['Skeptic', 'Reject', 'Approve']
      },
      StrikeCount: 'u32',
      VouchingStatus: {
        _enum: ['Vouching', 'Banned']
      }
    }
  };

  const deprecated = {
    Points: 'u32',
    EraPoints: {
      total: 'Points',
      individual: 'Vec<Points>'
    }
  };
  const phragmen = {
    CompactAssignments: 'CompactAssignmentsWith16',
    CompactAssignmentsWith16: {
      votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
      votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
      votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
      votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
      votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
      votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
      votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
      votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
      votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
      votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
      votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
      votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
      votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
      votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
      votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
      votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
    },
    CompactAssignmentsWith24: {
      votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
      votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
      votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
      votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
      votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
      votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
      votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
      votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
      votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
      votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
      votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
      votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
      votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
      votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
      votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
      votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>',
      votes17: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>',
      votes18: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>',
      votes19: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>',
      votes20: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>',
      votes21: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>',
      votes22: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>',
      votes23: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>',
      votes24: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>'
    },
    CompactAssignmentsTo265: 'CompactAssignmentsWith16',
    CompactAssignmentsTo257: {
      votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
      votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
      votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
      votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
      votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
      votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
      votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
      votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
      votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
      votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
      votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
      votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
      votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
      votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
      votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
      votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
    },
    CompactScore: '(ValidatorIndex, OffchainAccuracy)',
    CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
    ElectionCompute: {
      _enum: ['OnChain', 'Signed', 'Unsigned']
    },
    ElectionPhase: {
      _enum: {
        Off: null,
        Signed: null,
        Unsigned: '(bool, BlockNumber)',
        Emergency: null
      }
    },
    ElectionResult: {
      compute: 'ElectionCompute',
      slotStake: 'Balance',
      electedStashes: 'Vec<AccountId>',
      exposures: 'Vec<(AccountId, Exposure)>'
    },
    ElectionScore: '[u128; 3]',
    ElectionSize: {
      validators: 'Compact<ValidatorIndex>',
      nominators: 'Compact<NominatorIndex>'
    },
    ElectionStatus: {
      _enum: {
        Close: 'Null',
        Open: 'BlockNumber'
      }
    },
    ExtendedBalance: 'u128',
    RawSolution: 'RawSolutionWith16',
    RawSolutionWith16: {
      compact: 'CompactAssignmentsWith16',
      score: 'ElectionScore',
      round: 'u32'
    },
    RawSolutionWith24: {
      compact: 'CompactAssignmentsWith24',
      score: 'ElectionScore',
      round: 'u32'
    },
    RawSolutionTo265: 'RawSolutionWith16',
    ReadySolution: {
      supports: 'SolutionSupports',
      score: 'ElectionScore',
      compute: 'ElectionCompute'
    },
    RoundSnapshot: {
      voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
      targets: 'Vec<AccountId>'
    },
    SeatHolder: {
      who: 'AccountId',
      stake: 'Balance',
      deposit: 'Balance'
    },
    SignedSubmission: {
      _fallback: 'SignedSubmissionTo276',
      who: 'AccountId',
      deposit: 'Balance',
      solution: 'RawSolution',
      reward: 'Balance'
    },
    SignedSubmissionTo276: {
      who: 'AccountId',
      deposit: 'Balance',
      solution: 'RawSolution'
    },
    SignedSubmissionOf: 'SignedSubmission',
    SolutionOrSnapshotSize: {
      voters: 'Compact<u32>',
      targets: 'Compact<u32>'
    },
    SolutionSupport: {
      total: 'ExtendedBalance',
      voters: 'Vec<(AccountId, ExtendedBalance)>'
    },
    SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
    Supports: 'SolutionSupports',
    SubmissionIndicesOf: 'BTreeMap<ElectionScore, u32>',
    Voter: {
      votes: 'Vec<AccountId>',
      stake: 'Balance',
      deposit: 'Balance'
    },
    VoteWeight: 'u64'
  };
  const definitions$t = {
    rpc: {},
    types: objectSpread$1({}, deprecated, phragmen, {
      ActiveEraInfo: {
        index: 'EraIndex',
        start: 'Option<Moment>'
      },
      EraIndex: 'u32',
      EraRewardPoints: {
        total: 'RewardPoint',
        individual: 'BTreeMap<AccountId, RewardPoint>'
      },
      EraRewards: {
        total: 'u32',
        rewards: 'Vec<u32>'
      },
      Exposure: {
        total: 'Compact<Balance>',
        own: 'Compact<Balance>',
        others: 'Vec<IndividualExposure>'
      },
      Forcing: {
        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
      },
      IndividualExposure: {
        who: 'AccountId',
        value: 'Compact<Balance>'
      },
      KeyType: 'AccountId',
      MomentOf: 'Moment',
      Nominations: {
        targets: 'Vec<AccountId>',
        submittedIn: 'EraIndex',
        suppressed: 'bool'
      },
      NominatorIndex: 'u32',
      NominatorIndexCompact: 'Compact<NominatorIndex>',
      OffchainAccuracy: 'PerU16',
      OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
      PhragmenScore: '[u128; 3]',
      Points: 'u32',
      RewardDestination: {
        _enum: {
          Staked: 'Null',
          Stash: 'Null',
          Controller: 'Null',
          Account: 'AccountId',
          None: 'Null'
        }
      },
      RewardPoint: 'u32',
      SlashJournalEntry: {
        who: 'AccountId',
        amount: 'Balance',
        ownSlash: 'Balance'
      },
      SlashingSpansTo204: {
        spanIndex: 'SpanIndex',
        lastStart: 'EraIndex',
        prior: 'Vec<EraIndex>'
      },
      SlashingSpans: {
        spanIndex: 'SpanIndex',
        lastStart: 'EraIndex',
        lastNonzeroSlash: 'EraIndex',
        prior: 'Vec<EraIndex>'
      },
      SpanIndex: 'u32',
      SpanRecord: {
        slashed: 'Balance',
        paidOut: 'Balance'
      },
      StakingLedgerTo223: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>'
      },
      StakingLedgerTo240: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>',
        lastReward: 'Option<EraIndex>'
      },
      StakingLedger: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>',
        claimedRewards: 'Vec<EraIndex>'
      },
      UnappliedSlashOther: '(AccountId, Balance)',
      UnappliedSlash: {
        validator: 'AccountId',
        own: 'Balance',
        others: 'Vec<UnappliedSlashOther>',
        reporters: 'Vec<AccountId>',
        payout: 'Balance'
      },
      UnlockChunk: {
        value: 'Compact<Balance>',
        era: 'Compact<BlockNumber>'
      },
      ValidatorIndex: 'u16',
      ValidatorIndexCompact: 'Compact<ValidatorIndex>',
      ValidatorPrefs: 'ValidatorPrefsWithBlocked',
      ValidatorPrefsWithCommission: {
        commission: 'Compact<Perbill>'
      },
      ValidatorPrefsWithBlocked: {
        commission: 'Compact<Perbill>',
        blocked: 'bool'
      },
      ValidatorPrefsTo196: {
        validatorPayment: 'Compact<Balance>'
      },
      ValidatorPrefsTo145: {
        unstakeThreshold: 'Compact<u32>',
        validatorPayment: 'Compact<Balance>'
      }
    })
  };

  const definitions$s = {
    rpc: {},
    types: {
      WeightToFeeCoefficient: {
        coeffInteger: 'Balance',
        coeffFrac: 'Perbill',
        negative: 'bool',
        degree: 'u8'
      }
    }
  };

  const definitions$r = {
    rpc: {
      genSyncSpec: {
        endpoint: 'sync_state_genSyncSpec',
        description: 'Returns the json-serialized chainspec running the node, with a sync state.',
        params: [{
          name: 'raw',
          type: 'bool'
        }],
        type: 'Json'
      }
    },
    types: {}
  };

  const definitions$q = {
    rpc: {
      accountNextIndex: {
        alias: ['account_nextIndex'],
        description: 'Retrieves the next accountIndex as available on the node',
        params: [{
          name: 'accountId',
          type: 'AccountId'
        }],
        type: 'Index'
      },
      dryRun: {
        alias: ['system_dryRunAt'],
        description: 'Dry run an extrinsic at a given block',
        params: [{
          name: 'extrinsic',
          type: 'Bytes'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ApplyExtrinsicResult'
      },
      name: {
        description: 'Retrieves the node name',
        params: [],
        type: 'Text'
      },
      version: {
        description: 'Retrieves the version of the node',
        params: [],
        type: 'Text'
      },
      chain: {
        description: 'Retrieves the chain',
        params: [],
        type: 'Text'
      },
      chainType: {
        description: 'Retrieves the chain type',
        params: [],
        type: 'ChainType'
      },
      properties: {
        description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
        params: [],
        type: 'ChainProperties'
      },
      health: {
        description: 'Return health status of the node',
        params: [],
        type: 'Health'
      },
      localPeerId: {
        description: 'Returns the base58-encoded PeerId of the node',
        params: [],
        type: 'Text'
      },
      localListenAddresses: {
        description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
        params: [],
        type: 'Vec<Text>'
      },
      peers: {
        description: 'Returns the currently connected peers',
        params: [],
        type: 'Vec<PeerInfo>'
      },
      networkState: {
        alias: ['system_unstable_networkState'],
        description: 'Returns current state of the network',
        params: [],
        type: 'NetworkState'
      },
      addReservedPeer: {
        description: 'Adds a reserved peer',
        params: [{
          name: 'peer',
          type: 'Text'
        }],
        type: 'Text'
      },
      removeReservedPeer: {
        description: 'Remove a reserved peer',
        params: [{
          name: 'peerId',
          type: 'Text'
        }],
        type: 'Text'
      },
      reservedPeers: {
        description: 'Returns the list of reserved peers',
        params: [],
        type: 'Vec<Text>'
      },
      nodeRoles: {
        description: 'Returns the roles the node is running as',
        params: [],
        type: 'Vec<NodeRole>'
      },
      syncState: {
        description: 'Returns the state of the syncing of the node',
        params: [],
        type: 'SyncState'
      },
      addLogFilter: {
        description: 'Adds the supplied directives to the current log filter',
        params: [{
          name: 'directives',
          type: 'Text'
        }],
        type: 'Null'
      },
      resetLogFilter: {
        description: 'Resets the log filter to Substrate defaults',
        params: [],
        type: 'Null'
      }
    },
    types: {
      AccountInfo: 'AccountInfoWithTripleRefCount',
      AccountInfoWithRefCountU8: {
        nonce: 'Index',
        refcount: 'u8',
        data: 'AccountData'
      },
      AccountInfoWithRefCount: {
        _fallback: 'AccountInfoWithRefCountU8',
        nonce: 'Index',
        refcount: 'RefCount',
        data: 'AccountData'
      },
      AccountInfoWithDualRefCount: {
        _fallback: 'AccountInfoWithRefCount',
        nonce: 'Index',
        consumers: 'RefCount',
        providers: 'RefCount',
        data: 'AccountData'
      },
      AccountInfoWithProviders: 'AccountInfoWithDualRefCount',
      AccountInfoWithTripleRefCount: {
        _fallback: 'AccountInfoWithDualRefCount',
        nonce: 'Index',
        consumers: 'RefCount',
        providers: 'RefCount',
        sufficients: 'RefCount',
        data: 'AccountData'
      },
      ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
      ArithmeticError: {
        _enum: ['Underflow', 'Overflow', 'DivisionByZero']
      },
      BlockLength: {
        max: 'PerDispatchClassU32'
      },
      BlockWeights: {
        baseBlock: 'Weight',
        maxBlock: 'Weight',
        perClass: 'PerDispatchClassWeightsPerClass'
      },
      ChainProperties: 'GenericChainProperties',
      ChainType: {
        _enum: {
          Development: 'Null',
          Local: 'Null',
          Live: 'Null',
          Custom: 'Text'
        }
      },
      ConsumedWeight: 'PerDispatchClassWeight',
      DigestOf: 'Digest',
      DispatchClass: {
        _enum: ['Normal', 'Operational', 'Mandatory']
      },
      DispatchError: {
        _enum: {
          Other: 'Null',
          CannotLookup: 'Null',
          BadOrigin: 'Null',
          Module: 'DispatchErrorModule',
          ConsumerRemaining: 'Null',
          NoProviders: 'Null',
          Token: 'TokenError',
          Arithmetic: 'ArithmeticError'
        }
      },
      DispatchErrorModule: {
        index: 'u8',
        error: 'u8'
      },
      DispatchErrorTo198: {
        module: 'Option<u8>',
        error: 'u8'
      },
      DispatchInfo: {
        weight: 'Weight',
        class: 'DispatchClass',
        paysFee: 'Pays'
      },
      DispatchInfoTo190: {
        weight: 'Weight',
        class: 'DispatchClass'
      },
      DispatchInfoTo244: {
        weight: 'Weight',
        class: 'DispatchClass',
        paysFee: 'bool'
      },
      DispatchOutcome: 'Result<(), DispatchError>',
      DispatchResult: 'Result<(), DispatchError>',
      DispatchResultOf: 'DispatchResult',
      DispatchResultTo198: 'Result<(), Text>',
      Event: 'GenericEvent',
      EventId: '[u8; 2]',
      EventIndex: 'u32',
      EventRecord: {
        phase: 'Phase',
        event: 'Event',
        topics: 'Vec<Hash>'
      },
      Health: {
        peers: 'u64',
        isSyncing: 'bool',
        shouldHavePeers: 'bool'
      },
      InvalidTransaction: {
        _enum: {
          Call: 'Null',
          Payment: 'Null',
          Future: 'Null',
          Stale: 'Null',
          BadProof: 'Null',
          AncientBirthBlock: 'Null',
          ExhaustsResources: 'Null',
          Custom: 'u8',
          BadMandatory: 'Null',
          MandatoryDispatch: 'Null'
        }
      },
      Key: 'Bytes',
      LastRuntimeUpgradeInfo: {
        specVersion: 'Compact<u32>',
        specName: 'Text'
      },
      NetworkState: {
        peerId: 'Text',
        listenedAddresses: 'Vec<Text>',
        externalAddresses: 'Vec<Text>',
        connectedPeers: 'HashMap<Text, Peer>',
        notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
        averageDownloadPerSec: 'u64',
        averageUploadPerSec: 'u64',
        peerset: 'NetworkStatePeerset'
      },
      NetworkStatePeerset: {
        messageQueue: 'u64',
        nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
      },
      NetworkStatePeersetInfo: {
        connected: 'bool',
        reputation: 'i32'
      },
      NodeRole: {
        _enum: {
          Full: 'Null',
          LightClient: 'Null',
          Authority: 'Null',
          UnknownRole: 'u8'
        }
      },
      NotConnectedPeer: {
        knownAddresses: 'Vec<Text>',
        latestPingTime: 'Option<PeerPing>',
        versionString: 'Option<Text>'
      },
      Peer: {
        enabled: 'bool',
        endpoint: 'PeerEndpoint',
        knownAddresses: 'Vec<Text>',
        latestPingTime: 'PeerPing',
        open: 'bool',
        versionString: 'Text'
      },
      PeerEndpoint: {
        listening: 'PeerEndpointAddr'
      },
      PeerEndpointAddr: {
        _alias: {
          localAddr: 'local_addr',
          sendBackAddr: 'send_back_addr'
        },
        localAddr: 'Text',
        sendBackAddr: 'Text'
      },
      PeerPing: {
        nanos: 'u64',
        secs: 'u64'
      },
      PeerInfo: {
        peerId: 'Text',
        roles: 'Text',
        protocolVersion: 'u32',
        bestHash: 'Hash',
        bestNumber: 'BlockNumber'
      },
      PerDispatchClassU32: {
        normal: 'u32',
        operational: 'u32',
        mandatory: 'u32'
      },
      PerDispatchClassWeight: {
        normal: 'Weight',
        operational: 'Weight',
        mandatory: 'Weight'
      },
      PerDispatchClassWeightsPerClass: {
        normal: 'WeightPerClass',
        operational: 'WeightPerClass',
        mandatory: 'WeightPerClass'
      },
      Phase: {
        _enum: {
          ApplyExtrinsic: 'u32',
          Finalization: 'Null',
          Initialization: 'Null'
        }
      },
      RawOrigin: {
        _enum: {
          Root: 'Null',
          Signed: 'AccountId',
          None: 'Null'
        }
      },
      RefCount: 'u32',
      RefCountTo259: 'u8',
      SyncState: {
        startingBlock: 'BlockNumber',
        currentBlock: 'BlockNumber',
        highestBlock: 'Option<BlockNumber>'
      },
      SystemOrigin: 'RawOrigin',
      TokenError: {
        _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen',
        'Underflow', 'Overflow']
      },
      TransactionValidityError: {
        _enum: {
          Invalid: 'InvalidTransaction',
          Unknown: 'UnknownTransaction'
        }
      },
      UnknownTransaction: {
        _enum: {
          CannotLookup: 'Null',
          NoUnsignedValidator: 'Null',
          Custom: 'u8'
        }
      },
      WeightPerClass: {
        baseExtrinsic: 'Weight',
        maxExtrinsic: 'Weight',
        maxTotal: 'Option<Weight>',
        reserved: 'Option<Weight>'
      }
    }
  };

  const definitions$p = {
    rpc: {},
    types: {
      Bounty: {
        proposer: 'AccountId',
        value: 'Balance',
        fee: 'Balance',
        curatorDeposit: 'Balance',
        bond: 'Balance',
        status: 'BountyStatus'
      },
      BountyIndex: 'u32',
      BountyStatus: {
        _enum: {
          Proposed: 'Null',
          Approved: 'Null',
          Funded: 'Null',
          CuratorProposed: 'BountyStatusCuratorProposed',
          Active: 'BountyStatusActive',
          PendingPayout: 'BountyStatusPendingPayout'
        }
      },
      BountyStatusActive: {
        curator: 'AccountId',
        updateDue: 'BlockNumber'
      },
      BountyStatusCuratorProposed: {
        curator: 'AccountId'
      },
      BountyStatusPendingPayout: {
        curator: 'AccountId',
        beneficiary: 'AccountId',
        unlockAt: 'BlockNumber'
      },
      OpenTip: {
        reason: 'Hash',
        who: 'AccountId',
        finder: 'AccountId',
        deposit: 'Balance',
        closes: 'Option<BlockNumber>',
        tips: 'Vec<OpenTipTip>',
        findersFee: 'bool'
      },
      OpenTipTo225: {
        reason: 'Hash',
        who: 'AccountId',
        finder: 'Option<OpenTipFinderTo225>',
        closes: 'Option<BlockNumber>',
        tips: 'Vec<OpenTipTip>'
      },
      OpenTipFinderTo225: '(AccountId, Balance)',
      OpenTipTip: '(AccountId, Balance)',
      TreasuryProposal: {
        proposer: 'AccountId',
        value: 'Balance',
        beneficiary: 'AccountId',
        bond: 'Balance'
      }
    }
  };

  const definitions$o = {
    rpc: {},
    types: {
      Multiplier: 'Fixed128'
    }
  };

  const definitions$n = {
    rpc: {},
    types: {
      ClassId: 'u32',
      InstanceId: 'u32',
      DepositBalance: 'Balance',
      DepositBalanceOf: 'Balance',
      ClassDetails: {
        owner: 'AccountId',
        issuer: 'AccountId',
        admin: 'AccountId',
        freezer: 'AccountId',
        totalDeposit: 'DepositBalance',
        freeHolding: 'bool',
        instances: 'u32',
        instanceMetadatas: 'u32',
        attributes: 'u32',
        isFrozen: 'bool'
      },
      DestroyWitness: {
        instances: 'Compact<u32>',
        instanceMetadatas: 'Compact<u32>',
        attributes: 'Compact<u32>'
      },
      InstanceDetails: {
        owner: 'AccountId',
        approved: 'Option<AccountId>',
        isFrozen: 'bool',
        deposit: 'DepositBalance'
      },
      ClassMetadata: {
        deposit: 'DepositBalance',
        data: 'Vec<u8>',
        isFrozen: 'bool'
      },
      InstanceMetadata: {
        deposit: 'DepositBalance',
        data: 'Vec<u8>',
        isFrozen: 'bool'
      }
    }
  };

  const definitions$m = {
    rpc: {},
    types: {
      Multisig: {
        when: 'Timepoint',
        deposit: 'Balance',
        depositor: 'AccountId',
        approvals: 'Vec<AccountId>'
      },
      Timepoint: {
        height: 'BlockNumber',
        index: 'u32'
      }
    }
  };

  const definitions$l = {
    rpc: {},
    types: {
      VestingInfo: {
        locked: 'Balance',
        perBlock: 'Balance',
        startingBlock: 'BlockNumber'
      }
    }
  };

  const definitions$k = {
    rpc: {},
    types: {
      BlockAttestations: {
        receipt: 'CandidateReceipt',
        valid: 'Vec<AccountId>',
        invalid: 'Vec<AccountId>'
      },
      IncludedBlocks: {
        actualNumber: 'BlockNumber',
        session: 'SessionIndex',
        randomSeed: 'H256',
        activeParachains: 'Vec<ParaId>',
        paraBlocks: 'Vec<Hash>'
      },
      MoreAttestations: {}
    }
  };

  const definitions$j = {
    rpc: {},
    types: {
      BridgedBlockHash: 'H256',
      BridgedBlockNumber: 'BlockNumber',
      BridgedHeader: 'Header',
      BridgeMessageId: '(LaneId, MessageNonce)',
      CallOrigin: {
        _enum: {
          SourceRoot: 'Null',
          TargetAccount: '(AccountId, MultiSigner, MultiSignature)',
          SourceAccount: 'AccountId'
        }
      },
      ChainId: '[u8; 4]',
      DeliveredMessages: {
        begin: 'MessageNonce',
        end: 'MessageNonce',
        dispatchResults: 'BitVec'
      },
      DispatchFeePayment: {
        _enum: ['AtSourceChain', 'AtTargetChain']
      },
      InboundLaneData: {
        relayers: 'Vec<UnrewardedRelayer>',
        lastConfirmedNonce: 'MessageNonce'
      },
      InboundRelayer: 'AccountId',
      InitializationData: {
        header: 'Header',
        authorityList: 'AuthorityList',
        setId: 'SetId',
        isHalted: 'bool'
      },
      LaneId: '[u8; 4]',
      MessageData: {
        payload: 'Bytes',
        fee: 'Balance'
      },
      MessagesDeliveryProofOf: {
        bridgedHeaderHash: 'BlockHash',
        storageProof: 'Vec<Bytes>',
        lane: 'LaneId'
      },
      MessageKey: {
        laneId: 'LaneId',
        nonce: 'MessageNonce'
      },
      MessageNonce: 'u64',
      MessagesProofOf: {
        bridgedHeaderHash: 'BridgedBlockHash',
        storageProof: 'Vec<Bytes>',
        lane: 'LaneId',
        noncesStart: 'MessageNonce',
        noncesEnd: 'MessageNonce'
      },
      OperatingMode: {
        _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']
      },
      OutboundLaneData: {
        oldestUnprunedNonce: 'MessageNonce',
        latestReceivedNonce: 'MessageNonce',
        latestGeneratedNonce: 'MessageNonce'
      },
      OutboundMessageFee: 'Balance',
      OutboundPayload: {
        specVersion: 'u32',
        weight: 'Weight',
        origin: 'CallOrigin',
        dispatchFeePayment: 'DispatchFeePayment',
        call: 'Bytes'
      },
      Parameter: 'Null',
      RelayerId: 'AccountId',
      UnrewardedRelayer: {
        relayer: 'RelayerId',
        messages: 'DeliveredMessages'
      },
      UnrewardedRelayersState: {
        unrewardedRelayer_Entries: 'MessageNonce',
        messagesInOldestEntry: 'MessageNonce',
        totalMessages: 'MessageNonce'
      }
    }
  };

  const definitions$i = {
    rpc: {},
    types: {
      StatementKind: {
        _enum: ['Regular', 'Saft']
      }
    }
  };

  const definitions$h = {
    rpc: {},
    types: {
      FundIndex: 'u32',
      LastContribution: {
        _enum: {
          Never: 'Null',
          PreEnding: 'u32',
          Ending: 'BlockNumber'
        }
      },
      FundInfo: {
        depositor: 'AccountId',
        verifier: 'Option<MultiSigner>',
        deposit: 'Balance',
        raised: 'Balance',
        end: 'BlockNumber',
        cap: 'Balance',
        lastContribution: 'LastContribution',
        firstPeriod: 'LeasePeriod',
        lastPeriod: 'LeasePeriod',
        trieIndex: 'TrieIndex'
      },
      TrieIndex: 'u32'
    }
  };

  const dmpQueue = {
    ConfigData: {
      maxIndividual: 'Weight'
    },
    MessageId: '[u8; 32]',
    OverweightIndex: 'u64',
    PageCounter: 'u32',
    PageIndexData: {
      beginUsed: 'PageCounter',
      endUsed: 'PageCounter',
      overweightCount: 'OverweightIndex'
    }
  };
  const definitions$g = {
    rpc: {},
    types: dmpQueue
  };

  const hrmpTypes = {
    HrmpChannel: {
      maxCapacity: 'u32',
      maxTotalSize: 'u32',
      maxMessageSize: 'u32',
      msgCount: 'u32',
      totalSize: 'u32',
      mqcHead: 'Option<Hash>',
      senderDeposit: 'Balance',
      recipientDeposit: 'Balance'
    },
    HrmpChannelId: {
      sender: 'u32',
      receiver: 'u32'
    },
    HrmpOpenChannelRequest: {
      confirmed: 'bool',
      age: 'SessionIndex',
      senderDeposit: 'Balance',
      maxMessageSize: 'u32',
      maxCapacity: 'u32',
      maxTotalSize: 'u32'
    }
  };

  const SLOT_RANGE_COUNT = 10;
  const oldTypes = {
    Bidder: {
      _enum: {
        New: 'NewBidder',
        Existing: 'ParaId'
      }
    },
    IncomingParachain: {
      _enum: {
        Unset: 'NewBidder',
        Fixed: 'IncomingParachainFixed',
        Deploy: 'IncomingParachainDeploy'
      }
    },
    IncomingParachainDeploy: {
      code: 'ValidationCode',
      initialHeadData: 'HeadData'
    },
    IncomingParachainFixed: {
      codeHash: 'Hash',
      codeSize: 'u32',
      initialHeadData: 'HeadData'
    },
    NewBidder: {
      who: 'AccountId',
      sub: 'SubId'
    },
    SubId: 'u32'
  };
  const slotTypes = objectSpread$1({}, oldTypes, {
    AuctionIndex: 'u32',
    LeasePeriod: 'BlockNumber',
    LeasePeriodOf: 'BlockNumber',
    SlotRange: {
      _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
    },
    WinningData: `[WinningDataEntry; ${SLOT_RANGE_COUNT}]`,
    WinningDataEntry: 'Option<(AccountId, ParaId, BalanceOf)>',
    WinnersData: 'Vec<WinnersDataTuple>',
    WinnersDataTuple: '(AccountId, ParaId, BalanceOf, SlotRange)'
  });

  const proposeTypes = {
    ParachainProposal: {
      proposer: 'AccountId',
      genesisHead: 'HeadData',
      validators: 'Vec<ValidatorId>',
      name: 'Bytes',
      balance: 'Balance'
    },
    RegisteredParachainInfo: {
      validators: 'Vec<ValidatorId>',
      proposer: 'AccountId'
    }
  };
  const cumulusTypes = {
    ServiceQuality: {
      _enum: ['Ordered', 'Fast']
    }
  };
  const disputeTypes = {
    DisputeLocation: {
      _enum: ['Local', 'Remote']
    },
    DisputeResult: {
      _enum: ['Valid', 'Invalid']
    },
    DisputeState: {
      validatorsFor: 'BitVec',
      validatorsAgainst: 'BitVec',
      start: 'BlockNumber',
      concludedAt: 'Option<BlockNumber>'
    },
    DisputeStatement: {
      _enum: {
        Valid: 'ValidDisputeStatementKind',
        Invalid: 'InvalidDisputeStatementKind'
      }
    },
    DisputeStatementSet: {
      candidateHash: 'CandidateHash',
      session: 'SessionIndex',
      statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'
    },
    ExplicitDisputeStatement: {
      valid: 'bool',
      candidateHash: 'CandidateHash',
      session: 'SessionIndex'
    },
    InvalidDisputeStatementKind: {
      _enum: ['Explicit']
    },
    MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',
    ValidDisputeStatementKind: {
      _enum: {
        Explicit: 'Null',
        BackingSeconded: 'Hash',
        BackingValid: 'Hash',
        ApprovalChecking: 'Null'
      }
    }
  };
  const definitions$f = {
    rpc: {},
    types: objectSpread$1({}, cumulusTypes, disputeTypes, hrmpTypes, proposeTypes, slotTypes, {
      AbridgedCandidateReceipt: {
        parachainIndex: 'ParaId',
        relayParent: 'Hash',
        headData: 'HeadData',
        collator: 'CollatorId',
        signature: 'CollatorSignature',
        povBlockHash: 'Hash',
        commitments: 'CandidateCommitments'
      },
      AbridgedHostConfiguration: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        maxUpwardQueueCount: 'u32',
        maxUpwardQueueSize: 'u32',
        maxUpwardMessageSize: 'u32',
        maxUpwardMessageNumPerCandidate: 'u32',
        hrmpMaxMessageNumPerCandidate: 'u32',
        validationUpgradeFrequency: 'BlockNumber',
        validationUpgradeDelay: 'BlockNumber'
      },
      AbridgedHrmpChannel: {
        maxCapacity: 'u32',
        maxTotalSize: 'u32',
        maxMessageSize: 'u32',
        msgCount: 'u32',
        totalSize: 'u32',
        mqcHead: 'Option<Hash>'
      },
      AssignmentId: 'AccountId',
      AssignmentKind: {
        _enum: {
          Parachain: 'Null',
          Parathread: '(CollatorId, u32)'
        }
      },
      AttestedCandidate: {
        candidate: 'AbridgedCandidateReceipt',
        validityVotes: 'Vec<ValidityAttestation>',
        validatorIndices: 'BitVec'
      },
      AuthorityDiscoveryId: 'AccountId',
      AvailabilityBitfield: 'BitVec',
      AvailabilityBitfieldRecord: {
        bitfield: 'AvailabilityBitfield',
        submittedTt: 'BlockNumber'
      },
      BackedCandidate: {
        candidate: 'CommittedCandidateReceipt',
        validityVotes: 'Vec<ValidityAttestation>',
        validatorIndices: 'BitVec'
      },
      BufferedSessionChange: {
        applyAt: 'BlockNumber',
        validators: 'Vec<ValidatorId>',
        queued: 'Vec<ValidatorId>',
        sessionIndex: 'SessionIndex'
      },
      CandidateCommitments: {
        upwardMessages: 'Vec<UpwardMessage>',
        horizontalMessages: 'Vec<OutboundHrmpMessage>',
        newValidationCode: 'Option<ValidationCode>',
        headData: 'HeadData',
        processedDownwardMessages: 'u32',
        hrmpWatermark: 'BlockNumber'
      },
      CandidateDescriptor: {
        paraId: 'ParaId',
        relayParent: 'RelayChainHash',
        collatorId: 'CollatorId',
        persistedValidationDataHash: 'Hash',
        povHash: 'Hash',
        erasureRoot: 'Hash',
        signature: 'CollatorSignature',
        paraHead: 'Hash',
        validationCodeHash: 'ValidationCodeHash'
      },
      CandidateHash: 'Hash',
      CandidateInfo: {
        who: 'AccountId',
        deposit: 'Balance'
      },
      CandidatePendingAvailability: {
        core: 'CoreIndex',
        hash: 'CandidateHash',
        descriptor: 'CandidateDescriptor',
        availabilityVotes: 'BitVec',
        backers: 'BitVec',
        relayParentNumber: 'BlockNumber',
        backedInNumber: 'BlockNumber',
        backingGroup: 'GroupIndex'
      },
      CandidateReceipt: {
        descriptor: 'CandidateDescriptor',
        commitmentsHash: 'Hash'
      },
      GlobalValidationData: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        blockNumber: 'BlockNumber'
      },
      CollatorId: 'H256',
      CollatorSignature: 'Signature',
      CommittedCandidateReceipt: {
        descriptor: 'CandidateDescriptor',
        commitments: 'CandidateCommitments'
      },
      CoreAssignment: {
        core: 'CoreIndex',
        paraId: 'ParaId',
        kind: 'AssignmentKind',
        groupIdx: 'GroupIndex'
      },
      CoreIndex: 'u32',
      CoreOccupied: {
        _enum: {
          Parathread: 'ParathreadEntry',
          Parachain: 'Null'
        }
      },
      DoubleVoteReport: {
        identity: 'ValidatorId',
        first: '(Statement, ValidatorSignature)',
        second: '(Statement, ValidatorSignature)',
        proof: 'MembershipProof',
        signingContext: 'SigningContext'
      },
      DownwardMessage: 'Bytes',
      GroupIndex: 'u32',
      GlobalValidationSchedule: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        blockNumber: 'BlockNumber'
      },
      HeadData: 'Bytes',
      HostConfiguration: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        maxUpwardQueueCount: 'u32',
        maxUpwardQueueSize: 'u32',
        maxUpwardMessageSize: 'u32',
        maxUpwardMessageNumPerCandidate: 'u32',
        hrmpMaxMessageNumPerCandidate: 'u32',
        validationUpgradeFrequency: 'BlockNumber',
        validationUpgradeDelay: 'BlockNumber',
        maxPovSize: 'u32',
        maxDownwardMessageSize: 'u32',
        preferredDispatchableUpwardMessagesStepWeight: 'Weight',
        hrmpMaxParachainOutboundChannels: 'u32',
        hrmpMaxParathreadOutboundChannels: 'u32',
        hrmpOpenRequestTtl: 'u32',
        hrmpSenderDeposit: 'Balance',
        hrmpRecipientDeposit: 'Balance',
        hrmpChannelMaxCapacity: 'u32',
        hrmpChannelMaxTotalSize: 'u32',
        hrmpMaxParachainInboundChannels: 'u32',
        hrmpMaxParathreadInboundChannels: 'u32',
        hrmpChannelMaxMessageSize: 'u32',
        codeRetentionPeriod: 'BlockNumber',
        parathreadCores: 'u32',
        parathreadRetries: 'u32',
        groupRotationFrequency: 'BlockNumber',
        chainAvailabilityPeriod: 'BlockNumber',
        threadAvailabilityPeriod: 'BlockNumber',
        schedulingLookahead: 'u32',
        maxValidatorsPerCore: 'Option<u32>',
        maxValidators: 'Option<u32>',
        disputePeriod: 'SessionIndex',
        disputePostConclusionAcceptancePeriod: 'BlockNumber',
        disputeMaxSpamSlots: 'u32',
        disputeConclusionByTimeOutPeriod: 'BlockNumber',
        noShowSlots: 'u32',
        nDelayTranches: 'u32',
        zerothDelayTrancheWidth: 'u32',
        neededApprovals: 'u32',
        relayVrfModuloSamples: 'u32'
      },
      InboundDownwardMessage: {
        pubSentAt: 'BlockNumber',
        pubMsg: 'DownwardMessage'
      },
      InboundHrmpMessage: {
        sentAt: 'BlockNumber',
        data: 'Bytes'
      },
      InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
      LocalValidationData: {
        parentHead: 'HeadData',
        balance: 'Balance',
        codeUpgradeAllowed: 'Option<BlockNumber>'
      },
      MessageIngestionType: {
        downwardMessages: 'Vec<InboundDownwardMessage>',
        horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
      },
      MessageQueueChain: 'RelayChainHash',
      OutboundHrmpMessage: {
        recipient: 'u32',
        data: 'Bytes'
      },
      ParachainDispatchOrigin: {
        _enum: ['Signed', 'Parachain', 'Root']
      },
      ParachainInherentData: {
        validationData: 'PersistedValidationData',
        relayChainState: 'StorageProof',
        downwardMessages: 'Vec<InboundDownwardMessage>',
        horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
      },
      ParachainsInherentData: {
        bitfields: 'SignedAvailabilityBitfields',
        backedCandidates: 'Vec<BackedCandidate>',
        disputes: 'MultiDisputeStatementSet',
        parentHeader: 'Header'
      },
      ParaGenesisArgs: {
        genesisHead: 'Bytes',
        validationCode: 'Bytes',
        parachain: 'bool'
      },
      ParaId: 'u32',
      ParaInfo: {
        manager: 'AccountId',
        deposit: 'Balance',
        locked: 'bool'
      },
      ParaLifecycle: {
        _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
      },
      ParaPastCodeMeta: {
        upgradeTimes: 'Vec<ReplacementTimes>',
        lastPruned: 'Option<BlockNumber>'
      },
      ParaScheduling: {
        _enum: ['Always', 'Dynamic']
      },
      ParathreadClaim: '(ParaId, CollatorId)',
      ParathreadClaimQueue: {
        queue: 'Vec<QueuedParathread>',
        nextCoreOffset: 'u32'
      },
      ParathreadEntry: {
        claim: 'ParathreadClaim',
        retries: 'u32'
      },
      ParaValidatorIndex: 'u32',
      PersistedValidationData: {
        parentHead: 'HeadData',
        relayParentNumber: 'RelayChainBlockNumber',
        relayParentStorageRoot: 'Hash',
        maxPovSize: 'u32'
      },
      QueuedParathread: {
        claim: 'ParathreadEntry',
        coreOffset: 'u32'
      },
      RelayBlockNumber: 'u32',
      RelayChainBlockNumber: 'RelayBlockNumber',
      RelayHash: 'Hash',
      RelayChainHash: 'RelayHash',
      Remark: '[u8; 32]',
      ReplacementTimes: {
        expectedAt: 'BlockNumber',
        activatedAt: 'BlockNumber'
      },
      Retriable: {
        _enum: {
          Never: 'Null',
          WithRetries: 'u32'
        }
      },
      Scheduling: {
        _enum: ['Always', 'Dynamic']
      },
      SessionInfo: {
        validators: 'Vec<ValidatorId>',
        discoveryKeys: 'Vec<AuthorityDiscoveryId>',
        assignmentKeys: 'Vec<AssignmentId>',
        validatorGroups: 'Vec<SessionInfoValidatorGroup>',
        nCores: 'u32',
        zerothDelayTrancheWidth: 'u32',
        relayVrfModuloSamples: 'u32',
        nDelayTranches: 'u32',
        noShowSlots: 'u32',
        neededApprovals: 'u32'
      },
      SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
      SignedAvailabilityBitfield: {
        payload: 'BitVec',
        validatorIndex: 'ParaValidatorIndex',
        signature: 'ValidatorSignature'
      },
      SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
      SigningContext: {
        sessionIndex: 'SessionIndex',
        parentHash: 'Hash'
      },
      Statement: {
        _enum: {
          Never: 'Null',
          Candidate: 'Hash',
          Valid: 'Hash',
          Invalid: 'Hash'
        }
      },
      TransientValidationData: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        balance: 'Balance',
        codeUpgradeAllowed: 'Option<BlockNumber>',
        dmqLength: 'u32'
      },
      UpgradeGoAhead: {
        _enum: ['Abort', 'GoAhead']
      },
      UpgradeRestriction: {
        _enum: ['Present']
      },
      UpwardMessage: 'Bytes',
      ValidationFunctionParams: {
        maxCodeSize: 'u32',
        relayChainHeight: 'RelayChainBlockNumber',
        codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
      },
      ValidationCode: 'Bytes',
      ValidationCodeHash: 'Hash',
      ValidationData: {
        persisted: 'PersistedValidationData',
        transient: 'TransientValidationData'
      },
      ValidationDataType: {
        validationData: 'ValidationData',
        relayChainState: 'Vec<Bytes>'
      },
      ValidatorSignature: 'Signature',
      ValidityAttestation: {
        _enum: {
          Never: 'Null',
          Implicit: 'ValidatorSignature',
          Explicit: 'ValidatorSignature'
        }
      },
      MessagingStateSnapshot: {
        relayDispatchQueueSize: '(u32, u32)',
        egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
      },
      MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
      SystemInherentData: 'ParachainInherentData',
      VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
    })
  };

  const definitions$e = {
    rpc: {},
    types: {
      Approvals: '[bool; 4]'
    }
  };

  const definitions$d = {
    rpc: {},
    types: {
      AccountStatus: {
        validity: 'AccountValidity',
        freeBalance: 'Balance',
        lockedBalance: 'Balance',
        signature: 'Vec<u8>',
        vat: 'Permill'
      },
      AccountValidity: {
        _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
      }
    }
  };

  const v0$1 = {
    FungibilityV0: 'FungibilityV1',
    WildFungibilityV0: 'WildFungibilityV1',
    AssetInstanceV0: {
      _enum: {
        Undefined: 'Null',
        Index8: 'u8',
        Index16: 'Compact<u16>',
        Index32: 'Compact<u32>',
        Index64: 'Compact<u64>',
        Index128: 'Compact<u128>',
        Array4: '[u8; 4]',
        Array8: '[u8; 8]',
        Array16: '[u8; 16]',
        Array32: '[u8; 32]',
        Blob: 'Vec<u8>'
      }
    },
    JunctionV0: {
      _enum: {
        Parent: 'Null',
        Parachain: 'Compact<u32>',
        AccountId32: {
          network: 'NetworkId',
          id: 'AccountId'
        },
        AccountIndex64: {
          network: 'NetworkId',
          index: 'Compact<u64>'
        },
        AccountKey20: {
          network: 'NetworkId',
          key: '[u8; 20]'
        },
        PalletInstance: 'u8',
        GeneralIndex: 'Compact<u128>',
        GeneralKey: 'Vec<u8>',
        OnlyChild: 'Null',
        Plurality: {
          id: 'BodyId',
          part: 'BodyPart'
        }
      }
    },
    MultiAssetV0: {
      _enum: {
        None: 'Null',
        All: 'Null',
        AllFungible: 'Null',
        AllNonFungible: 'Null',
        AllAbstractFungible: 'Vec<u8>',
        AllAbstractNonFungible: 'Vec<u8>',
        AllConcreteFungible: 'MultiLocationV0',
        AllConcreteNonFungible: 'MultiLocationV0',
        AbstractFungible: {
          id: 'Vec<u8>',
          instance: 'Compact<u128>'
        },
        AbstractNonFungible: {
          class: 'Vec<u8>',
          instance: 'AssetInstanceV0'
        },
        ConcreteFungible: {
          id: 'MultiLocationV0',
          amount: 'Compact<u128>'
        },
        ConcreteNonFungible: {
          class: 'MultiLocationV0',
          instance: 'AssetInstanceV0'
        }
      }
    },
    MultiLocationV0: {
      _enum: {
        Here: 'Null',
        X1: 'JunctionV0',
        X2: '(JunctionV0, JunctionV0)',
        X3: '(JunctionV0, JunctionV0, JunctionV0)',
        X4: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
        X5: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
        X6: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
        X7: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
        X8: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)'
      }
    },
    OriginKindV0: {
      _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
    },
    ResponseV0: {
      _enum: {
        Assets: 'Vec<MultiAssetV0>'
      }
    },
    XcmV0: {
      _enum: {
        WithdrawAsset: {
          assets: 'Vec<MultiAssetV0>',
          effects: 'Vec<XcmOrderV0>'
        },
        ReserveAssetDeposit: {
          assets: 'Vec<MultiAssetV0>',
          effects: 'Vec<XcmOrderV0>'
        },
        ReceiveTeleportedAsset: {
          assets: 'Vec<MultiAssetV0>',
          effects: 'Vec<XcmOrderV0>'
        },
        QueryResponse: {
          queryId: 'Compact<u64>',
          response: 'ResponseV0'
        },
        TransferAsset: {
          assets: 'Vec<MultiAssetV0>',
          dest: 'MultiLocationV0'
        },
        TransferReserveAsset: {
          assets: 'Vec<MultiAssetV0>',
          dest: 'MultiLocationV0',
          effects: 'Vec<XcmOrderV0>'
        },
        Transact: {
          originType: 'XcmOriginKind',
          requireWeightAtMost: 'u64',
          call: 'DoubleEncodedCall'
        },
        HrmpNewChannelOpenRequest: {
          sender: 'Compact<u32>',
          maxMessageSize: 'Compact<u32>',
          maxCapacity: 'Compact<u32>'
        },
        HrmpChannelAccepted: {
          recipient: 'Compact<u32>'
        },
        HrmpChannelClosing: {
          initiator: 'Compact<u32>',
          sender: 'Compact<u32>',
          recipient: 'Compact<u32>'
        },
        RelayedFrom: {
          who: 'MultiLocationV0',
          message: 'XcmV0'
        }
      }
    },
    XcmErrorV0: {
      _enum: {
        Undefined: 'Null',
        Overflow: 'Null',
        Unimplemented: 'Null',
        UnhandledXcmVersion: 'Null',
        UnhandledXcmMessage: 'Null',
        UnhandledEffect: 'Null',
        EscalationOfPrivilege: 'Null',
        UntrustedReserveLocation: 'Null',
        UntrustedTeleportLocation: 'Null',
        DestinationBufferOverflow: 'Null',
        SendFailed: 'Null',
        CannotReachDestination: '(MultiLocation, Xcm)',
        MultiLocationFull: 'Null',
        FailedToDecode: 'Null',
        BadOrigin: 'Null',
        ExceedsMaxMessageSize: 'Null',
        FailedToTransactAsset: 'Null',
        WeightLimitReached: 'Weight',
        Wildcard: 'Null',
        TooMuchWeightRequired: 'Null',
        NotHoldingFees: 'Null',
        WeightNotComputable: 'Null',
        Barrier: 'Null',
        NotWithdrawable: 'Null',
        LocationCannotHold: 'Null',
        TooExpensive: 'Null',
        AssetNotFound: 'Null',
        RecursionLimitReached: 'Null'
      }
    },
    XcmOrderV0: {
      _enum: {
        Null: 'Null',
        DepositAsset: {
          assets: 'Vec<MultiAssetV0>',
          dest: 'MultiLocationV0'
        },
        DepositReserveAsset: {
          assets: 'Vec<MultiAssetV0>',
          dest: 'MultiLocationV0',
          effects: 'Vec<XcmOrderV0>'
        },
        ExchangeAsset: {
          give: 'Vec<MultiAssetV0>',
          receive: 'Vec<MultiAssetV0>'
        },
        InitiateReserveWithdraw: {
          assets: 'Vec<MultiAssetV0>',
          reserve: 'MultiLocationV0',
          effects: 'Vec<XcmOrderV0>'
        },
        InitiateTeleport: {
          assets: 'Vec<MultiAsset>',
          dest: 'MultiLocationV0',
          effects: 'Vec<XcmOrderV0>'
        },
        QueryHolding: {
          queryId: 'Compact<u64>',
          dest: 'MultiLocationV0',
          assets: 'Vec<MultiAssetV0>'
        },
        BuyExecution: {
          fees: 'MultiAsset',
          weight: 'u64',
          debt: 'u64',
          haltOnError: 'bool',
          xcm: 'Vec<XcmV0>'
        }
      }
    }
  };

  const v1$1 = {
    AssetInstanceV1: {
      _enum: {
        Undefined: 'Null',
        Index: 'Compact<u128>',
        Array4: '[u8; 4]',
        Array8: '[u8; 8]',
        Array16: '[u8; 16]',
        Array32: '[u8; 32]',
        Blob: 'Bytes'
      }
    },
    FungibilityV1: {
      _enum: {
        Fungible: 'Compact<u128>',
        NonFungible: 'AssetInstanceV1'
      }
    },
    JunctionV1: {
      _enum: {
        Parachain: 'Compact<u32>',
        AccountId32: {
          network: 'NetworkId',
          id: 'AccountId'
        },
        AccountIndex64: {
          network: 'NetworkId',
          index: 'Compact<u64>'
        },
        AccountKey20: {
          network: 'NetworkId',
          key: '[u8; 20]'
        },
        PalletInstance: 'u8',
        GeneralIndex: 'Compact<u128>',
        GeneralKey: 'Vec<u8>',
        OnlyChild: 'Null',
        Plurality: {
          id: 'BodyId',
          part: 'BodyPart'
        }
      }
    },
    JunctionsV1: {
      _enum: {
        Here: 'Null',
        X1: 'JunctionV1',
        X2: '(JunctionV1, JunctionV1)',
        X3: '(JunctionV1, JunctionV1, JunctionV1)',
        X4: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
        X5: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
        X6: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
        X7: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
        X8: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)'
      }
    },
    MultiAssetsV1: 'Vec<MultiAssetV1>',
    MultiAssetV1: {
      id: 'XcmAssetId',
      fungibility: 'FungibilityV1'
    },
    MultiAssetFilterV1: {
      _enum: {
        Definite: 'MultiAssetsV1',
        Wild: 'WildMultiAssetV1'
      }
    },
    MultiLocationV1: {
      parents: 'u8',
      interior: 'JunctionsV1'
    },
    OriginKindV1: 'OriginKindV0',
    ResponseV1: {
      _enum: {
        Assets: 'MultiAssetsV1'
      }
    },
    WildFungibilityV1: {
      _enum: ['Fungible', 'NonFungible']
    },
    WildMultiAssetV1: {
      _enum: {
        All: 'Null',
        AllOf: {
          id: 'XcmAssetId',
          fungibility: 'WildFungibilityV1'
        }
      }
    },
    XcmV1: {
      _enum: {
        WithdrawAsset: {
          assets: 'MultiAssetsV1',
          effects: 'Vec<XcmOrderV1>'
        },
        ReserveAssetDeposit: {
          assets: 'MultiAssetsV1',
          effects: 'Vec<XcmOrderV1>'
        },
        ReceiveTeleportedAsset: {
          assets: 'MultiAssetsV1',
          effects: 'Vec<XcmOrderV1>'
        },
        QueryResponse: {
          queryId: 'Compact<u64>',
          response: 'ResponseV1'
        },
        TransferAsset: {
          assets: 'MultiAssetsV1',
          dest: 'MultiLocationV1'
        },
        TransferReserveAsset: {
          assets: 'MultiAssetsV1',
          dest: 'MultiLocationV1',
          effects: 'Vec<XcmOrderV1>'
        },
        Transact: {
          originType: 'XcmOriginKind',
          requireWeightAtMost: 'u64',
          call: 'DoubleEncodedCall'
        },
        HrmpNewChannelOpenRequest: {
          sender: 'Compact<u32>',
          maxMessageSize: 'Compact<u32>',
          maxCapacity: 'Compact<u32>'
        },
        HrmpChannelAccepted: {
          recipient: 'Compact<u32>'
        },
        HrmpChannelClosing: {
          initiator: 'Compact<u32>',
          sender: 'Compact<u32>',
          recipient: 'Compact<u32>'
        },
        RelayedFrom: {
          who: 'MultiLocationV1',
          message: 'XcmV1'
        }
      }
    },
    XcmErrorV1: {
      _enum: {
        Undefined: 'Null',
        Overflow: 'Null',
        Unimplemented: 'Null',
        UnhandledXcmVersion: 'Null',
        UnhandledXcmMessage: 'Null',
        UnhandledEffect: 'Null',
        EscalationOfPrivilege: 'Null',
        UntrustedReserveLocation: 'Null',
        UntrustedTeleportLocation: 'Null',
        DestinationBufferOverflow: 'Null',
        SendFailed: 'Null',
        CannotReachDestination: '(MultiLocationV1, XcmV1)',
        MultiLocationFull: 'Null',
        FailedToDecode: 'Null',
        BadOrigin: 'Null',
        ExceedsMaxMessageSize: 'Null',
        FailedToTransactAsset: 'Null',
        WeightLimitReached: 'Weight',
        Wildcard: 'Null',
        TooMuchWeightRequired: 'Null',
        NotHoldingFees: 'Null',
        WeightNotComputable: 'Null',
        Barrier: 'Null',
        NotWithdrawable: 'Null',
        LocationCannotHold: 'Null',
        TooExpensive: 'Null',
        AssetNotFound: 'Null',
        DestinationUnsupported: 'Null',
        RecursionLimitReached: 'Null'
      }
    },
    XcmOrderV1: {
      _enum: {
        Noop: 'Null',
        DepositAsset: {
          assets: 'MultiAssetFilterV1',
          maxAssets: 'u32',
          beneficiary: 'MultiLocationV1'
        },
        DepositReserveAsset: {
          assets: 'MultiAssetFilterV1',
          maxAssets: 'u32',
          dest: 'MultiLocationV1',
          effects: 'Vec<XcmOrderV1>'
        },
        ExchangeAsset: {
          give: 'MultiAssetFilterV1',
          receive: 'MultiAssetsV1'
        },
        InitiateReserveWithdraw: {
          assets: 'MultiAssetFilterV1',
          reserve: 'MultiLocationV1',
          effects: 'Vec<XcmOrderV1>'
        },
        InitiateTeleport: {
          assets: 'MultiAssetFilterV1',
          dest: 'MultiLocationV1',
          effects: 'Vec<XcmOrderV1>'
        },
        QueryHolding: {
          queryId: 'Compact<u64>',
          dest: 'MultiLocationV1',
          assets: 'MultiAssetFilterV1'
        },
        BuyExecution: {
          fees: 'MultiAssetV1',
          weight: 'u64',
          debt: 'u64',
          haltOnError: 'bool',
          instructions: 'Vec<XcmV1>'
        }
      }
    }
  };

  const v2 = {
    AssetInstanceV2: 'AssetInstanceV1',
    FungibilityV2: 'FungibilityV1',
    JunctionV2: 'JunctionV1',
    JunctionsV2: 'JunctionsV1',
    MultiAssetsV2: 'MultiAssetsV1',
    MultiAssetV2: 'MultiAssetV1',
    MultiAssetFilterV2: 'MultiAssetFilterV1',
    MultiLocationV2: 'MultiLocationV1',
    OriginKindV2: 'OriginKindV1',
    WildFungibilityV2: 'WildFungibilityV1',
    ResponseV2: {
      _enum: {
        Null: 'Null',
        Assets: 'MultiAssetsV2',
        ExecutionResult: 'ResponseV2Result'
      }
    },
    ResponseV2Error: '(u32, XcmErrorV2)',
    ResponseV2Result: 'Result<Null, ResponseV2Error>',
    WeightLimitV2: {
      _enum: {
        Unlimited: 'Null',
        Limited: 'Compact<u64>'
      }
    },
    InstructionV2: {
      _enum: {
        WithdrawAsset: 'MultiAssetsV2',
        ReserveAssetDeposited: 'MultiAssetsV2',
        ReceiveTeleportedAsset: 'MultiAssetsV2',
        QueryResponse: {
          queryId: 'Compact<u64>',
          response: 'ResponseV2',
          maxWeight: 'Compact<u64>'
        },
        TransferAsset: {
          assets: 'MultiAssetsV2',
          beneficiary: 'MultiLocationV2'
        },
        TransferReserveAsset: {
          assets: 'MultiAssetsV2',
          dest: 'MultiLocationV2',
          xcm: 'XcmV2'
        },
        Transact: {
          originType: 'OriginKindV2',
          requireWeightAtMost: 'u64',
          call: 'DoubleEncodedCall'
        },
        HrmpNewChannelOpenRequest: {
          sender: 'Compact<u32>',
          maxMessageSize: 'Compact<u32>',
          maxCapacity: 'Compact<u32>'
        },
        HrmpChannelAccepted: {
          recipient: 'Compact<u32>'
        },
        HrmpChannelClosing: {
          initiator: 'Compact<u32>',
          sender: 'Compact<u32>',
          recipient: 'Compact<u32>'
        },
        ClearOrigin: 'Null',
        DescendOrigin: 'InteriorMultiLocation',
        ReportError: {
          queryId: 'Compact<u64>',
          dest: 'MultiLocationV2',
          maxResponseWeight: 'Compact<u64>'
        },
        DepositAsset: {
          assets: 'MultiAssetFilterV2',
          maxAssets: 'u32',
          beneficiary: 'MultiLocationV2'
        },
        DepositReserveAsset: {
          assets: 'MultiAssetFilterV2',
          maxAssets: 'u32',
          dest: 'MultiLocationV2',
          xcm: 'XcmV2'
        },
        ExchangeAsset: {
          give: 'MultiAssetFilterV2',
          receive: 'MultiAssetsV2'
        },
        InitiateReserveWithdraw: {
          assets: 'MultiAssetFilterV2',
          reserve: 'MultiLocationV2',
          xcm: 'XcmV2'
        },
        InitiateTeleport: {
          assets: 'MultiAssetFilterV2',
          dest: 'MultiLocationV2',
          xcm: 'XcmV2'
        },
        QueryHolding: {
          query_id: 'Compact<u64>',
          dest: 'MultiLocationV2',
          assets: 'MultiAssetFilterV2',
          maxResponse_Weight: 'Compact<u64>'
        },
        BuyExecution: {
          fees: 'MultiAssetV2',
          weightLimit: 'WeightLimitV2'
        },
        RefundSurplus: 'Null',
        SetErrorHandler: 'XcmV2',
        SetAppendix: 'XcmV2',
        ClearError: 'Null',
        ClaimAsset: {
          assets: 'MultiAssetsV2',
          ticket: 'MultiLocationV2'
        },
        Trap: 'u64'
      }
    },
    WildMultiAssetV2: 'WildMultiAssetV1',
    XcmV2: 'Vec<InstructionV2>',
    XcmErrorV2: {
      _enum: {
        Undefined: 'Null',
        Overflow: 'Null',
        Unimplemented: 'Null',
        UnhandledXcmVersion: 'Null',
        UnhandledXcmMessage: 'Null',
        UnhandledEffect: 'Null',
        EscalationOfPrivilege: 'Null',
        UntrustedReserveLocation: 'Null',
        UntrustedTeleportLocation: 'Null',
        DestinationBufferOverflow: 'Null',
        MultiLocationFull: 'Null',
        MultiLocationNotInvertible: 'Null',
        FailedToDecode: 'Null',
        BadOrigin: 'Null',
        ExceedsMaxMessageSize: 'Null',
        FailedToTransactAsset: 'Null',
        WeightLimitReached: 'Weight',
        Wildcard: 'Null',
        TooMuchWeightRequired: 'Null',
        NotHoldingFees: 'Null',
        WeightNotComputable: 'Null',
        Barrier: 'Null',
        NotWithdrawable: 'Null',
        LocationCannotHold: 'Null',
        TooExpensive: 'Null',
        AssetNotFound: 'Null',
        DestinationUnsupported: 'Null',
        RecursionLimitReached: 'Null',
        Transport: 'Null',
        Unroutable: 'Null',
        UnknownWeightRequired: 'Null',
        Trap: 'u64',
        UnknownClaim: 'Null',
        InvalidLocation: 'Null'
      }
    },
    XcmOrderV2: 'XcmOrderV1'
  };

  const XCM_LATEST = 'V2';
  const xcm = {
    XcmOrigin: {
      _enum: {
        Xcm: 'MultiLocation'
      }
    },
    XcmpMessageFormat: {
      _enum: ['ConcatenatedVersionedXcm', 'ConcatenatedEncodedBlob', 'Signals']
    },
    XcmAssetId: {
      _enum: {
        Concrete: 'MultiLocation',
        Abstract: 'Bytes'
      }
    },
    InboundStatus: {
      _enum: ['Ok', 'Suspended']
    },
    OutboundStatus: {
      _enum: ['Ok', 'Suspended']
    },
    MultiAssets: 'Vec<MultiAsset>'
  };
  const location = {
    BodyId: {
      _enum: {
        Unit: 'Null',
        Named: 'Vec<u8>',
        Index: 'Compact<u32>',
        Executive: 'Null',
        Technical: 'Null',
        Legislative: 'Null',
        Judicial: 'Null'
      }
    },
    BodyPart: {
      _enum: {
        Voice: 'Null',
        Members: 'Compact<u32>',
        Fraction: {
          nom: 'Compact<u32>',
          denom: 'Compact<u32>'
        },
        AtLeastProportion: {
          nom: 'Compact<u32>',
          denom: 'Compact<u32>'
        },
        MoreThanProportion: {
          nom: 'Compact<u32>',
          denom: 'Compact<u32>'
        }
      }
    },
    InteriorMultiLocation: 'Junctions',
    NetworkId: {
      _enum: {
        Any: 'Null',
        Named: 'Vec<u8>',
        Polkadot: 'Null',
        Kusama: 'Null'
      }
    }
  };
  const definitions$c = {
    rpc: {},
    types: objectSpread$1({}, location, xcm, v0$1, v1$1, v2, typesKnown.mapXcmTypes(XCM_LATEST), {
      DoubleEncodedCall: {
        encoded: 'Vec<u8>'
      },
      XcmOriginKind: {
        _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
      },
      Outcome: {
        _enum: {
          Complete: 'Weight',
          Incomplete: '(Weight, XcmErrorV0)',
          Error: 'XcmErrorV0'
        }
      },
      QueryId: 'u64',
      QueryStatus: {
        _enum: {
          Pending: {
            responder: 'VersionedMultiLocation',
            maybeNotify: 'Option<(u8, u8)>',
            timeout: 'BlockNumber'
          },
          Ready: {
            response: 'VersionedResponse',
            at: 'BlockNumber'
          }
        }
      },
      QueueConfigData: {
        suspendThreshold: 'u32',
        dropThreshold: 'u32',
        resumeThreshold: 'u32',
        thresholdWeight: 'Weight',
        weightRestrictDecay: 'Weight'
      },
      VersionMigrationStage: {
        _enum: {
          MigrateSupportedVersion: 'Null',
          MigrateVersionNotifiers: 'Null',
          NotifyCurrentTargets: 'Option<Bytes>',
          MigrateAndNotifyOldTargets: 'Null'
        }
      },
      VersionedMultiAsset: {
        _enum: {
          V0: 'MultiAssetV0',
          V1: 'MultiAssetV1',
          V2: 'MultiAssetV2'
        }
      },
      VersionedMultiAssets: {
        _enum: {
          V0: 'Vec<MultiAssetV0>',
          V1: 'MultiAssetsV1',
          V2: 'MultiAssetsV2'
        }
      },
      VersionedMultiLocation: {
        _enum: {
          V0: 'MultiLocationV0',
          V1: 'MultiLocationV1',
          V2: 'MultiLocationV2'
        }
      },
      VersionedResponse: {
        V0: 'ResponseV0',
        V1: 'ResponseV1',
        V2: 'ResponseV2'
      },
      VersionedXcm: {
        _enum: {
          V0: 'XcmV0',
          V1: 'XcmV1',
          V2: 'XcmV2'
        }
      },
      XcmVersion: 'u32'
    })
  };

  const layout = {
    ContractCryptoHasher: {
      _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
    },
    ContractDiscriminant: 'u32',
    ContractLayoutArray: {
      offset: 'ContractLayoutKey',
      len: 'u32',
      cellsPerElem: 'u64',
      layout: 'ContractStorageLayout'
    },
    ContractLayoutCell: {
      key: 'ContractLayoutKey',
      ty: 'SiLookupTypeId'
    },
    ContractLayoutEnum: {
      dispatchKey: 'ContractLayoutKey',
      variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
    },
    ContractLayoutHash: {
      offset: 'ContractLayoutKey',
      strategy: 'ContractLayoutHashingStrategy',
      layout: 'ContractStorageLayout'
    },
    ContractLayoutHashingStrategy: {
      hasher: 'ContractCryptoHasher',
      postfix: 'Vec<u8>',
      prefix: 'Vec<u8>'
    },
    ContractLayoutKey: '[u8; 32]',
    ContractLayoutStruct: {
      fields: 'Vec<ContractLayoutStructField>'
    },
    ContractLayoutStructField: {
      layout: 'ContractStorageLayout',
      name: 'Text'
    },
    ContractStorageLayout: {
      _enum: {
        Cell: 'ContractLayoutCell',
        Hash: 'ContractLayoutHash',
        Array: 'ContractLayoutArray',
        Struct: 'ContractLayoutStruct',
        Enum: 'ContractLayoutEnum'
      }
    }
  };
  const spec = {
    ContractConstructorSpec: {
      name: 'Text',
      selector: 'ContractSelector',
      args: 'Vec<ContractMessageParamSpec>',
      docs: 'Vec<Text>'
    },
    ContractContractSpec: {
      constructors: 'Vec<ContractConstructorSpec>',
      messages: 'Vec<ContractMessageSpec>',
      events: 'Vec<ContractEventSpec>',
      docs: 'Vec<Text>'
    },
    ContractDisplayName: 'SiPath',
    ContractEventParamSpec: {
      name: 'Text',
      indexed: 'bool',
      type: 'ContractTypeSpec',
      docs: 'Vec<Text>'
    },
    ContractEventSpec: {
      name: 'Text',
      args: 'Vec<ContractEventParamSpec>',
      docs: 'Vec<Text>'
    },
    ContractMessageParamSpec: {
      name: 'Text',
      type: 'ContractTypeSpec'
    },
    ContractMessageSpec: {
      name: 'Text',
      selector: 'ContractSelector',
      mutates: 'bool',
      payable: 'bool',
      args: 'Vec<ContractMessageParamSpec>',
      returnType: 'Option<ContractTypeSpec>',
      docs: 'Vec<Text>'
    },
    ContractSelector: '[u8; 4]',
    ContractTypeSpec: {
      type: 'SiLookupTypeId',
      displayName: 'ContractDisplayName'
    }
  };
  const ContractMetadataV0 = {
    types: 'Vec<Si0Type>',
    spec: 'ContractContractSpec'
  };
  const ContractMetadataV1 = {
    types: 'Vec<PortableType>',
    spec: 'ContractContractSpec'
  };
  const ContractProjectInfo = {
    source: 'ContractProjectSource',
    contract: 'ContractProjectContract'
  };
  const definitions$b = {
    rpc: {},
    types: objectSpread$1({}, layout, spec, {
      ContractProjectInfo,
      ContractMetadataV0,
      ContractMetadataV1,
      ContractMetadata: {
        _enum: {
          V0: 'ContractMetadataV0',
          V1: 'ContractMetadataV1'
        }
      },
      ContractMetadataLatest: 'ContractMetadataV1',
      ContractProjectV0: objectSpread$1({
        metadataVersion: 'Text'
      }, ContractProjectInfo, ContractMetadataV0),
      ContractProject: '(ContractProjectInfo, ContractMetadata)',
      ContractProjectContract: {
        _alias: {
          docs: 'documentation'
        },
        name: 'Text',
        version: 'Text',
        authors: 'Vec<Text>',
        description: 'Option<Text>',
        docs: 'Option<Text>',
        repository: 'Option<Text>',
        homepage: 'Option<Text>',
        license: 'Option<Text>'
      },
      ContractProjectSource: {
        _alias: {
          wasmHash: 'hash'
        },
        wasmHash: '[u8; 32]',
        language: 'Text',
        compiler: 'Text',
        wasm: 'Raw'
      }
    })
  };

  const v0 = {
    Si0Field: {
      name: 'Option<Text>',
      type: 'Si0LookupTypeId',
      typeName: 'Option<Text>',
      docs: 'Vec<Text>'
    },
    Si0LookupTypeId: 'u32',
    Si0Path: 'Vec<Text>',
    Si0Type: {
      path: 'Si0Path',
      params: 'Vec<Si0LookupTypeId>',
      def: 'Si0TypeDef'
    },
    Si0TypeDef: {
      _enum: {
        Composite: 'Si0TypeDefComposite',
        Variant: 'Si0TypeDefVariant',
        Sequence: 'Si0TypeDefSequence',
        Array: 'Si0TypeDefArray',
        Tuple: 'Si0TypeDefTuple',
        Primitive: 'Si0TypeDefPrimitive',
        Compact: 'Si0TypeDefCompact',
        Phantom: 'Si0TypeDefPhantom',
        BitSequence: 'Si0TypeDefBitSequence'
      }
    },
    Si0TypeDefArray: {
      len: 'u32',
      type: 'Si0LookupTypeId'
    },
    Si0TypeDefBitSequence: {
      bitStoreType: 'Si0LookupTypeId',
      bitOrderType: 'Si0LookupTypeId'
    },
    Si0TypeDefCompact: {
      type: 'Si0LookupTypeId'
    },
    Si0TypeDefComposite: {
      fields: 'Vec<Si0Field>'
    },
    Si0TypeDefPhantom: 'Null',
    Si0TypeDefVariant: {
      variants: 'Vec<Si0Variant>'
    },
    Si0TypeDefPrimitive: {
      _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
    },
    Si0TypeDefSequence: {
      type: 'Si0LookupTypeId'
    },
    Si0TypeDefTuple: 'Vec<Si0LookupTypeId>',
    Si0TypeParameter: {
      name: 'Text',
      type: 'Option<Si0LookupTypeId>'
    },
    Si0Variant: {
      name: 'Text',
      fields: 'Vec<Si0Field>',
      index: 'Option<u8>',
      discriminant: 'Option<u64>',
      docs: 'Vec<Text>'
    }
  };

  const Si1Variant = {
    name: 'Text',
    fields: 'Vec<Si1Field>',
    index: 'u8',
    docs: 'Vec<Text>'
  };
  const v1 = {
    Si1Field: {
      name: 'Option<Text>',
      type: 'Si1LookupTypeId',
      typeName: 'Option<Text>',
      docs: 'Vec<Text>'
    },
    Si1LookupTypeId: 'Compact<u32>',
    Si1Path: 'Si0Path',
    Si1Type: {
      path: 'Si1Path',
      params: 'Vec<Si1TypeParameter>',
      def: 'Si1TypeDef',
      docs: 'Vec<Text>'
    },
    Si1TypeDef: {
      _enum: {
        Composite: 'Si1TypeDefComposite',
        Variant: 'Si1TypeDefVariant',
        Sequence: 'Si1TypeDefSequence',
        Array: 'Si1TypeDefArray',
        Tuple: 'Si1TypeDefTuple',
        Primitive: 'Si1TypeDefPrimitive',
        Compact: 'Si1TypeDefCompact',
        BitSequence: 'Si1TypeDefBitSequence',
        HistoricMetaCompat: 'Type'
      }
    },
    Si1TypeDefArray: {
      len: 'u32',
      type: 'Si1LookupTypeId'
    },
    Si1TypeDefBitSequence: {
      bitStoreType: 'Si1LookupTypeId',
      bitOrderType: 'Si1LookupTypeId'
    },
    Si1TypeDefCompact: {
      type: 'Si1LookupTypeId'
    },
    Si1TypeDefComposite: {
      fields: 'Vec<Si1Field>'
    },
    Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',
    Si1TypeDefSequence: {
      type: 'Si1LookupTypeId'
    },
    Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',
    Si1TypeParameter: {
      name: 'Text',
      type: 'Option<Si1LookupTypeId>'
    },
    Si1TypeDefVariant: {
      variants: 'Vec<Si1Variant>'
    },
    Si1Variant
  };

  const definitions$a = {
    rpc: {},
    types: objectSpread$1({}, v0, v1, {
      SiField: 'Si1Field',
      SiLookupTypeId: 'Si1LookupTypeId',
      SiPath: 'Si1Path',
      SiType: 'Si1Type',
      SiTypeDef: 'Si1TypeDef',
      SiTypeDefArray: 'Si1TypeDefArray',
      SiTypeDefBitSequence: 'Si1TypeDefBitSequence',
      SiTypeDefCompact: 'Si1TypeDefCompact',
      SiTypeDefComposite: 'Si1TypeDefComposite',
      SiTypeDefPrimitive: 'Si1TypeDefPrimitive',
      SiTypeDefSequence: 'Si1TypeDefSequence',
      SiTypeDefTuple: 'Si1TypeDefTuple',
      SiTypeParameter: 'Si1TypeParameter',
      SiTypeDefVariant: 'Si1TypeDefVariant',
      SiVariant: 'Si1Variant'
    })
  };

  const netRpc = {
    listening: {
      aliasSection: 'net',
      description: 'Returns true if client is actively listening for network connections. Otherwise false.',
      params: [],
      type: 'bool'
    },
    peerCount: {
      aliasSection: 'net',
      description: 'Returns number of peers connected to node.',
      params: [],
      type: 'String'
    },
    version: {
      aliasSection: 'net',
      description: 'Returns protocol version.',
      params: [],
      type: 'String'
    }
  };
  const web3Rpc = {
    clientVersion: {
      aliasSection: 'web3',
      description: 'Returns current client version.',
      params: [],
      type: 'String'
    },
    sha3: {
      aliasSection: 'web3',
      description: 'Returns sha3 of the given data',
      params: [{
        name: 'data',
        type: 'Bytes'
      }],
      type: 'H256'
    }
  };
  const rpc = objectSpread$1({}, netRpc, web3Rpc, {
    accounts: {
      description: 'Returns accounts list.',
      params: [],
      type: 'Vec<H160>'
    },
    blockNumber: {
      description: 'Returns the blockNumber',
      params: [],
      type: 'U256'
    },
    call: {
      description: 'Call contract, returning the output data.',
      params: [{
        name: 'request',
        type: 'EthCallRequest'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'Bytes'
    },
    chainId: {
      description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
      params: [],
      type: 'U64'
    },
    coinbase: {
      description: 'Returns block author.',
      params: [],
      type: 'H160'
    },
    estimateGas: {
      description: 'Estimate gas needed for execution of given contract.',
      params: [{
        name: 'request',
        type: 'EthCallRequest'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    gasPrice: {
      description: 'Returns current gas price.',
      params: [],
      type: 'U256'
    },
    getBalance: {
      description: 'Returns balance of the given account.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getBlockByHash: {
      description: 'Returns block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'full',
        type: 'bool'
      }],
      type: 'Option<EthRichBlock>'
    },
    getBlockByNumber: {
      description: 'Returns block with given number.',
      params: [{
        name: 'block',
        type: 'BlockNumber'
      }, {
        name: 'full',
        type: 'bool'
      }],
      type: 'Option<EthRichBlock>'
    },
    getBlockTransactionCountByHash: {
      description: 'Returns the number of transactions in a block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'U256'
    },
    getBlockTransactionCountByNumber: {
      description: 'Returns the number of transactions in a block with given block number.',
      params: [{
        name: 'block',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getCode: {
      description: 'Returns the code at given address at given time (block number).',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'Bytes'
    },
    getFilterChanges: {
      description: 'Returns filter changes since last poll.',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'EthFilterChanges'
    },
    getFilterLogs: {
      description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'Vec<EthLog>'
    },
    getLogs: {
      description: 'Returns logs matching given filter object.',
      params: [{
        name: 'filter',
        type: 'EthFilter'
      }],
      type: 'Vec<EthLog>'
    },
    getProof: {
      description: 'Returns proof for account and storage.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        name: 'storageKeys',
        type: 'Vec<H256>'
      }, {
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'EthAccount'
    },
    getStorageAt: {
      description: 'Returns content of the storage at given address.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        name: 'index',
        type: 'U256'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'H256'
    },
    getTransactionByBlockHashAndIndex: {
      description: 'Returns transaction at given block hash and index.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthTransaction'
    },
    getTransactionByBlockNumberAndIndex: {
      description: 'Returns transaction by given block number and index.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthTransaction'
    },
    getTransactionByHash: {
      description: 'Get transaction by its hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'EthTransaction'
    },
    getTransactionCount: {
      description: 'Returns the number of transactions sent from given address at given time (block number).',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getTransactionReceipt: {
      description: 'Returns transaction receipt by transaction hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'EthReceipt'
    },
    getUncleByBlockHashAndIndex: {
      description: 'Returns an uncles at given block and index.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthRichBlock'
    },
    getUncleByBlockNumberAndIndex: {
      description: 'Returns an uncles at given block and index.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthRichBlock'
    },
    getUncleCountByBlockHash: {
      description: 'Returns the number of uncles in a block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'U256'
    },
    getUncleCountByBlockNumber: {
      description: 'Returns the number of uncles in a block with given block number.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getWork: {
      description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
      params: [],
      type: 'EthWork'
    },
    hashrate: {
      description: 'Returns the number of hashes per second that the node is mining with.',
      params: [],
      type: 'U256'
    },
    mining: {
      description: 'Returns true if client is actively mining new blocks.',
      params: [],
      type: 'bool'
    },
    newBlockFilter: {
      description: 'Returns id of new block filter.',
      params: [],
      type: 'U256'
    },
    newFilter: {
      description: 'Returns id of new filter.',
      params: [{
        name: 'filter',
        type: 'EthFilter'
      }],
      type: 'U256'
    },
    newPendingTransactionFilter: {
      description: 'Returns id of new block filter.',
      params: [],
      type: 'U256'
    },
    protocolVersion: {
      description: 'Returns protocol version encoded as a string (quotes are necessary).',
      params: [],
      type: 'u64'
    },
    sendRawTransaction: {
      description: 'Sends signed transaction, returning its hash.',
      params: [{
        name: 'bytes',
        type: 'Bytes'
      }],
      type: 'H256'
    },
    sendTransaction: {
      description: 'Sends transaction; will block waiting for signer to return the transaction hash',
      params: [{
        name: 'tx',
        type: 'EthTransactionRequest'
      }],
      type: 'H256'
    },
    submitHashrate: {
      description: 'Used for submitting mining hashrate.',
      params: [{
        name: 'index',
        type: 'U256'
      }, {
        name: 'hash',
        type: 'H256'
      }],
      type: 'bool'
    },
    submitWork: {
      description: 'Used for submitting a proof-of-work solution.',
      params: [{
        name: 'nonce',
        type: 'H64'
      }, {
        name: 'headerHash',
        type: 'H256'
      }, {
        name: 'mixDigest',
        type: 'H256'
      }],
      type: 'bool'
    },
    subscribe: {
      description: 'Subscribe to Eth subscription.',
      params: [{
        name: 'kind',
        type: 'EthSubKind'
      }, {
        isOptional: true,
        name: 'params',
        type: 'EthSubParams'
      }],
      pubsub: ['subscription', 'subscribe', 'unsubscribe'],
      type: 'Null'
    },
    syncing: {
      description: 'Returns an object with data about the sync status or false.',
      params: [],
      type: 'EthSyncStatus'
    },
    uninstallFilter: {
      description: 'Uninstalls filter.',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'bool'
    }
  });

  const V0 = {
    BlockV0: {
      header: 'EthHeader',
      transactions: 'Vec<TransactionV0>',
      ommers: 'Vec<EthHeader>'
    },
    LegacyTransaction: {
      nonce: 'U256',
      gasPrice: 'U256',
      gasLimit: 'U256',
      action: 'EthTransactionAction',
      value: 'U256',
      input: 'Bytes',
      signature: 'EthTransactionSignature'
    },
    TransactionV0: 'LegacyTransaction'
  };
  const V1 = {
    BlockV1: {
      header: 'EthHeader',
      transactions: 'Vec<TransactionV1>',
      ommers: 'Vec<EthHeader>'
    },
    EIP2930Transaction: {
      chainId: 'u64',
      nonce: 'U256',
      gasPrice: 'U256',
      gasLimit: 'U256',
      action: 'EthTransactionAction',
      value: 'U256',
      input: 'Bytes',
      accessList: 'EthAccessList',
      oddYParity: 'bool',
      r: 'H256',
      s: 'H256'
    },
    TransactionV1: {
      _enum: {
        Legacy: 'LegacyTransaction',
        EIP2930: 'EIP2930Transaction'
      }
    }
  };
  const V2 = {
    BlockV2: {
      header: 'EthHeader',
      transactions: 'Vec<TransactionV2>',
      ommers: 'Vec<EthHeader>'
    },
    EIP1559Transaction: {
      chainId: 'u64',
      nonce: 'U256',
      maxPriorityFeePerGas: 'U256',
      maxFeePerGas: 'U256',
      gasLimit: 'U256',
      action: 'EthTransactionAction',
      value: 'U256',
      input: 'Bytes',
      accessList: 'EthAccessList',
      oddYParity: 'bool',
      r: 'H256',
      s: 'H256'
    },
    TransactionV2: {
      _enum: {
        Legacy: 'LegacyTransaction',
        EIP2930: 'EIP2930Transaction',
        EIP1559: 'EIP1559Transaction'
      }
    }
  };
  const types = objectSpread$1({}, V0, V1, V2, {
    EthereumAccountId: 'GenericEthereumAccountId',
    EthereumAddress: 'GenericEthereumAccountId',
    EthereumLookupSource: 'GenericEthereumLookupSource',
    EthereumSignature: '[u8; 65]',
    EthAccessListItem: {
      address: 'EthAddress',
      slots: 'Vec<H256>'
    },
    EthAccessList: 'Vec<EthAccessListItem>',
    EthAccount: {
      address: 'EthAddress',
      balance: 'U256',
      nonce: 'U256',
      codeHash: 'H256',
      storageHash: 'H256',
      accountProof: 'Vec<Bytes>',
      storageProof: 'Vec<EthStorageProof>'
    },
    EthAddress: 'H160',
    EthBlock: {
      header: 'EthHeader',
      transactions: 'Vec<EthTransaction>',
      ommers: 'Vec<EthHeader>'
    },
    EthHeader: {
      parentHash: 'H256',
      ommersHash: 'H256',
      beneficiary: 'EthAddress',
      stateRoot: 'H256',
      transactionsRoot: 'H256',
      receiptsRoot: 'H256',
      logsBloom: 'EthBloom',
      difficulty: 'U256',
      number: 'U256',
      gasLimit: 'U256',
      gasUsed: 'U256',
      timestamp: 'u64',
      extraData: 'Bytes',
      mixMash: 'H256',
      nonce: 'H64'
    },
    EthRichBlock: {
      _alias: {
        blockHash: 'hash',
        blockSize: 'size'
      },
      blockHash: 'Option<H256>',
      parentHash: 'H256',
      sha3Uncles: 'H256',
      author: 'EthAddress',
      miner: 'EthAddress',
      stateRoot: 'H256',
      transactionsRoot: 'H256',
      receiptsRoot: 'H256',
      number: 'Option<U256>',
      gasUsed: 'U256',
      gasLimit: 'U256',
      extraData: 'Bytes',
      logsBloom: 'EthBloom',
      timestamp: 'U256',
      difficulty: 'U256',
      totalDifficulty: 'Option<U256>',
      sealFields: 'Vec<Bytes>',
      uncles: 'Vec<H256>',
      transactions: 'Vec<EthTransaction>',
      blockSize: 'Option<U256>'
    },
    EthBloom: 'H2048',
    EthCallRequest: {
      from: 'Option<EthAddress>',
      to: 'Option<EthAddress>',
      gasPrice: 'Option<U256>',
      gas: 'Option<U256>',
      value: 'Option<U256>',
      data: 'Option<Bytes>',
      nonce: 'Option<U256>'
    },
    EthFilter: {
      fromBlock: 'Option<BlockNumber>',
      toBlock: 'Option<BlockNumber>',
      blockHash: 'Option<H256>',
      address: 'Option<EthFilterAddress>',
      topics: 'Option<EthFilterTopic>'
    },
    EthFilterAddress: {
      _enum: {
        Single: 'EthAddress',
        Multiple: 'Vec<EthAddress>',
        Null: 'Null'
      }
    },
    EthFilterChanges: {
      _enum: {
        Logs: 'Vec<EthLog>',
        Hashes: 'Vec<H256>',
        Empty: 'Null'
      }
    },
    EthFilterTopic: {
      _enum: {
        Single: 'EthFilterTopicInner',
        Multiple: 'Vec<EthFilterTopicInner>',
        Null: 'Null'
      }
    },
    EthFilterTopicEntry: 'Option<H256>',
    EthFilterTopicInner: {
      _enum: {
        Single: 'EthFilterTopicEntry',
        Multiple: 'Vec<EthFilterTopicEntry>',
        Null: 'Null'
      }
    },
    EthRichHeader: {
      _alias: {
        blockHash: 'hash',
        blockSize: 'size'
      },
      blockHash: 'Option<H256>',
      parentHash: 'H256',
      sha3Uncles: 'H256',
      author: 'EthAddress',
      miner: 'EthAddress',
      stateRoot: 'H256',
      transactionsRoot: 'H256',
      receiptsRoot: 'H256',
      number: 'Option<U256>',
      gasUsed: 'U256',
      gasLimit: 'U256',
      extraData: 'Bytes',
      logsBloom: 'EthBloom',
      timestamp: 'U256',
      difficulty: 'U256',
      sealFields: 'Vec<Bytes>',
      blockSize: 'Option<U256>'
    },
    EthLog: {
      address: 'EthAddress',
      topics: 'Vec<H256>',
      data: 'Bytes',
      blockHash: 'Option<H256>',
      blockNumber: 'Option<U256>',
      transactionHash: 'Option<H256>',
      transactionIndex: 'Option<U256>',
      logIndex: 'Option<U256>',
      transactionLogIndex: 'Option<U256>',
      removed: 'bool'
    },
    EthReceipt: {
      transactionHash: 'Option<H256>',
      transactionIndex: 'Option<U256>',
      blockHash: 'Option<H256>',
      from: 'Option<EthAddress>',
      to: 'Option<EthAddress>',
      blockNumber: 'Option<U256>',
      cumulativeGasUsed: 'U256',
      gasUsed: 'Option<U256>',
      contractAddress: 'Option<EthAddress>',
      logs: 'Vec<EthLog>',
      root: 'Option<H256>',
      logsBloom: 'EthBloom',
      statusCode: 'Option<U64>'
    },
    EthStorageProof: {
      key: 'U256',
      value: 'U256',
      proof: 'Vec<Bytes>'
    },
    EthSubKind: {
      _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
    },
    EthSubParams: {
      _enum: {
        None: 'Null',
        Logs: 'EthFilter'
      }
    },
    EthSubResult: {
      _enum: {
        Header: 'EthRichHeader',
        Log: 'EthLog',
        TransactionHash: 'H256',
        SyncState: 'EthSyncStatus'
      }
    },
    EthSyncInfo: {
      startingBlock: 'U256',
      currentBlock: 'U256',
      highestBlock: 'U256',
      warpChunksAmount: 'Option<U256>',
      warpChunksProcessed: 'Option<U256>'
    },
    EthSyncStatus: {
      _enum: {
        Info: 'EthSyncInfo',
        None: 'Null'
      }
    },
    EthTransaction: 'LegacyTransaction',
    EthTransactionSignature: {
      v: 'u64',
      r: 'H256',
      s: 'H256'
    },
    EthTransactionAction: {
      _enum: {
        Call: 'H160',
        Create: 'Null'
      }
    },
    EthTransactionCondition: {
      _enum: {
        block: 'u64',
        time: 'u64'
      }
    },
    EthTransactionRequest: {
      from: 'Option<EthAddress>',
      to: 'Option<EthAddress>',
      gasPrice: 'Option<U256>',
      gas: 'Option<U256>',
      value: 'Option<U256>',
      data: 'Option<Bytes>',
      nonce: 'Option<U256>'
    },
    EthTransactionStatus: {
      transactionHash: 'H256',
      transactionIndex: 'u32',
      from: 'EthAddress',
      to: 'Option<EthAddress>',
      contractAddress: 'Option<EthAddress>',
      logs: 'Vec<EthLog>',
      logsBloom: 'EthBloom'
    },
    EthWork: {
      powHash: 'H256',
      seedHash: 'H256',
      target: 'H256',
      number: 'Option<u64>'
    }
  });
  const definitions$9 = {
    rpc,
    types
  };

  const AllHashers = {
    Blake2_128: null,
    Blake2_256: null,
    Blake2_128Concat: null,
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    Identity: null
  };

  const v9 = {
    ErrorMetadataV9: {
      name: 'Text',
      docs: 'Vec<Text>'
    },
    EventMetadataV9: {
      name: 'Text',
      args: 'Vec<Type>',
      docs: 'Vec<Text>'
    },
    FunctionArgumentMetadataV9: {
      name: 'Text',
      type: 'Type'
    },
    FunctionMetadataV9: {
      name: 'Text',
      args: 'Vec<FunctionArgumentMetadataV9>',
      docs: 'Vec<Text>'
    },
    MetadataV9: {
      modules: 'Vec<ModuleMetadataV9>'
    },
    ModuleConstantMetadataV9: {
      name: 'Text',
      type: 'Type',
      value: 'Bytes',
      docs: 'Vec<Text>'
    },
    ModuleMetadataV9: {
      name: 'Text',
      storage: 'Option<StorageMetadataV9>',
      calls: 'Option<Vec<FunctionMetadataV9>>',
      events: 'Option<Vec<EventMetadataV9>>',
      constants: 'Vec<ModuleConstantMetadataV9>',
      errors: 'Vec<ErrorMetadataV9>'
    },
    StorageEntryMetadataV9: {
      name: 'Text',
      modifier: 'StorageEntryModifierV9',
      type: 'StorageEntryTypeV9',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryModifierV9: {
      _enum: ['Optional', 'Default', 'Required']
    },
    StorageEntryTypeV9: {
      _enum: {
        Plain: 'Type',
        Map: {
          hasher: 'StorageHasherV9',
          key: 'Type',
          value: 'Type',
          linked: 'bool'
        },
        DoubleMap: {
          hasher: 'StorageHasherV9',
          key1: 'Type',
          key2: 'Type',
          value: 'Type',
          key2Hasher: 'StorageHasherV9'
        }
      }
    },
    StorageHasherV9: {
      _enum: {
        Blake2_128: null,
        Blake2_256: null,
        Twox128: null,
        Twox256: null,
        Twox64Concat: null
      }
    },
    StorageMetadataV9: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV9>'
    }
  };

  const v10 = {
    ErrorMetadataV10: 'ErrorMetadataV9',
    EventMetadataV10: 'EventMetadataV9',
    FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
    FunctionMetadataV10: 'FunctionMetadataV9',
    MetadataV10: {
      modules: 'Vec<ModuleMetadataV10>'
    },
    ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
    ModuleMetadataV10: {
      name: 'Text',
      storage: 'Option<StorageMetadataV10>',
      calls: 'Option<Vec<FunctionMetadataV10>>',
      events: 'Option<Vec<EventMetadataV10>>',
      constants: 'Vec<ModuleConstantMetadataV10>',
      errors: 'Vec<ErrorMetadataV10>'
    },
    StorageEntryModifierV10: 'StorageEntryModifierV9',
    StorageEntryMetadataV10: {
      name: 'Text',
      modifier: 'StorageEntryModifierV10',
      type: 'StorageEntryTypeV10',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryTypeV10: {
      _enum: {
        Plain: 'Type',
        Map: {
          hasher: 'StorageHasherV10',
          key: 'Type',
          value: 'Type',
          linked: 'bool'
        },
        DoubleMap: {
          hasher: 'StorageHasherV10',
          key1: 'Type',
          key2: 'Type',
          value: 'Type',
          key2Hasher: 'StorageHasherV10'
        }
      }
    },
    StorageMetadataV10: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV10>'
    },
    StorageHasherV10: {
      _enum: {
        Blake2_128: null,
        Blake2_256: null,
        Blake2_128Concat: null,
        Twox128: null,
        Twox256: null,
        Twox64Concat: null
      }
    }
  };

  const v11 = {
    ErrorMetadataV11: 'ErrorMetadataV10',
    EventMetadataV11: 'EventMetadataV10',
    ExtrinsicMetadataV11: {
      version: 'u8',
      signedExtensions: 'Vec<Text>'
    },
    FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
    FunctionMetadataV11: 'FunctionMetadataV10',
    MetadataV11: {
      modules: 'Vec<ModuleMetadataV11>',
      extrinsic: 'ExtrinsicMetadataV11'
    },
    ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
    ModuleMetadataV11: {
      name: 'Text',
      storage: 'Option<StorageMetadataV11>',
      calls: 'Option<Vec<FunctionMetadataV11>>',
      events: 'Option<Vec<EventMetadataV11>>',
      constants: 'Vec<ModuleConstantMetadataV11>',
      errors: 'Vec<ErrorMetadataV11>'
    },
    StorageEntryModifierV11: 'StorageEntryModifierV10',
    StorageEntryMetadataV11: {
      name: 'Text',
      modifier: 'StorageEntryModifierV11',
      type: 'StorageEntryTypeV11',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryTypeV11: {
      _enum: {
        Plain: 'Type',
        Map: {
          hasher: 'StorageHasherV11',
          key: 'Type',
          value: 'Type',
          linked: 'bool'
        },
        DoubleMap: {
          hasher: 'StorageHasherV11',
          key1: 'Type',
          key2: 'Type',
          value: 'Type',
          key2Hasher: 'StorageHasherV11'
        }
      }
    },
    StorageMetadataV11: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV11>'
    },
    StorageHasherV11: {
      _enum: AllHashers
    }
  };

  const v12 = {
    ErrorMetadataV12: 'ErrorMetadataV11',
    EventMetadataV12: 'EventMetadataV11',
    ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
    FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
    FunctionMetadataV12: 'FunctionMetadataV11',
    MetadataV12: {
      modules: 'Vec<ModuleMetadataV12>',
      extrinsic: 'ExtrinsicMetadataV12'
    },
    ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
    ModuleMetadataV12: {
      name: 'Text',
      storage: 'Option<StorageMetadataV12>',
      calls: 'Option<Vec<FunctionMetadataV12>>',
      events: 'Option<Vec<EventMetadataV12>>',
      constants: 'Vec<ModuleConstantMetadataV12>',
      errors: 'Vec<ErrorMetadataV12>',
      index: 'u8'
    },
    StorageEntryModifierV12: 'StorageEntryModifierV11',
    StorageEntryMetadataV12: 'StorageEntryMetadataV11',
    StorageEntryTypeV12: 'StorageEntryTypeV11',
    StorageMetadataV12: 'StorageMetadataV11',
    StorageHasherV12: 'StorageHasherV11'
  };

  const v13 = {
    ErrorMetadataV13: 'ErrorMetadataV12',
    EventMetadataV13: 'EventMetadataV12',
    ExtrinsicMetadataV13: 'ExtrinsicMetadataV12',
    FunctionArgumentMetadataV13: 'FunctionArgumentMetadataV12',
    FunctionMetadataV13: 'FunctionMetadataV12',
    MetadataV13: {
      modules: 'Vec<ModuleMetadataV13>',
      extrinsic: 'ExtrinsicMetadataV13'
    },
    ModuleConstantMetadataV13: 'ModuleConstantMetadataV12',
    ModuleMetadataV13: {
      name: 'Text',
      storage: 'Option<StorageMetadataV13>',
      calls: 'Option<Vec<FunctionMetadataV13>>',
      events: 'Option<Vec<EventMetadataV13>>',
      constants: 'Vec<ModuleConstantMetadataV13>',
      errors: 'Vec<ErrorMetadataV13>',
      index: 'u8'
    },
    StorageEntryModifierV13: 'StorageEntryModifierV12',
    StorageEntryMetadataV13: {
      name: 'Text',
      modifier: 'StorageEntryModifierV13',
      type: 'StorageEntryTypeV13',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryTypeV13: {
      _enum: {
        Plain: 'Type',
        Map: {
          hasher: 'StorageHasherV13',
          key: 'Type',
          value: 'Type',
          linked: 'bool'
        },
        DoubleMap: {
          hasher: 'StorageHasherV13',
          key1: 'Type',
          key2: 'Type',
          value: 'Type',
          key2Hasher: 'StorageHasherV13'
        },
        NMap: {
          keyVec: 'Vec<Type>',
          hashers: 'Vec<StorageHasherV13>',
          value: 'Type'
        }
      }
    },
    StorageMetadataV13: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV13>'
    },
    StorageHasherV13: 'StorageHasherV12'
  };

  const v14 = {
    PortableTypeV14: {
      id: 'Si1LookupTypeId',
      type: 'Si1Type'
    },
    ErrorMetadataV14: objectSpread$1({}, Si1Variant, {
      args: 'Vec<Type>'
    }),
    EventMetadataV14: objectSpread$1({}, Si1Variant, {
      args: 'Vec<Type>'
    }),
    FunctionArgumentMetadataV14: {
      name: 'Text',
      type: 'Type',
      typeName: 'Option<Type>'
    },
    FunctionMetadataV14: objectSpread$1({}, Si1Variant, {
      args: 'Vec<FunctionArgumentMetadataV14>'
    }),
    ExtrinsicMetadataV14: {
      type: 'SiLookupTypeId',
      version: 'u8',
      signedExtensions: 'Vec<SignedExtensionMetadataV14>'
    },
    MetadataV14: {
      lookup: 'PortableRegistry',
      pallets: 'Vec<PalletMetadataV14>',
      extrinsic: 'ExtrinsicMetadataV14',
      type: 'SiLookupTypeId'
    },
    PalletCallMetadataV14: {
      type: 'SiLookupTypeId'
    },
    PalletConstantMetadataV14: {
      name: 'Text',
      type: 'SiLookupTypeId',
      value: 'Bytes',
      docs: 'Vec<Text>'
    },
    PalletErrorMetadataV14: {
      type: 'SiLookupTypeId'
    },
    PalletEventMetadataV14: {
      type: 'SiLookupTypeId'
    },
    PalletMetadataV14: {
      name: 'Text',
      storage: 'Option<PalletStorageMetadataV14>',
      calls: 'Option<PalletCallMetadataV14>',
      events: 'Option<PalletEventMetadataV14>',
      constants: 'Vec<PalletConstantMetadataV14>',
      errors: 'Option<PalletErrorMetadataV14>',
      index: 'u8'
    },
    PalletStorageMetadataV14: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV14>'
    },
    SignedExtensionMetadataV14: {
      identifier: 'Text',
      type: 'SiLookupTypeId',
      additionalSigned: 'SiLookupTypeId'
    },
    StorageEntryMetadataV14: {
      name: 'Text',
      modifier: 'StorageEntryModifierV14',
      type: 'StorageEntryTypeV14',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryModifierV14: 'StorageEntryModifierV13',
    StorageEntryTypeV14: {
      _enum: {
        Plain: 'SiLookupTypeId',
        Map: {
          hashers: 'Vec<StorageHasherV14>',
          key: 'SiLookupTypeId',
          value: 'SiLookupTypeId'
        }
      }
    },
    StorageHasherV14: 'StorageHasherV13'
  };

  const definitions$8 = {
    rpc: {},
    types: objectSpread$1({}, v9, v10, v11, v12, v13, v14, {
      ErrorMetadataLatest: 'ErrorMetadataV14',
      EventMetadataLatest: 'EventMetadataV14',
      ExtrinsicMetadataLatest: 'ExtrinsicMetadataV14',
      FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV14',
      FunctionMetadataLatest: 'FunctionMetadataV14',
      MetadataLatest: 'MetadataV14',
      PalletCallMetadataLatest: 'PalletCallMetadataV14',
      PalletConstantMetadataLatest: 'PalletConstantMetadataV14',
      PalletErrorMetadataLatest: 'PalletErrorMetadataV14',
      PalletEventMetadataLatest: 'PalletEventMetadataV14',
      PalletMetadataLatest: 'PalletMetadataV14',
      PalletStorageMetadataLatest: 'PalletStorageMetadataV14',
      PortableType: 'PortableTypeV14',
      SignedExtensionMetadataLatest: 'SignedExtensionMetadataV14',
      StorageEntryMetadataLatest: 'StorageEntryMetadataV14',
      StorageEntryModifierLatest: 'StorageEntryModifierV14',
      StorageEntryTypeLatest: 'StorageEntryTypeV14',
      StorageHasher: 'StorageHasherV14',
      MetadataAll: {
        _enum: {
          V0: 'DoNotConstruct<MetadataV0>',
          V1: 'DoNotConstruct<MetadataV1>',
          V2: 'DoNotConstruct<MetadataV2>',
          V3: 'DoNotConstruct<MetadataV3>',
          V4: 'DoNotConstruct<MetadataV4>',
          V5: 'DoNotConstruct<MetadataV5>',
          V6: 'DoNotConstruct<MetadataV6>',
          V7: 'DoNotConstruct<MetadataV7>',
          V8: 'DoNotConstruct<MetadataV8>',
          V9: 'MetadataV9',
          V10: 'MetadataV10',
          V11: 'MetadataV11',
          V12: 'MetadataV12',
          V13: 'MetadataV13',
          V14: 'MetadataV14'
        }
      }
    })
  };

  const definitions$7 = {
    rpc: {
      methods: {
        description: 'Retrieves the list of RPC methods that are exposed by the node',
        params: [],
        type: 'RpcMethods'
      }
    },
    types: {
      RpcMethods: {
        version: 'u32',
        methods: 'Vec<Text>'
      }
    }
  };

  const definitions$6 = {
    rpc: {
      hasKey: {
        description: 'Returns true if the keystore has private keys for the given public key and key type.',
        params: [{
          name: 'publicKey',
          type: 'Bytes'
        }, {
          name: 'keyType',
          type: 'Text'
        }],
        type: 'bool'
      },
      hasSessionKeys: {
        description: 'Returns true if the keystore has private keys for the given session public keys.',
        params: [{
          name: 'sessionKeys',
          type: 'Bytes'
        }],
        type: 'bool'
      },
      removeExtrinsic: {
        description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
        params: [{
          name: 'bytesOrHash',
          type: 'Vec<ExtrinsicOrHash>'
        }],
        type: 'Vec<Hash>'
      },
      insertKey: {
        description: 'Insert a key into the keystore.',
        params: [{
          name: 'keyType',
          type: 'Text'
        }, {
          name: 'suri',
          type: 'Text'
        }, {
          name: 'publicKey',
          type: 'Bytes'
        }],
        type: 'Bytes'
      },
      rotateKeys: {
        description: 'Generate new session keys and returns the corresponding public keys',
        params: [],
        type: 'Bytes'
      },
      pendingExtrinsics: {
        description: 'Returns all pending extrinsics, potentially grouped by sender',
        params: [],
        type: 'Vec<Extrinsic>'
      },
      submitExtrinsic: {
        isSigned: true,
        description: 'Submit a fully formatted extrinsic for block inclusion',
        params: [{
          name: 'extrinsic',
          type: 'Extrinsic'
        }],
        type: 'Hash'
      },
      submitAndWatchExtrinsic: {
        description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
        isSigned: true,
        params: [{
          name: 'extrinsic',
          type: 'Extrinsic'
        }],
        pubsub: ['extrinsicUpdate', 'submitAndWatchExtrinsic', 'unwatchExtrinsic'],
        type: 'ExtrinsicStatus'
      }
    },
    types: {
      ExtrinsicOrHash: {
        _enum: {
          Hash: 'Hash',
          Extrinsic: 'Bytes'
        }
      },
      ExtrinsicStatus: {
        _enum: {
          Future: 'Null',
          Ready: 'Null',
          Broadcast: 'Vec<Text>',
          InBlock: 'Hash',
          Retracted: 'Hash',
          FinalityTimeout: 'Hash',
          Finalized: 'Hash',
          Usurped: 'Hash',
          Dropped: 'Null',
          Invalid: 'Null'
        }
      }
    }
  };

  const definitions$5 = {
    rpc: {
      getHeader: {
        alias: ['chain_getHead'],
        description: 'Retrieves the header for a specific block',
        params: [{
          name: 'hash',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Header'
      },
      getBlock: {
        description: 'Get header and body of a relay chain block',
        params: [{
          name: 'hash',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'SignedBlock'
      },
      getBlockHash: {
        description: 'Get the block hash for a specific block',
        params: [{
          name: 'blockNumber',
          type: 'BlockNumber',
          isOptional: true
        }],
        type: 'BlockHash'
      },
      getFinalizedHead: {
        alias: ['chain_getFinalisedHead'],
        description: 'Get hash of the last finalized block in the canon chain',
        params: [],
        type: 'BlockHash'
      },
      subscribeNewHeads: {
        alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
        description: 'Retrieves the best header via subscription',
        params: [],
        pubsub: ['newHead', 'subscribeNewHead', 'unsubscribeNewHead'],
        type: 'Header'
      },
      subscribeFinalizedHeads: {
        alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
        description: 'Retrieves the best finalized header via subscription',
        params: [],
        pubsub: ['finalizedHead', 'subscribeFinalizedHeads', 'unsubscribeFinalizedHeads'],
        type: 'Header'
      },
      subscribeAllHeads: {
        description: 'Retrieves the newest header via subscription',
        params: [],
        pubsub: ['allHead', 'subscribeAllHeads', 'unsubscribeAllHeads'],
        type: 'Header'
      }
    },
    types: {
      BlockHash: 'Hash'
    }
  };

  const definitions$4 = {
    rpc: {
      getKeys: {
        description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'prefix',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getKeysPaged: {
        alias: ['childstate_getKeysPagedAt'],
        description: 'Returns the keys with prefix from a child storage with pagination support',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'prefix',
          type: 'StorageKey'
        }, {
          name: 'count',
          type: 'u32'
        }, {
          name: 'startKey',
          type: 'StorageKey',
          isOptional: true
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getStorage: {
        description: 'Returns a child storage entry at a specific block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<StorageData>'
      },
      getStorageEntries: {
        description: 'Returns child storage entries for multiple keys at a specific block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<Option<StorageData>>'
      },
      getStorageHash: {
        description: 'Returns the hash of a child storage entry at a block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<Hash>'
      },
      getStorageSize: {
        description: 'Returns the size of a child storage entry at a block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<u64>'
      }
    },
    types: {
      PrefixedStorageKey: 'StorageKey'
    }
  };

  const definitions$3 = {
    rpc: {
      localStorageSet: {
        description: 'Set offchain local storage under given key and prefix',
        params: [{
          name: 'kind',
          type: 'StorageKind'
        }, {
          name: 'key',
          type: 'Bytes'
        }, {
          name: 'value',
          type: 'Bytes'
        }],
        type: 'Null'
      },
      localStorageGet: {
        description: 'Get offchain local storage under given key and prefix',
        params: [{
          name: 'kind',
          type: 'StorageKind'
        }, {
          name: 'key',
          type: 'Bytes'
        }],
        type: 'Option<Bytes>'
      }
    },
    types: {
      StorageKind: {
        _enum: {
          PERSISTENT: 1,
          LOCAL: 2
        }
      }
    }
  };

  const QUERY_PARAMS = [{
    name: 'extrinsic',
    type: 'Bytes'
  }, {
    name: 'at',
    type: 'BlockHash',
    isHistoric: true,
    isOptional: true
  }];
  const definitions$2 = {
    rpc: {
      queryInfo: {
        description: 'Retrieves the fee information for an encoded extrinsic',
        params: QUERY_PARAMS,
        type: 'RuntimeDispatchInfo'
      },
      queryFeeDetails: {
        description: 'Query the detailed fee of a given encoded extrinsic',
        params: QUERY_PARAMS,
        type: 'FeeDetails'
      }
    },
    types: {
      FeeDetails: {
        inclusionFee: 'Option<InclusionFee>'
      },
      InclusionFee: {
        baseFee: 'Balance',
        lenFee: 'Balance',
        adjustedWeightFee: 'Balance'
      },
      RuntimeDispatchInfo: {
        weight: 'Weight',
        class: 'DispatchClass',
        partialFee: 'Balance'
      }
    }
  };

  const definitions$1 = {
    rpc: {
      call: {
        alias: ['state_callAt'],
        description: 'Perform a call to a builtin on the chain',
        params: [{
          name: 'method',
          type: 'Text'
        }, {
          name: 'data',
          type: 'Bytes'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Bytes'
      },
      getKeys: {
        description: 'Retrieves the keys with a certain prefix',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getPairs: {
        description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
        params: [{
          name: 'prefix',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<KeyValue>'
      },
      getKeysPaged: {
        alias: ['state_getKeysPagedAt'],
        description: 'Returns the keys with prefix with pagination support.',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'count',
          type: 'u32'
        }, {
          name: 'startKey',
          type: 'StorageKey',
          isOptional: true
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getStorage: {
        alias: ['state_getStorageAt'],
        description: 'Retrieves the storage for a key',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'StorageData'
      },
      getStorageHash: {
        alias: ['state_getStorageHashAt'],
        description: 'Retrieves the storage hash',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Hash'
      },
      getStorageSize: {
        alias: ['state_getStorageSizeAt'],
        description: 'Retrieves the storage size',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'u64'
      },
      getChildKeys: {
        description: 'Retrieves the keys with prefix of a specific child storage',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getChildStorage: {
        description: 'Retrieves the child storage for a key',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'StorageData'
      },
      getChildStorageHash: {
        description: 'Retrieves the child storage hash',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Hash'
      },
      getChildStorageSize: {
        description: 'Retrieves the child storage size',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'u64'
      },
      getMetadata: {
        description: 'Returns the runtime metadata',
        params: [{
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Metadata'
      },
      getRuntimeVersion: {
        alias: ['chain_getRuntimeVersion'],
        description: 'Get the runtime version',
        params: [{
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'RuntimeVersion'
      },
      queryStorage: {
        description: 'Query historical storage entries (by key) starting from a start block',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'fromBlock',
          type: 'Hash'
        }, {
          name: 'toBlock',
          type: 'BlockHash',
          isOptional: true
        }],
        type: 'Vec<StorageChangeSet>'
      },
      queryStorageAt: {
        description: 'Query storage entries (by key) starting at block hash given as the second parameter',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageChangeSet>'
      },
      getChildReadProof: {
        description: 'Returns proof of storage for child key entries at a specific block state.',
        params: [{
          name: 'childStorageKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ReadProof'
      },
      getReadProof: {
        description: 'Returns proof of storage entries at a specific block state',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ReadProof'
      },
      subscribeRuntimeVersion: {
        alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
        description: 'Retrieves the runtime version via subscription',
        params: [],
        pubsub: ['runtimeVersion', 'subscribeRuntimeVersion', 'unsubscribeRuntimeVersion'],
        type: 'RuntimeVersion'
      },
      subscribeStorage: {
        description: 'Subscribes to storage changes for the provided keys',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>',
          isOptional: true
        }],
        pubsub: ['storage', 'subscribeStorage', 'unsubscribeStorage'],
        type: 'StorageChangeSet'
      },
      traceBlock: {
        description: 'Provides a way to trace the re-execution of a single block',
        params: [{
          name: 'block',
          type: 'Hash'
        }, {
          name: 'targets',
          type: 'Option<Text>'
        }, {
          name: 'storageKeys',
          type: 'Option<Text>'
        }],
        type: 'TraceBlockResponse'
      }
    },
    types: {
      ApiId: '[u8; 8]',
      BlockTrace: {
        blockHash: 'Text',
        parentHash: 'Text',
        tracingTargets: 'Text',
        storageKeys: 'Text',
        spans: 'Vec<BlockTraceSpan>',
        events: 'Vec<BlockTraceEvent>'
      },
      BlockTraceEvent: {
        target: 'Text',
        data: 'BlockTraceEventData',
        parentId: 'Option<u64>'
      },
      BlockTraceEventData: {
        stringValues: 'HashMap<Text, Text>'
      },
      BlockTraceSpan: {
        id: 'u64',
        parentId: 'Option<u64>',
        name: 'Text',
        target: 'Text',
        wasm: 'bool'
      },
      KeyValueOption: '(StorageKey, Option<StorageData>)',
      ReadProof: {
        at: 'Hash',
        proof: 'Vec<Bytes>'
      },
      RuntimeVersionApi: '(ApiId, u32)',
      RuntimeVersion: {
        specName: 'Text',
        implName: 'Text',
        authoringVersion: 'u32',
        specVersion: 'u32',
        implVersion: 'u32',
        apis: 'Vec<RuntimeVersionApi>',
        transactionVersion: 'u32'
      },
      RuntimeVersionPartial: {
        specName: 'Text',
        specVersion: 'u32'
      },
      SpecVersion: 'u32',
      StorageChangeSet: {
        block: 'Hash',
        changes: 'Vec<KeyValueOption>'
      },
      TraceBlockResponse: {
        _enum: {
          TraceError: 'TraceError',
          BlockTrace: 'BlockTrace'
        }
      },
      TraceError: {
        error: 'Text'
      }
    }
  };

  const definitions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    runtime: definitions$V,
    assets: definitions$U,
    authorship: definitions$T,
    aura: definitions$S,
    babe: definitions$R,
    balances: definitions$Q,
    beefy: definitions$P,
    collective: definitions$O,
    consensus: definitions$N,
    contracts: definitions$M,
    democracy: definitions$L,
    elections: definitions$K,
    engine: definitions$J,
    evm: definitions$I,
    extrinsics: definitions$H,
    genericAsset: definitions$G,
    gilt: definitions$F,
    grandpa: definitions$E,
    identity: definitions$D,
    imOnline: definitions$C,
    lottery: definitions$B,
    mmr: definitions$A,
    offences: definitions$z,
    proxy: definitions$y,
    recovery: definitions$x,
    scheduler: definitions$w,
    session: definitions$v,
    society: definitions$u,
    staking: definitions$t,
    support: definitions$s,
    syncstate: definitions$r,
    system: definitions$q,
    treasury: definitions$p,
    txpayment: definitions$o,
    uniques: definitions$n,
    utility: definitions$m,
    vesting: definitions$l,
    attestations: definitions$k,
    bridges: definitions$j,
    claims: definitions$i,
    crowdloan: definitions$h,
    cumulus: definitions$g,
    parachains: definitions$f,
    poll: definitions$e,
    purchase: definitions$d,
    xcm: definitions$c,
    contractsAbi: definitions$b,
    scaleInfo: definitions$a,
    eth: definitions$9,
    metadata: definitions$8,
    rpc: definitions$7,
    author: definitions$6,
    chain: definitions$5,
    childstate: definitions$4,
    offchain: definitions$3,
    payment: definitions$2,
    state: definitions$1
  });

  const jsonrpc = {};
  Object.keys(definitions).filter(key => Object.keys(definitions[key].rpc || {}).length !== 0).forEach(_section => {
    jsonrpc[_section] = {};
    Object.entries(definitions[_section].rpc).forEach(([method, def]) => {
      const isSubscription = !!def.pubsub;
      const section = def.aliasSection || _section;
      if (!jsonrpc[section]) {
        jsonrpc[section] = {};
      }
      jsonrpc[section][method] = objectSpread$1({}, def, {
        isSubscription,
        jsonrpc: `${section}_${method}`,
        method,
        section
      });
    });
  });
  const jsonrpc$1 = jsonrpc;

  function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }

  var id = 0;
  function _classPrivateFieldKey(name) {
    return "__private_" + id++ + "_" + name;
  }

  function hasEq(o) {
    return isFunction$1(o.eq);
  }

  function compareArray(a, b) {
    if (Array.isArray(b)) {
      return a.length === b.length && isUndefined(a.find((v, index) => hasEq(v) ? !v.eq(b[index]) : v !== b[index]));
    }
    return false;
  }

  class AbstractArray extends Array {
    constructor(registry, values, initialU8aLength) {
      super(values.length);
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.initialU8aLength = void 0;
      for (let i = 0; i < values.length; i++) {
        this[i] = values[i];
      }
      this.registry = registry;
      this.initialU8aLength = initialU8aLength;
    }
    get encodedLength() {
      let total = compactToU8a(this.length).length;
      for (let i = 0; i < this.length; i++) {
        total += this[i].encodedLength;
      }
      return total;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.length === 0;
    }
    get length() {
      return super.length;
    }
    eq(other) {
      return compareArray(this, other);
    }
    toArray() {
      return Array.from(this);
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toHuman(isExtended) {
      const result = new Array(this.length);
      for (let i = 0; i < this.length; i++) {
        result[i] = this[i].toHuman(isExtended);
      }
      return result;
    }
    toJSON() {
      const result = new Array(this.length);
      for (let i = 0; i < this.length; i++) {
        result[i] = this[i].toJSON();
      }
      return result;
    }
    toString() {
      const result = new Array(this.length);
      for (let i = 0; i < this.length; i++) {
        result[i] = this[i].toString();
      }
      return `[${result.join(', ')}]`;
    }
    toU8a(isBare) {
      const encoded = new Array(this.length);
      for (let i = 0; i < this.length; i++) {
        encoded[i] = this[i].toU8a(isBare);
      }
      return isBare ? u8aConcat$1(...encoded) : u8aConcat$1(compactToU8a(this.length), ...encoded);
    }
    concat(other) {
      return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);
    }
    filter(callbackfn, thisArg) {
      return this.toArray().filter(callbackfn, thisArg);
    }
    map(callbackfn, thisArg) {
      return this.toArray().map(callbackfn, thisArg);
    }
    includes(check) {
      return this.some(value => value.eq(check));
    }
    slice(start, end) {
      return this.toArray().slice(start, end);
    }
  }

  class Null {
    constructor(registry) {
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.registry = registry;
    }
    get encodedLength() {
      return 0;
    }
    get hash() {
      throw new Error('.hash is not implemented on Null');
    }
    get isEmpty() {
      return true;
    }
    eq(other) {
      return other instanceof Null || isNull(other);
    }
    toHex() {
      return '0x';
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return null;
    }
    toRawType() {
      return 'Null';
    }
    toString() {
      return '';
    }
    toU8a(isBare) {
      return new Uint8Array();
    }
  }

  function hasMismatch(a, b) {
    return isUndefined(a) || (hasEq(a) ? !a.eq(b) : a !== b);
  }
  function notEntry(value) {
    return !Array.isArray(value) || value.length !== 2;
  }
  function compareMapArray(a, b) {
    return a.size === b.length && !b.some(e => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
  }
  function compareMap(a, b) {
    if (Array.isArray(b)) {
      return compareMapArray(a, b);
    } else if (b instanceof Map) {
      return compareMapArray(a, [...b.entries()]);
    } else if (isObject(b)) {
      return compareMapArray(a, Object.entries(b));
    }
    return false;
  }

  function compareSetArray(a, b) {
    return a.size === b.length && !b.some(e => !a.has(e));
  }
  function compareSet(a, b) {
    if (Array.isArray(b)) {
      return compareSetArray(a, b);
    } else if (b instanceof Set) {
      return compareSetArray(a, [...b.values()]);
    } else if (isObject(b)) {
      return compareSetArray(a, Object.values(b));
    }
    return false;
  }

  function formatFailure(error, type, u8a, key) {
    return `decodeU8a: failed at ${u8aToHex$1(u8a)}…${key ? ` on ${key}` : ''}${type ? `: ${type}` : ''}:: ${error.message}`;
  }
  function getRawType(registry, Type) {
    try {
      return new Type(registry).toRawType();
    } catch {
      return '';
    }
  }
  function decodeU8a$3(registry, u8a, types, zip) {
    const [Types, keys] = Array.isArray(types) ? [types, []] : [Object.values(types), Object.keys(types)];
    const result = new Array(Types.length);
    let offset = 0;
    for (let i = 0; i < Types.length; i++) {
      try {
        const value = new Types[i](registry, u8a.subarray(offset));
        offset += value.initialU8aLength || value.encodedLength;
        result[i] = zip ? zip(keys[i], value) : value;
      } catch (error) {
        throw new Error(formatFailure(error, getRawType(registry, Types[i]), u8a.subarray(offset, offset + 16), keys[i]));
      }
    }
    return [result, offset];
  }
  function decodeU8aVec(registry, u8a, start, Type, count) {
    const result = new Array(count);
    let offset = start;
    for (let i = 0; i < count; i++) {
      try {
        const value = new Type(registry, u8a.subarray(offset));
        offset += value.initialU8aLength || value.encodedLength;
        result[i] = value;
      } catch (error) {
        throw new Error(formatFailure(error, getRawType(registry, Type), u8a.subarray(offset, offset + 16)));
      }
    }
    return [result, offset, offset - start];
  }

  function typeToConstructor(registry, type) {
    return isString$1(type) ? registry.createClass(type) : type;
  }

  function mapToTypeMap(registry, input) {
    const entries = Object.entries(input);
    const output = {};
    for (let i = 0; i < entries.length; i++) {
      output[entries[i][0]] = typeToConstructor(registry, entries[i][1]);
    }
    return output;
  }

  function isArrayLike(arg) {
    return arg instanceof Uint8Array || Array.isArray(arg);
  }
  function isCodec(arg) {
    return isFunction$1(arg && arg.toU8a);
  }
  function isEnum(arg) {
    return isCodec(arg) && isNumber$1(arg.index) && isCodec(arg.value);
  }
  function isNumberLike(arg) {
    return isNumber$1(arg) || isBn(arg) || isBigInt$1(arg);
  }
  function sortArray(a, b) {
    let sortRes = 0;
    const minLen = Math.min(a.length, b.length);
    for (let i = 0; i < minLen; ++i) {
      sortRes = sortAsc(a[i], b[i]);
      if (sortRes !== 0) {
        return sortRes;
      }
    }
    return a.length - b.length;
  }
  function sortAsc(a, b) {
    if (isNumberLike(a) && isNumberLike(b)) {
      return bnToBn$1(a).cmp(bnToBn$1(b));
    } else if (a instanceof Map && b instanceof Map) {
      return sortAsc(Array.from(a.values()), Array.from(b.values()));
    } else if (isEnum(a) && isEnum(b)) {
      return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
    } else if (isArrayLike(a) && isArrayLike(b)) {
      return sortArray(a, b);
    } else if (isCodec(a) && isCodec(b)) {
      return sortAsc(a.toU8a(true), b.toU8a(true));
    }
    throw new Error(`Attempting to sort unrecognized values: ${stringify(a)} (typeof ${typeof a}) <-> ${stringify(b)} (typeof ${typeof b})`);
  }
  function sortSet(set) {
    return new Set(Array.from(set).sort(sortAsc));
  }
  function sortMap(map) {
    return new Map(Array.from(map.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
  }

  function typesToMap(registry, Types) {
    const entries = Object.entries(Types);
    const result = {};
    for (let i = 0; i < entries.length; i++) {
      const [key, Type] = entries[i];
      result[key] = registry.getClassName(Type) || new Type(registry).toRawType();
    }
    return result;
  }

  function isRustEnum$1(def) {
    const defValues = Object.values(def);
    if (defValues.some(v => isNumber$1(v))) {
      assert$h(defValues.every(v => isNumber$1(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
      return false;
    }
    return true;
  }
  function extractDef(registry, _def) {
    if (Array.isArray(_def)) {
      return {
        def: _def.reduce((def, key, index) => {
          def[key] = {
            Type: Null,
            index
          };
          return def;
        }, {}),
        isBasic: true,
        isIndexed: false
      };
    }
    let isBasic;
    let isIndexed;
    let def;
    if (isRustEnum$1(_def)) {
      def = Object.entries(mapToTypeMap(registry, _def)).reduce((def, [key, Type], index) => {
        def[key] = {
          Type,
          index
        };
        return def;
      }, {});
      isBasic = !Object.values(def).some(({
        Type
      }) => Type !== Null);
      isIndexed = false;
    } else {
      def = Object.entries(_def).reduce((def, [key, index]) => {
        def[key] = {
          Type: Null,
          index
        };
        return def;
      }, {});
      isBasic = true;
      isIndexed = true;
    }
    return {
      def,
      isBasic,
      isIndexed
    };
  }
  function createFromValue(registry, def, index = 0, value) {
    const entry = Object.values(def).find(e => e.index === index);
    assert$h(!isUndefined(entry), () => `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);
    return {
      index,
      value: value instanceof entry.Type ? value : new entry.Type(registry, value)
    };
  }
  function decodeFromJSON(registry, def, key, value) {
    const keys = Object.keys(def).map(k => k.toLowerCase());
    const keyLower = key.toLowerCase();
    const index = keys.indexOf(keyLower);
    assert$h(index !== -1, () => `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);
    try {
      return createFromValue(registry, def, Object.values(def)[index].index, value);
    } catch (error) {
      throw new Error(`Enum(${key}):: ${error.message}`);
    }
  }
  function decodeFromString(registry, def, value) {
    return isHex$1(value)
    ? decodeFromValue(registry, def, hexToU8a$1(value)) : decodeFromJSON(registry, def, value);
  }
  function decodeFromValue(registry, def, value) {
    if (isU8a$1(value)) {
      if (value.length) {
        return createFromValue(registry, def, value[0], value.subarray(1));
      }
    } else if (isNumber$1(value)) {
      return createFromValue(registry, def, value);
    } else if (isString$1(value)) {
      return decodeFromString(registry, def, value.toString());
    } else if (isObject(value)) {
      const key = Object.keys(value)[0];
      return decodeFromJSON(registry, def, key, value[key]);
    }
    return createFromValue(registry, def, Object.values(def)[0].index);
  }
  function decodeEnum(registry, def, value, index) {
    if (isNumber$1(index)) {
      return createFromValue(registry, def, index, value);
    } else if (value instanceof Enum) {
      return createFromValue(registry, def, value.index, value.value);
    }
    return decodeFromValue(registry, def, value);
  }
  var _def2 = _classPrivateFieldKey("def");
  var _entryIndex = _classPrivateFieldKey("entryIndex");
  var _indexes = _classPrivateFieldKey("indexes");
  var _isBasic = _classPrivateFieldKey("isBasic");
  var _isIndexed = _classPrivateFieldKey("isIndexed");
  var _raw$2 = _classPrivateFieldKey("raw");
  class Enum {
    constructor(registry, def, value, index) {
      this.registry = void 0;
      this.createdAtHash = void 0;
      Object.defineProperty(this, _def2, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _entryIndex, {
        writable: true,
        value: void 0
      });
      this.initialU8aLength = void 0;
      Object.defineProperty(this, _indexes, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isBasic, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isIndexed, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _raw$2, {
        writable: true,
        value: void 0
      });
      const defInfo = extractDef(registry, def);
      const decoded = decodeEnum(registry, defInfo.def, value, index);
      this.registry = registry;
      _classPrivateFieldBase(this, _def2)[_def2] = defInfo.def;
      _classPrivateFieldBase(this, _isBasic)[_isBasic] = defInfo.isBasic;
      _classPrivateFieldBase(this, _isIndexed)[_isIndexed] = defInfo.isIndexed;
      _classPrivateFieldBase(this, _indexes)[_indexes] = Object.values(defInfo.def).map(({
        index
      }) => index);
      _classPrivateFieldBase(this, _entryIndex)[_entryIndex] = _classPrivateFieldBase(this, _indexes)[_indexes].indexOf(decoded.index) || 0;
      _classPrivateFieldBase(this, _raw$2)[_raw$2] = decoded.value;
      if (_classPrivateFieldBase(this, _raw$2)[_raw$2].initialU8aLength) {
        this.initialU8aLength = 1 + _classPrivateFieldBase(this, _raw$2)[_raw$2].initialU8aLength;
      }
    }
    static with(Types) {
      const keys = Array.isArray(Types) ? Types : Object.keys(Types);
      const asKeys = new Array(keys.length);
      const isKeys = new Array(keys.length);
      for (let i = 0; i < keys.length; i++) {
        const name = stringUpperFirst(stringCamelCase(keys[i].replace(' ', '_')));
        asKeys[i] = `as${name}`;
        isKeys[i] = `is${name}`;
      }
      return class extends Enum {
        constructor(registry, value, index) {
          super(registry, Types, value, index);
          objectProperties(this, isKeys, (_, i) => this.type === keys[i]);
          objectProperties(this, asKeys, (k, i) => {
            assert$h(this[isKeys[i]], () => `Cannot convert '${this.type}' via ${k}`);
            return this.value;
          });
        }
      };
    }
    get encodedLength() {
      return 1 + _classPrivateFieldBase(this, _raw$2)[_raw$2].encodedLength;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get index() {
      return _classPrivateFieldBase(this, _indexes)[_indexes][_classPrivateFieldBase(this, _entryIndex)[_entryIndex]];
    }
    get isBasic() {
      return _classPrivateFieldBase(this, _isBasic)[_isBasic];
    }
    get isEmpty() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].isEmpty;
    }
    get isNone() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2] instanceof Null;
    }
    get isNull() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2] instanceof Null;
    }
    get defIndexes() {
      return _classPrivateFieldBase(this, _indexes)[_indexes];
    }
    get defKeys() {
      return Object.keys(_classPrivateFieldBase(this, _def2)[_def2]);
    }
    get type() {
      return this.defKeys[_classPrivateFieldBase(this, _entryIndex)[_entryIndex]];
    }
    get value() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2];
    }
    eq(other) {
      if (isU8a$1(other)) {
        return !this.toU8a().some((entry, index) => entry !== other[index]);
      } else if (isNumber$1(other)) {
        return this.toNumber() === other;
      } else if (_classPrivateFieldBase(this, _isBasic)[_isBasic] && isString$1(other)) {
        return this.type === other;
      } else if (isHex$1(other)) {
        return this.toHex() === other;
      } else if (other instanceof Enum) {
        return this.index === other.index && this.value.eq(other.value);
      } else if (isObject(other)) {
        return this.value.eq(other[this.type]);
      }
      return this.value.eq(other);
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toHuman(isExtended) {
      return _classPrivateFieldBase(this, _isBasic)[_isBasic] || this.isNone ? this.type : {
        [this.type]: _classPrivateFieldBase(this, _raw$2)[_raw$2].toHuman(isExtended)
      };
    }
    toJSON() {
      return _classPrivateFieldBase(this, _isBasic)[_isBasic] ? this.type : {
        [stringCamelCase(this.type)]: _classPrivateFieldBase(this, _raw$2)[_raw$2].toJSON()
      };
    }
    toNumber() {
      return this.index;
    }
    _toRawStruct() {
      if (_classPrivateFieldBase(this, _isBasic)[_isBasic]) {
        return _classPrivateFieldBase(this, _isIndexed)[_isIndexed] ? this.defKeys.reduce((out, key, index) => {
          out[key] = _classPrivateFieldBase(this, _indexes)[_indexes][index];
          return out;
        }, {}) : this.defKeys;
      }
      const typeMap = Object.entries(_classPrivateFieldBase(this, _def2)[_def2]).reduce((out, [key, {
        Type
      }]) => {
        out[key] = Type;
        return out;
      }, {});
      return typesToMap(this.registry, typeMap);
    }
    toRawType() {
      return stringify({
        _enum: this._toRawStruct()
      });
    }
    toString() {
      return this.isNull ? this.type : stringify(this.toJSON());
    }
    toU8a(isBare) {
      return u8aConcat$1(new Uint8Array(isBare ? [] : [this.index]), _classPrivateFieldBase(this, _raw$2)[_raw$2].toU8a(isBare));
    }
  }

  function decodeStructFromObject(registry, Types, value, jsonMap) {
    let jsonObj;
    const inputKeys = Object.keys(Types);
    const typeofArray = Array.isArray(value);
    const typeofMap = value instanceof Map;
    assert$h(typeofArray || typeofMap || isObject(value), () => `Struct: Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object, map or array`);
    assert$h(!typeofArray || value.length === inputKeys.length, () => `Struct: Unable to map ${stringify(value)} array to object with known keys ${inputKeys.join(', ')}`);
    const raw = new Array(inputKeys.length);
    for (let i = 0; i < inputKeys.length; i++) {
      const key = inputKeys[i];
      const jsonKey = jsonMap.get(key) || key;
      const Type = Types[key];
      let assign;
      try {
        if (typeofArray) {
          assign = value[i];
        } else if (typeofMap) {
          assign = jsonKey && value.get(jsonKey);
        } else {
          assign = jsonKey && value[jsonKey];
          if (isUndefined(assign)) {
            if (isUndefined(jsonObj)) {
              const entries = Object.entries(value);
              jsonObj = {};
              for (let e = 0; e < entries.length; e++) {
                jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
              }
            }
            assign = jsonKey && jsonObj[jsonKey];
          }
        }
        raw[i] = [key, assign instanceof Type ? assign : new Type(registry, assign)];
      } catch (error) {
        let type = Type.name;
        try {
          type = new Type(registry).toRawType();
        } catch (error) {
        }
        throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
      }
    }
    return raw;
  }
  function decodeZip(k, v) {
    return [k, v];
  }
  function decodeStruct(registry, Types, value, jsonMap) {
    if (isU8a$1(value)) {
      return decodeU8a$3(registry, value, Types, decodeZip);
    } else if (value instanceof Struct) {
      return [value, 0];
    } else if (isHex$1(value)) {
      return decodeStruct(registry, Types, hexToU8a$1(value), jsonMap);
    }
    return [decodeStructFromObject(registry, Types, value || {}, jsonMap), 0];
  }
  var _jsonMap = _classPrivateFieldKey("jsonMap");
  var _Types = _classPrivateFieldKey("Types");
  class Struct extends Map {
    constructor(registry, Types, value, jsonMap = new Map()) {
      const [decoded, decodedLength] = decodeStruct(registry, mapToTypeMap(registry, Types), value, jsonMap);
      super(decoded);
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.initialU8aLength = void 0;
      Object.defineProperty(this, _jsonMap, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _Types, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      _classPrivateFieldBase(this, _jsonMap)[_jsonMap] = jsonMap;
      _classPrivateFieldBase(this, _Types)[_Types] = mapToTypeMap(registry, Types);
    }
    static with(Types, jsonMap) {
      const keys = Object.keys(Types);
      return class extends Struct {
        constructor(registry, value) {
          super(registry, Types, value, jsonMap);
          objectProperties(this, keys, k => this.get(k));
        }
      };
    }
    get defKeys() {
      return Object.keys(_classPrivateFieldBase(this, _Types)[_Types]);
    }
    get isEmpty() {
      for (const v of this.values()) {
        if (!v.isEmpty) {
          return false;
        }
      }
      return true;
    }
    get Type() {
      const result = {};
      const defs = Object.entries(_classPrivateFieldBase(this, _Types)[_Types]);
      for (let i = 0; i < defs.length; i++) {
        const [key, Type] = defs[i];
        result[key] = new Type(this.registry).toRawType();
      }
      return result;
    }
    get encodedLength() {
      let total = 0;
      for (const v of this.values()) {
        total += v.encodedLength;
      }
      return total;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    eq(other) {
      return compareMap(this, other);
    }
    get(name) {
      return super.get(name);
    }
    getAtIndex(index) {
      return this.toArray()[index];
    }
    toArray() {
      return [...this.values()];
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toHuman(isExtended) {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[k] = v && v.toHuman(isExtended);
      }
      return json;
    }
    toJSON() {
      const json = {};
      for (const [k, v] of this.entries()) {
        const jsonKey = _classPrivateFieldBase(this, _jsonMap)[_jsonMap].get(k) || k;
        json[jsonKey] = v && v.toJSON();
      }
      return json;
    }
    toRawType() {
      return stringify(typesToMap(this.registry, _classPrivateFieldBase(this, _Types)[_Types]));
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      const encoded = [];
      for (const [k, v] of this.entries()) {
        if (v && isFunction$1(v.toU8a)) {
          encoded.push(v.toU8a(!isBare || isBoolean$1(isBare) ? isBare : isBare[k]));
        }
      }
      return u8aConcat$1(...encoded);
    }
  }

  const l$4 = logger('Map');
  function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
    const output = new Map();
    const [offset, length] = compactFromU8a(u8a);
    const count = length.toNumber();
    const types = [];
    for (let i = 0; i < count; i++) {
      types.push(KeyClass, ValClass);
    }
    const [values, decodedLength] = decodeU8a$3(registry, u8a.subarray(offset), types);
    for (let i = 0; i < values.length; i += 2) {
      output.set(values[i], values[i + 1]);
    }
    return [output, offset + decodedLength];
  }
  function decodeMapFromMap(registry, KeyClass, ValClass, value) {
    const output = new Map();
    for (const [key, val] of value.entries()) {
      const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;
      try {
        output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l$4.error('Failed to decode key or value:', error.message);
        throw error;
      }
    }
    return [output, 0];
  }
  function decodeMap(registry, keyType, valType, value) {
    const KeyClass = typeToConstructor(registry, keyType);
    const ValClass = typeToConstructor(registry, valType);
    if (!value) {
      return [new Map(), 0];
    } else if (isU8a$1(value) || isHex$1(value)) {
      return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a$1(value));
    } else if (value instanceof Map) {
      return decodeMapFromMap(registry, KeyClass, ValClass, value);
    } else if (isObject(value)) {
      return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
    }
    throw new Error('Map: cannot decode type');
  }
  var _KeyClass = _classPrivateFieldKey("KeyClass");
  var _ValClass$1 = _classPrivateFieldKey("ValClass");
  var _type = _classPrivateFieldKey("type");
  class CodecMap extends Map {
    constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
      const [decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
      super(type === 'BTreeMap' ? sortMap(decoded) : decoded);
      this.registry = void 0;
      this.createdAtHash = void 0;
      Object.defineProperty(this, _KeyClass, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _ValClass$1, {
        writable: true,
        value: void 0
      });
      this.initialU8aLength = void 0;
      Object.defineProperty(this, _type, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      _classPrivateFieldBase(this, _KeyClass)[_KeyClass] = typeToConstructor(registry, keyType);
      _classPrivateFieldBase(this, _ValClass$1)[_ValClass$1] = typeToConstructor(registry, valType);
      _classPrivateFieldBase(this, _type)[_type] = type;
    }
    get encodedLength() {
      let len = compactToU8a(this.size).length;
      for (const [k, v] of this.entries()) {
        len += v.encodedLength + k.encodedLength;
      }
      return len;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.size === 0;
    }
    eq(other) {
      return compareMap(this, other);
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toHuman(isExtended) {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[k.toString()] = v.toHuman(isExtended);
      }
      return json;
    }
    toJSON() {
      const json = {};
      for (const [k, v] of this.entries()) {
        json[k.toString()] = v.toJSON();
      }
      return json;
    }
    toRawType() {
      return `${_classPrivateFieldBase(this, _type)[_type]}<${this.registry.getClassName(_classPrivateFieldBase(this, _KeyClass)[_KeyClass]) || new (_classPrivateFieldBase(this, _KeyClass)[_KeyClass])(this.registry).toRawType()},${this.registry.getClassName(_classPrivateFieldBase(this, _ValClass$1)[_ValClass$1]) || new (_classPrivateFieldBase(this, _ValClass$1)[_ValClass$1])(this.registry).toRawType()}>`;
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      const encoded = new Array();
      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }
      for (const [k, v] of this.entries()) {
        encoded.push(k.toU8a(isBare), v.toU8a(isBare));
      }
      return u8aConcat$1(...encoded);
    }
  }

  class BTreeMap extends CodecMap {
    static with(keyType, valType) {
      return class extends BTreeMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value, 'BTreeMap');
        }
      };
    }
  }

  const l$3 = logger('BTreeSet');
  function decodeSetFromU8a(registry, ValClass, u8a) {
    const output = new Set();
    const [offset, length] = compactFromU8a(u8a);
    const [values, decodedLength] = decodeU8a$3(registry, u8a.subarray(offset), new Array(length.toNumber()).fill(ValClass));
    for (let i = 0; i < values.length; i++) {
      output.add(values[i]);
    }
    return [output, decodedLength + offset];
  }
  function decodeSetFromSet(registry, ValClass, value) {
    const output = new Set();
    value.forEach(val => {
      try {
        output.add(val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l$3.error('Failed to decode key or value:', error.message);
        throw error;
      }
    });
    return [output, 0];
  }
  function decodeSet$1(registry, valType, value) {
    if (!value) {
      return [new Set(), 0];
    }
    const ValClass = typeToConstructor(registry, valType);
    if (isU8a$1(value) || isHex$1(value)) {
      return decodeSetFromU8a(registry, ValClass, u8aToU8a$1(value));
    } else if (Array.isArray(value) || value instanceof Set) {
      return decodeSetFromSet(registry, ValClass, value);
    }
    throw new Error('BTreeSet: cannot decode type');
  }
  var _ValClass = _classPrivateFieldKey("ValClass");
  class BTreeSet extends Set {
    constructor(registry, valType, rawValue) {
      const [values, decodedLength] = decodeSet$1(registry, valType, rawValue);
      super(sortSet(values));
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.initialU8aLength = void 0;
      Object.defineProperty(this, _ValClass, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      _classPrivateFieldBase(this, _ValClass)[_ValClass] = typeToConstructor(registry, valType);
    }
    static with(valType) {
      return class extends BTreeSet {
        constructor(registry, value) {
          super(registry, valType, value);
        }
      };
    }
    get encodedLength() {
      let len = compactToU8a(this.size).length;
      for (const v of this.values()) {
        len += v.encodedLength;
      }
      return len;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.size === 0;
    }
    get strings() {
      return [...super.values()].map(v => v.toString());
    }
    eq(other) {
      return compareSet(this, other);
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toHuman(isExtended) {
      const json = [];
      for (const v of this.values()) {
        json.push(v.toHuman(isExtended));
      }
      return json;
    }
    toJSON() {
      const json = [];
      for (const v of this.values()) {
        json.push(v.toJSON());
      }
      return json;
    }
    toRawType() {
      return `BTreeSet<${this.registry.getClassName(_classPrivateFieldBase(this, _ValClass)[_ValClass]) || new (_classPrivateFieldBase(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      const encoded = new Array();
      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }
      for (const v of this.values()) {
        encoded.push(v.toU8a(isBare));
      }
      return u8aConcat$1(...encoded);
    }
  }

  var _Type$3 = _classPrivateFieldKey("Type");
  var _raw$1 = _classPrivateFieldKey("raw");
  class Compact {
    constructor(registry, Type, value = 0) {
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.initialU8aLength = void 0;
      Object.defineProperty(this, _Type$3, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _raw$1, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _Type$3)[_Type$3] = typeToConstructor(registry, Type);
      const [raw, decodedLength] = Compact.decodeCompact(registry, _classPrivateFieldBase(this, _Type$3)[_Type$3], value);
      this.initialU8aLength = decodedLength;
      _classPrivateFieldBase(this, _raw$1)[_raw$1] = raw;
    }
    static with(Type) {
      return class extends Compact {
        constructor(registry, value) {
          super(registry, Type, value);
        }
      };
    }
    static decodeCompact(registry, Type, value) {
      if (value instanceof Compact) {
        return [new Type(registry, _classPrivateFieldBase(value, _raw$1)[_raw$1]), 0];
      } else if (value instanceof Type) {
        return [value, 0];
      } else if (isString$1(value) || isNumber$1(value) || isBn(value) || isBigInt$1(value)) {
        return [new Type(registry, value), 0];
      }
      const [decodedLength, bn] = compactFromU8a(value);
      return [new Type(registry, bn), decodedLength];
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].isEmpty;
    }
    bitLength() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].bitLength();
    }
    eq(other) {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].eq(other instanceof Compact ? _classPrivateFieldBase(other, _raw$1)[_raw$1] : other);
    }
    toBigInt() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].toBigInt();
    }
    toBn() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].toBn();
    }
    toHex(isLe) {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].toHex(isLe);
    }
    toHuman(isExtended) {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].toHuman(isExtended);
    }
    toJSON() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].toJSON();
    }
    toNumber() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].toNumber();
    }
    toRawType() {
      return `Compact<${this.registry.getClassName(_classPrivateFieldBase(this, _Type$3)[_Type$3]) || _classPrivateFieldBase(this, _raw$1)[_raw$1].toRawType()}>`;
    }
    toString() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].toString();
    }
    toU8a(isBare) {
      return compactToU8a(_classPrivateFieldBase(this, _raw$1)[_raw$1].toBn());
    }
    unwrap() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1];
    }
  }

  var _neverError = _classPrivateFieldKey("neverError");
  class DoNotConstruct {
    constructor(registry, typeName = 'DoNotConstruct') {
      this.registry = void 0;
      this.createdAtHash = void 0;
      Object.defineProperty(this, _neverError, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _neverError)[_neverError] = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    static with(typeName) {
      return class extends DoNotConstruct {
        constructor(registry) {
          super(registry, typeName);
        }
      };
    }
    get encodedLength() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    get hash() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    get isEmpty() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    eq() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    toHex() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    toHuman() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    toJSON() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    toRawType() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    toString() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
    toU8a() {
      throw _classPrivateFieldBase(this, _neverError)[_neverError];
    }
  }

  class HashMap extends CodecMap {
    static with(keyType, valType) {
      return class extends HashMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value);
        }
      };
    }
  }

  const DEFAULT_UINT_BITS = 64;
  const MAX_NUMBER_BITS = 52;
  const MUL_P = new BN$8(10000);
  const FORMATTERS = [['Perquintill', BN_QUINTILL], ['Perbill', BN_BILLION], ['Permill', BN_MILLION], ['Percent', BN_HUNDRED]];
  function toPercentage(value, divisor) {
    return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
  }
  function decodeAbstractInt(value, bitLength, isNegative) {
    if (isU8a$1(value)) {
      if (!value.length) {
        return '0';
      }
      try {
        return u8aToBn(value.subarray(0, bitLength / 8), {
          isLe: true,
          isNegative
        }).toString();
      } catch (error) {
        throw new Error(`AbstractInt: failed on ${stringify(value)}:: ${error.message}`);
      }
    } else if (isBn(value)) {
      return value.toString();
    } else if (isHex$1(value, -1, true)) {
      return hexToBn$1(value, {
        isLe: false,
        isNegative
      }).toString();
    }
    return bnToBn$1(value).toString();
  }
  var _bitLength = _classPrivateFieldKey("bitLength");
  var _isSigned = _classPrivateFieldKey("isSigned");
  class AbstractInt extends BN$8 {
    constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
      super(decodeAbstractInt(value, bitLength, isSigned));
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.encodedLength = void 0;
      Object.defineProperty(this, _bitLength, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isSigned, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _bitLength)[_bitLength] = bitLength;
      this.encodedLength = _classPrivateFieldBase(this, _bitLength)[_bitLength] / 8;
      _classPrivateFieldBase(this, _isSigned)[_isSigned] = isSigned;
      const isPositive = this.gte(BN_ZERO);
      const maxBits = bitLength - (isSigned && isPositive ? 1 : 0);
      assert$h(isSigned || isPositive, () => `${this.toRawType()}: Negative number passed to unsigned type`);
      assert$h(super.bitLength() <= maxBits, () => `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.isZero();
    }
    get isUnsigned() {
      return !_classPrivateFieldBase(this, _isSigned)[_isSigned];
    }
    bitLength() {
      return _classPrivateFieldBase(this, _bitLength)[_bitLength];
    }
    eq(other) {
      return super.eq(isHex$1(other) ? hexToBn$1(other.toString(), {
        isLe: false,
        isNegative: _classPrivateFieldBase(this, _isSigned)[_isSigned]
      }) : bnToBn$1(other));
    }
    isMax() {
      const u8a = this.toU8a().filter(b => b === 0xff);
      return u8a.length === _classPrivateFieldBase(this, _bitLength)[_bitLength] / 8;
    }
    toBigInt() {
      return BigInt(this.toString());
    }
    toBn() {
      return this;
    }
    toHex(isLe = false) {
      return bnToHex(this, {
        bitLength: this.bitLength(),
        isLe,
        isNegative: !this.isUnsigned
      });
    }
    toHuman(isExpanded) {
      const rawType = this.toRawType();
      if (rawType === 'Balance') {
        return this.isMax() ? 'everything'
        : formatBalance(this, {
          decimals: this.registry.chainDecimals[0],
          withSi: true,
          withUnit: this.registry.chainTokens[0]
        });
      }
      const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
      return divisor ? toPercentage(this, divisor) : formatNumber(this);
    }
    toJSON(onlyHex = false) {
      return onlyHex || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
    }
    toRawType() {
      return this instanceof this.registry.createClass('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
    }
    toString(base) {
      return super.toString(base);
    }
    toU8a(isBare) {
      return bnToU8a$1(this, {
        bitLength: this.bitLength(),
        isLe: true,
        isNegative: !this.isUnsigned
      });
    }
  }

  class Int extends AbstractInt {
    constructor(registry, value = 0, bitLength) {
      super(registry, value, bitLength, true);
    }
    static with(bitLength, typeName) {
      return class extends Int {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
  }

  function decodeJson(value) {
    return Object.entries(value || {});
  }
  class Json extends Map {
    constructor(registry, value) {
      const decoded = decodeJson(value);
      super(decoded);
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.registry = registry;
      objectProperties(this, decoded.map(([k]) => k), k => this.get(k));
    }
    get encodedLength() {
      return 0;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return [...this.keys()].length === 0;
    }
    eq(other) {
      return compareMap(this, other);
    }
    toHex() {
      throw new Error('Unimplemented');
    }
    toHuman() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = isFunction$1(value.toHuman) ? value.toHuman() : value;
        return json;
      }, {});
    }
    toJSON() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = value;
        return json;
      }, {});
    }
    toRawType() {
      return 'Json';
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      throw new Error('Unimplemented');
    }
  }

  function decodeOption(registry, typeName, value) {
    if (isNull(value) || isUndefined(value) || value instanceof Null || value === '0x') {
      return new Null(registry);
    }
    const Type = typeToConstructor(registry, typeName);
    if (value instanceof Option) {
      return decodeOption(registry, Type, value.value);
    } else if (value instanceof Type) {
      return value;
    } else if (isU8a$1(value)) {
      return !value.length || value[0] === 0 ? new Null(registry) : new Type(registry, value.subarray(1));
    }
    return new Type(registry, value);
  }
  var _Type$2 = _classPrivateFieldKey("Type");
  var _initialU8aLength$1 = _classPrivateFieldKey("initialU8aLength");
  var _raw = _classPrivateFieldKey("raw");
  class Option {
    constructor(registry, typeName, value) {
      this.registry = void 0;
      this.createdAtHash = void 0;
      Object.defineProperty(this, _Type$2, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _initialU8aLength$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _raw, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _Type$2)[_Type$2] = typeToConstructor(registry, typeName);
      _classPrivateFieldBase(this, _raw)[_raw] = decodeOption(registry, typeName, value);
      if (_classPrivateFieldBase(this, _raw)[_raw].initialU8aLength) {
        _classPrivateFieldBase(this, _initialU8aLength$1)[_initialU8aLength$1] = 1 + _classPrivateFieldBase(this, _raw)[_raw].initialU8aLength;
      }
    }
    static with(Type) {
      return class extends Option {
        constructor(registry, value) {
          super(registry, Type, value);
        }
      };
    }
    get encodedLength() {
      return 1 + _classPrivateFieldBase(this, _raw)[_raw].encodedLength;
    }
    get initialU8aLength() {
      return _classPrivateFieldBase(this, _initialU8aLength$1)[_initialU8aLength$1];
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.isNone;
    }
    get isNone() {
      return _classPrivateFieldBase(this, _raw)[_raw] instanceof Null;
    }
    get isSome() {
      return !this.isNone;
    }
    get value() {
      return _classPrivateFieldBase(this, _raw)[_raw];
    }
    eq(other) {
      if (other instanceof Option) {
        return this.isSome === other.isSome && this.value.eq(other.value);
      }
      return this.value.eq(other);
    }
    toHex() {
      return this.isNone ? '0x' : u8aToHex$1(this.toU8a().subarray(1));
    }
    toHuman(isExtended) {
      return _classPrivateFieldBase(this, _raw)[_raw].toHuman(isExtended);
    }
    toJSON() {
      return _classPrivateFieldBase(this, _raw)[_raw].toJSON();
    }
    toRawType(isBare) {
      const wrapped = this.registry.getClassName(_classPrivateFieldBase(this, _Type$2)[_Type$2]) || new (_classPrivateFieldBase(this, _Type$2)[_Type$2])(this.registry).toRawType();
      return isBare ? wrapped : `Option<${wrapped}>`;
    }
    toString() {
      return _classPrivateFieldBase(this, _raw)[_raw].toString();
    }
    toU8a(isBare) {
      if (isBare) {
        return _classPrivateFieldBase(this, _raw)[_raw].toU8a(true);
      }
      const u8a = new Uint8Array(this.encodedLength);
      if (this.isSome) {
        u8a.set([1]);
        u8a.set(_classPrivateFieldBase(this, _raw)[_raw].toU8a(), 1);
      }
      return u8a;
    }
    unwrap() {
      assert$h(this.isSome, 'Option: unwrapping a None value');
      return _classPrivateFieldBase(this, _raw)[_raw];
    }
    unwrapOr(defaultValue) {
      return this.isSome ? this.unwrap() : defaultValue;
    }
    unwrapOrDefault() {
      return this.isSome ? this.unwrap() : new (_classPrivateFieldBase(this, _Type$2)[_Type$2])(this.registry);
    }
  }

  function decodeTuple(registry, _Types, value) {
    if (isU8a$1(value) || isHex$1(value)) {
      return decodeU8a$3(registry, u8aToU8a$1(value), _Types);
    }
    const Types = Array.isArray(_Types) ? _Types : Object.values(_Types);
    return [Types.map((Type, index) => {
      try {
        const entry = value === null || value === void 0 ? void 0 : value[index];
        if (entry instanceof Type) {
          return entry;
        }
        return new Type(registry, entry);
      } catch (error) {
        throw new Error(`Tuple: failed on ${index}:: ${error.message}`);
      }
    }), 0];
  }
  var _Types2 = _classPrivateFieldKey("Types");
  class Tuple extends AbstractArray {
    constructor(registry, Types, value) {
      const Clazzes = Array.isArray(Types) ? Types.map(t => typeToConstructor(registry, t)) : isFunction$1(Types) || isString$1(Types) ? [typeToConstructor(registry, Types)] : mapToTypeMap(registry, Types);
      const [values, decodedLength] = decodeTuple(registry, Clazzes, value);
      super(registry, values, decodedLength);
      Object.defineProperty(this, _Types2, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _Types2)[_Types2] = Clazzes;
    }
    static with(Types) {
      return class extends Tuple {
        constructor(registry, value) {
          super(registry, Types, value);
        }
      };
    }
    get encodedLength() {
      let total = 0;
      for (let i = 0; i < this.length; i++) {
        total += this[i].encodedLength;
      }
      return total;
    }
    get Types() {
      return Array.isArray(_classPrivateFieldBase(this, _Types2)[_Types2]) ? _classPrivateFieldBase(this, _Types2)[_Types2].map(T => new T(this.registry).toRawType()) : Object.keys(_classPrivateFieldBase(this, _Types2)[_Types2]);
    }
    toRawType() {
      const types = (Array.isArray(_classPrivateFieldBase(this, _Types2)[_Types2]) ? _classPrivateFieldBase(this, _Types2)[_Types2] : Object.values(_classPrivateFieldBase(this, _Types2)[_Types2])).map(T => this.registry.getClassName(T) || new T(this.registry).toRawType());
      return `(${types.join(',')})`;
    }
    toString() {
      return stringify(this.toJSON());
    }
    toU8a(isBare) {
      const encoded = new Array(this.length);
      for (let i = 0; i < this.length; i++) {
        encoded[i] = this[i].toU8a(isBare);
      }
      return u8aConcat$1(...encoded);
    }
  }

  const MAX_LENGTH$2 = 64 * 1024;
  const l$2 = logger('Vec');
  function decodeVec(registry, Type, value, length = -1) {
    if (Array.isArray(value)) {
      const result = new Array(value.length);
      for (let i = 0; i < value.length; i++) {
        const entry = value[i];
        try {
          result[i] = entry instanceof Type ? entry : new Type(registry, entry);
        } catch (error) {
          l$2.error(`Unable to decode on index ${i}`, error.message);
          throw error;
        }
      }
      return [result, 0, 0];
    }
    const u8a = u8aToU8a$1(value);
    let offset = 0;
    if (length === -1) {
      const [_offset, _length] = compactFromU8a(u8a);
      assert$h(_length.lten(MAX_LENGTH$2), () => `Vec length ${_length.toString()} exceeds ${MAX_LENGTH$2}`);
      length = _length.toNumber();
      offset = _offset;
    }
    return decodeU8aVec(registry, u8a, offset, Type, length);
  }
  var _Type$1 = _classPrivateFieldKey("Type");
  class Vec extends AbstractArray {
    constructor(registry, Type, value = []) {
      const Clazz = typeToConstructor(registry, Type);
      const [values, decodedLength] = decodeVec(registry, Clazz, value);
      super(registry, values, decodedLength);
      Object.defineProperty(this, _Type$1, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _Type$1)[_Type$1] = Clazz;
    }
    static with(Type) {
      return class extends Vec {
        constructor(registry, value) {
          super(registry, Type, value);
        }
      };
    }
    get Type() {
      return _classPrivateFieldBase(this, _Type$1)[_Type$1].name;
    }
    indexOf(_other) {
      const other = _other instanceof _classPrivateFieldBase(this, _Type$1)[_Type$1] ? _other : new (_classPrivateFieldBase(this, _Type$1)[_Type$1])(this.registry, _other);
      for (let i = 0; i < this.length; i++) {
        if (other.eq(this[i])) {
          return i;
        }
      }
      return -1;
    }
    toRawType() {
      return `Vec<${this.registry.getClassName(_classPrivateFieldBase(this, _Type$1)[_Type$1]) || new (_classPrivateFieldBase(this, _Type$1)[_Type$1])(this.registry).toRawType()}>`;
    }
  }

  const EMPTY = new Uint8Array();
  class Linkage extends Struct {
    constructor(registry, Type, value) {
      super(registry, {
        previous: Option.with(Type),
        next: Option.with(Type)
      }, value);
    }
    static withKey(Type) {
      return class extends Linkage {
        constructor(registry, value) {
          super(registry, Type, value);
        }
      };
    }
    get previous() {
      return this.get('previous');
    }
    get next() {
      return this.get('next');
    }
    toRawType() {
      return `Linkage<${this.next.toRawType(true)}>`;
    }
    toU8a() {
      return this.isEmpty ? EMPTY : super.toU8a();
    }
  }

  var _rangeName = _classPrivateFieldKey("rangeName");
  class Range extends Tuple {
    constructor(registry, Type, value, rangeName = 'Range') {
      super(registry, {
        end: Type,
        start: Type
      }, value);
      Object.defineProperty(this, _rangeName, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _rangeName)[_rangeName] = rangeName;
    }
    static with(Types) {
      return class extends Range {
        constructor(registry, value) {
          super(registry, Types, value);
        }
      };
    }
    get start() {
      return this[0];
    }
    get end() {
      return this[1];
    }
    toRawType() {
      return `${_classPrivateFieldBase(this, _rangeName)[_rangeName]}<${this.start.toRawType()}>`;
    }
  }
  class RangeInclusive extends Range {
    constructor(registry, type, value) {
      super(registry, type, value, 'RangeInclusive');
    }
    static with(Types) {
      return class extends RangeInclusive {
        constructor(registry, value) {
          super(registry, Types, value);
        }
      };
    }
  }

  class Raw extends Uint8Array {
    constructor(registry, value, initialU8aLength) {
      super(u8aToU8a$1(value));
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.initialU8aLength = void 0;
      this.registry = registry;
      this.initialU8aLength = initialU8aLength;
    }
    get encodedLength() {
      return this.length;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isAscii() {
      return isAscii(this);
    }
    get isEmpty() {
      return !this.length || isUndefined(this.find(b => !!b));
    }
    get isUtf8() {
      return isUtf8(this);
    }
    get length() {
      return super.length;
    }
    bitLength() {
      return this.length * 8;
    }
    eq(other) {
      if (other instanceof Uint8Array) {
        return this.length === other.length && !this.some((b, index) => b !== other[index]);
      }
      return this.eq(u8aToU8a$1(other));
    }
    slice(start, end) {
      return Uint8Array.from(this).slice(start, end);
    }
    subarray(begin, end) {
      return Uint8Array.from(this).subarray(begin, end);
    }
    toHex() {
      return u8aToHex$1(this);
    }
    toHuman() {
      if (this.isAscii) {
        const text = this.toUtf8();
        if (isAscii(text)) {
          return text;
        }
      }
      return this.toJSON();
    }
    toJSON() {
      return this.toHex();
    }
    toRawType() {
      return 'Raw';
    }
    toString() {
      return this.toHex();
    }
    toU8a(isBare) {
      return Uint8Array.from(this);
    }
    toUtf8() {
      assert$h(this.isUtf8, 'The character sequence is not a valid Utf8 string');
      return u8aToString$1(this);
    }
  }

  class Result extends Enum {
    constructor(registry, Ok, Err, value) {
      super(registry, {
        Ok,
        Err
      }, value);
    }
    static with(Types) {
      return class extends Result {
        constructor(registry, value) {
          super(registry, Types.Ok, Types.Err, value);
        }
      };
    }
    get asErr() {
      assert$h(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');
      return this.value;
    }
    get asError() {
      return this.asErr;
    }
    get asOk() {
      assert$h(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');
      return this.value;
    }
    get isEmpty() {
      return this.isOk && this.value.isEmpty;
    }
    get isErr() {
      return !this.isOk;
    }
    get isError() {
      return this.isErr;
    }
    get isOk() {
      return this.index === 0;
    }
    toRawType() {
      const Types = this._toRawStruct();
      return `Result<${Types.Ok},${Types.Err}>`;
    }
  }

  function encodeSet(setValues, values) {
    const encoded = new BN$8(0);
    for (let i = 0; i < values.length; i++) {
      encoded.ior(bnToBn$1(setValues[values[i]] || 0));
    }
    return encoded;
  }
  function decodeSetArray(setValues, values) {
    const result = new Array(values.length);
    for (let i = 0; i < values.length; i++) {
      const key = values[i];
      assert$h(!isUndefined(setValues[key]), () => `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
      result[i] = key;
    }
    return result;
  }
  function decodeSetNumber(setValues, _value) {
    const bn = bnToBn$1(_value);
    const keys = Object.keys(setValues);
    const result = [];
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (bn.and(bnToBn$1(setValues[key])).eq(bnToBn$1(setValues[key]))) {
        result.push(key);
      }
    }
    const computed = encodeSet(setValues, result);
    assert$h(bn.eq(computed), () => `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
    return result;
  }
  function decodeSet(setValues, value = 0, bitLength) {
    assert$h(bitLength % 8 === 0, () => `Expected valid bitLength, power of 8, found ${bitLength}`);
    const byteLength = bitLength / 8;
    if (isU8a$1(value)) {
      return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {
        isLe: true
      }));
    } else if (isString$1(value)) {
      return decodeSet(setValues, u8aToU8a$1(value), byteLength);
    } else if (value instanceof Set || Array.isArray(value)) {
      const input = Array.isArray(value) ? value : [...value.values()];
      return decodeSetArray(setValues, input);
    }
    return decodeSetNumber(setValues, value);
  }
  var _allowed = _classPrivateFieldKey("allowed");
  var _byteLength = _classPrivateFieldKey("byteLength");
  class CodecSet extends Set {
    constructor(registry, setValues, value, bitLength = 8) {
      super(decodeSet(setValues, value, bitLength));
      this.registry = void 0;
      this.createdAtHash = void 0;
      Object.defineProperty(this, _allowed, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _byteLength, {
        writable: true,
        value: void 0
      });
      this.add = key => {
        assert$h(isUndefined(_classPrivateFieldBase(this, _allowed)[_allowed]) || !isUndefined(_classPrivateFieldBase(this, _allowed)[_allowed][key]), () => `Set: Invalid key '${key}' on add`);
        super.add(key);
        return this;
      };
      this.registry = registry;
      _classPrivateFieldBase(this, _allowed)[_allowed] = setValues;
      _classPrivateFieldBase(this, _byteLength)[_byteLength] = bitLength / 8;
    }
    static with(values, bitLength) {
      const keys = Object.keys(values);
      const isKeys = new Array(keys.length);
      for (let i = 0; i < keys.length; i++) {
        isKeys[i] = `is${stringUpperFirst(stringCamelCase(keys[i]))}`;
      }
      return class extends CodecSet {
        constructor(registry, value) {
          super(registry, values, value, bitLength);
          objectProperties(this, isKeys, (_, i) => this.strings.includes(keys[i]));
        }
      };
    }
    get encodedLength() {
      return _classPrivateFieldBase(this, _byteLength)[_byteLength];
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.size === 0;
    }
    get strings() {
      return [...super.values()];
    }
    get valueEncoded() {
      return encodeSet(_classPrivateFieldBase(this, _allowed)[_allowed], this.strings);
    }
    eq(other) {
      if (Array.isArray(other)) {
        return compareArray(this.strings.sort(), other.sort());
      } else if (other instanceof Set) {
        return this.eq([...other.values()]);
      } else if (isNumber$1(other) || isBn(other)) {
        return this.valueEncoded.eq(bnToBn$1(other));
      }
      return false;
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.strings;
    }
    toNumber() {
      return this.valueEncoded.toNumber();
    }
    toRawType() {
      return stringify({
        _set: _classPrivateFieldBase(this, _allowed)[_allowed]
      });
    }
    toString() {
      return `[${this.strings.join(', ')}]`;
    }
    toU8a(isBare) {
      return bnToU8a$1(this.valueEncoded, {
        bitLength: _classPrivateFieldBase(this, _byteLength)[_byteLength] * 8,
        isLe: true
      });
    }
  }

  class UInt extends AbstractInt {
    static with(bitLength, typeName) {
      return class extends UInt {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
  }

  function decodeU8aFixed(value, bitLength) {
    if (isU8a$1(value)) {
      const byteLength = bitLength / 8;
      if (!value || !value.length) {
        return [new Uint8Array(byteLength), 0];
      }
      assert$h(value.length >= byteLength, () => `Expected at least ${byteLength} bytes (${bitLength} bits), found ${value.length} bytes`);
      return [value.subarray(0, byteLength), byteLength];
    }
    return decodeU8aFixed(u8aToU8a$1(value), bitLength);
  }
  class U8aFixed extends Raw {
    constructor(registry, value = new Uint8Array(), bitLength = 256) {
      const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
      super(registry, u8a, decodedLength);
    }
    static with(bitLength, typeName) {
      return class extends U8aFixed {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }
        toRawType() {
          return typeName || super.toRawType();
        }
      };
    }
    toRawType() {
      return `[u8;${this.length}]`;
    }
  }

  function decodeVecFixed(registry, Type, length, value) {
    const [values,, decodedLengthNoOffset] = decodeVec(registry, Type, value, length);
    while (values.length < length) {
      values.push(new Type(registry));
    }
    assert$h(values.length === length, () => `Expected a length of exactly ${length} entries`);
    return [values, decodedLengthNoOffset];
  }
  var _Type = _classPrivateFieldKey("Type");
  class VecFixed extends AbstractArray {
    constructor(registry, Type, length, value = []) {
      const Clazz = typeToConstructor(registry, Type);
      const [values, decodedLength] = decodeVecFixed(registry, Clazz, length, value);
      super(registry, values, decodedLength);
      Object.defineProperty(this, _Type, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _Type)[_Type] = Clazz;
    }
    static with(Type, length) {
      return class extends VecFixed {
        constructor(registry, value) {
          super(registry, Type, length, value);
        }
      };
    }
    get Type() {
      return new (_classPrivateFieldBase(this, _Type)[_Type])(this.registry).toRawType();
    }
    get encodedLength() {
      let total = 0;
      for (let i = 0; i < this.length; i++) {
        total += this[i].encodedLength;
      }
      return total;
    }
    toU8a() {
      const encoded = new Array(this.length);
      for (let i = 0; i < this.length; i++) {
        encoded[i] = this[i].toU8a();
      }
      return encoded.length ? u8aConcat$1(...encoded) : new Uint8Array([]);
    }
    toRawType() {
      return `[${this.Type};${this.length}]`;
    }
  }

  class Base$3 {
    constructor(registry, value, initialU8aLength) {
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.initialU8aLength = void 0;
      this._raw = void 0;
      this.registry = registry;
      this._raw = value;
      this.initialU8aLength = initialU8aLength;
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this._raw.isEmpty;
    }
    eq(other) {
      return this._raw.eq(other);
    }
    toHex(isLe) {
      return this._raw.toHex(isLe);
    }
    toHuman(isExtended) {
      return this._raw.toHuman(isExtended);
    }
    toJSON() {
      return this._raw.toJSON();
    }
    toString() {
      return this._raw.toString();
    }
    toU8a(isBare) {
      return this._raw.toU8a(isBare);
    }
    toRawType() {
      return 'Base';
    }
  }

  function decodeRaw(registry, Type, value) {
    const Clazz = typeToConstructor(registry, Type);
    if (isU8a$1(value)) {
      const [, u8a] = compactStripLength(value);
      return new Clazz(registry, u8a);
    }
    return new Clazz(registry, value);
  }
  class WrapperOpaque extends Base$3 {
    constructor(registry, Type, value) {
      super(registry, decodeRaw(registry, Type, value));
    }
    static with(Type) {
      return class extends WrapperOpaque {
        constructor(registry, value) {
          super(registry, Type, value);
        }
      };
    }
    toRawType() {
      return `WrapperOpaque<${this._raw.toRawType()}>`;
    }
    toU8a(isBare) {
      const u8a = super.toU8a(isBare);
      return isBare ? u8a : compactAddLength(u8a);
    }
    unwrap() {
      return this._raw;
    }
  }

  function decodeBitVecU8a(value) {
    if (!value || !value.length) {
      return [0, new Uint8Array()];
    }
    const [offset, length] = compactFromU8a(value);
    const total = offset + Math.ceil(length.toNumber() / 8);
    assert$h(total <= value.length, () => `BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
    return [length.toNumber(), value.subarray(offset, total)];
  }
  function decodeBitVec(value) {
    if (Array.isArray(value) || isString$1(value)) {
      const u8a = u8aToU8a$1(value);
      return [u8a.length / 8, u8a];
    }
    return decodeBitVecU8a(value);
  }
  class BitVec extends Raw {
    constructor(registry, value) {
      const [decodedLength, u8a] = decodeBitVec(value);
      super(registry, u8a);
      this._decodedLength = void 0;
      this._decodedLength = decodedLength;
    }
    get encodedLength() {
      return this.length + compactToU8a(this._decodedLength).length;
    }
    toHuman() {
      return `0b${[...this.toU8a(true)].map(d => `00000000${d.toString(2)}`.slice(-8)).join('_')}`;
    }
    toRawType() {
      return 'BitVec';
    }
    toU8a(isBare) {
      const bitVec = super.toU8a();
      return isBare ? bitVec : u8aConcat$1(compactToU8a(this._decodedLength), bitVec);
    }
  }

  function decodeBool(value) {
    if (isU8a$1(value)) {
      return value[0] === 1;
    } else if (value instanceof Boolean) {
      return value.valueOf();
    }
    return !!value;
  }
  class bool extends Boolean {
    constructor(registry, value = false) {
      super(decodeBool(value));
      this.registry = void 0;
      this.createdAtHash = void 0;
      this.registry = registry;
    }
    get encodedLength() {
      return 1;
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.isFalse;
    }
    get isFalse() {
      return !this.isTrue;
    }
    get isTrue() {
      return this.valueOf();
    }
    eq(other) {
      return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.valueOf();
    }
    toRawType() {
      return 'bool';
    }
    toString() {
      return this.toJSON().toString();
    }
    toU8a(isBare) {
      return new Uint8Array([this.valueOf() ? 1 : 0]);
    }
  }

  const MAX_LENGTH$1 = 10 * 1024 * 1024;
  function decodeBytesU8a(value) {
    if (!value.length) {
      return [new Uint8Array(), 0];
    }
    const [offset, length] = compactFromU8a(value);
    const total = offset + length.toNumber();
    assert$h(length.lten(MAX_LENGTH$1), () => `Bytes length ${length.toString()} exceeds ${MAX_LENGTH$1}`);
    assert$h(total <= value.length, () => `Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
    return [value.subarray(offset, total), total];
  }
  function decodeBytes(value) {
    if (Array.isArray(value) || isString$1(value)) {
      return [u8aToU8a$1(value), 0];
    } else if (!(value instanceof Raw) && isU8a$1(value)) {
      return decodeBytesU8a(value);
    }
    return [value, 0];
  }
  class Bytes extends Raw {
    constructor(registry, value) {
      const [u8a, decodedLength] = decodeBytes(value);
      super(registry, u8a, decodedLength);
    }
    get encodedLength() {
      return this.length + compactToU8a(this.length).length;
    }
    toRawType() {
      return 'Bytes';
    }
    toU8a(isBare) {
      return isBare ? super.toU8a(isBare) : compactAddLength(this);
    }
  }

  function decodeDataU8a(registry, value) {
    const indicator = value[0];
    if (!indicator) {
      return [undefined, undefined];
    } else if (indicator >= 1 && indicator <= 33) {
      const length = indicator - 1;
      const data = value.subarray(1, length + 1);
      return [registry.createType('Raw', data), 1];
    } else if (indicator >= 34 && indicator <= 37) {
      return [value.subarray(1, 32 + 1), indicator - 32];
    }
    throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
  }
  function decodeData(registry, value) {
    if (isU8a$1(value) || isString$1(value)) {
      return decodeDataU8a(registry, u8aToU8a$1(value));
    } else if (!value) {
      return [undefined, undefined];
    }
    return [value, undefined];
  }
  class Data extends Enum {
    constructor(registry, value) {
      super(registry, {
        None: 'Null',
        Raw: 'Bytes',
        BlakeTwo256: 'H256',
        Sha256: 'H256',
        Keccak256: 'H256',
        ShaThree256: 'H256'
      }, ...decodeData(registry, value));
      assert$h(!this.isRaw || this.asRaw.length <= 32, 'Data.Raw values are limited to a maximum length of 32 bytes');
    }
    get asBlakeTwo256() {
      return this.value;
    }
    get asKeccak256() {
      return this.value;
    }
    get asRaw() {
      return this.value;
    }
    get asSha256() {
      return this.value;
    }
    get asShaThree256() {
      return this.value;
    }
    get isBlakeTwo256() {
      return this.index === 2;
    }
    get isKeccak256() {
      return this.index === 4;
    }
    get isNone() {
      return this.index === 0;
    }
    get isRaw() {
      return this.index === 1;
    }
    get isSha256() {
      return this.index === 3;
    }
    get isShaThree256() {
      return this.index === 5;
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    toU8a() {
      if (this.index === 0) {
        return new Uint8Array(1);
      } else if (this.index === 1) {
        const data = this.value.toU8a(true);
        const length = Math.min(data.length, 32);
        const u8a = new Uint8Array(length + 1);
        u8a.set([length + 1], 0);
        u8a.set(data.subarray(0, length), 1);
        return u8a;
      }
      const u8a = new Uint8Array(33);
      u8a.set([this.index + 32], 0);
      u8a.set(this.value.toU8a(), 1);
      return u8a;
    }
  }

  class i8 extends Int.with(8) {
    constructor(...args) {
      super(...args);
      this.__IntType = 'i8';
    }
  }

  class i16 extends Int.with(16) {
    constructor(...args) {
      super(...args);
      this.__IntType = 'i16';
    }
  }

  class i32 extends Int.with(32) {
    constructor(...args) {
      super(...args);
      this.__IntType = 'i32';
    }
  }

  class i64 extends Int.with(64) {
    constructor(...args) {
      super(...args);
      this.__IntType = 'i64';
    }
  }

  class i128 extends Int.with(128) {
    constructor(...args) {
      super(...args);
      this.__IntType = 'i128';
    }
  }

  class i256 extends Int.with(256) {
    constructor(...args) {
      super(...args);
      this.__IntType = 'i256';
    }
  }

  function flattenUniq(list, result = []) {
    for (let i = 0; i < list.length; i++) {
      const entry = list[i];
      if (Array.isArray(entry)) {
        flattenUniq(entry, result);
      } else {
        result.push(entry);
      }
    }
    return [...new Set(result)];
  }

  function getSiName(lookup, type) {
    const typeDef = lookup.getTypeDef(type);
    return typeDef.lookupName || typeDef.type;
  }

  const BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];
  const ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Option', 'UInt', 'WrapperOpaque']);
  const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' '];
  const mappings = [
  alias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false),
  cleanupCompact(),
  removeExtensions('Bounded', true),
  removeExtensions('Weak', false),
  removeTraits(),
  removePairOf(),
  removeWrap('Box<'),
  removeGenerics(),
  alias('String', 'Text'),
  alias('Vec<u8>', 'Bytes'), alias('&\\[u8\\]', 'Bytes'), alias("&'static\\[u8\\]", 'Bytes'),
  alias('RawAddress', 'Address'),
  alias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'),
  alias('exec::StorageKey', 'ContractStorageKey'),
  flattenSingleTuple(),
  removeColons()];
  function findClosing(value, start) {
    let depth = 0;
    for (let index = start; index < value.length; index++) {
      if (value[index] === '>') {
        if (!depth) {
          return index;
        }
        depth--;
      } else if (value[index] === '<') {
        depth++;
      }
    }
    throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
  }
  function alias(src, dest, withChecks = true) {
    const from = new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\${box}${src}`).join('|')})`, 'g');
    const to = src => {
      from.lastIndex = 0;
      return withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest;
    };
    return value => value.replace(from, to);
  }
  function cleanupCompact() {
    return value => {
      for (let index = 0; index < value.length; index++) {
        if (value[index] === '<') {
          const end = findClosing(value, index + 1) - 14;
          if (value.substr(end, 14) === ' as HasCompact') {
            value = `Compact<${value.substr(index + 1, end - index - 1)}>`;
          }
        }
      }
      return value;
    };
  }
  function flattenSingleTuple() {
    const from1 = /,\)/g;
    const from2 = /\(([^,]+)\)/;
    return value => {
      from1.lastIndex = 0;
      return value
      .replace(from1, ')')
      .replace(from2, '$1');
    };
  }
  function replaceTagWith(value, matcher, replacer) {
    let index = -1;
    while (true) {
      index = value.indexOf(matcher, index + 1);
      if (index === -1) {
        return value;
      }
      const start = index + matcher.length;
      const end = findClosing(value, start);
      value = `${value.substr(0, index)}${replacer(value.substr(start, end - start))}${value.substr(end + 1)}`;
    }
  }
  function removeExtensions(type, isSized) {
    return value => BOUNDED.reduce((value, tag) => replaceTagWith(value, `${type}${tag}<`, inner => {
      const parts = inner.split(',').map(s => s.trim()).filter(s => s);
      if (isSized) {
        parts.pop();
      }
      return `${tag}<${parts.join(',')}>`;
    }), value);
  }
  function removeColons() {
    return (value, {
      allowNamespaces
    } = {}) => {
      let index = 0;
      while (index !== -1) {
        index = value.indexOf('::');
        if (index === 0) {
          value = value.substr(2);
        } else if (index !== -1) {
          if (allowNamespaces) {
            return value;
          }
          let start = index;
          while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
            start--;
          }
          value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;
        }
      }
      return value;
    };
  }
  function removeGenerics() {
    return value => {
      for (let index = 0; index < value.length; index++) {
        if (value[index] === '<') {
          const box = ALLOWED_BOXES.find(box => {
            const start = index - box.length;
            return start >= 0 && value.substr(start, box.length) === box && (
            start === 0 || BOX_PRECEDING.includes(value[start - 1]));
          });
          if (!box) {
            const end = findClosing(value, index + 1);
            value = `${value.substr(0, index)}${value.substr(end + 1)}`;
          }
        }
      }
      return value;
    };
  }
  function removePairOf() {
    const replacer = inner => `(${inner},${inner})`;
    return value => replaceTagWith(value, 'PairOf<', replacer);
  }
  function removeTraits() {
    const from1 = /\s/g;
    const from2 = /(T|Self)::/g;
    const from3 = /<(T|Self)asTrait>::/g;
    const from4 = /<Tas[a-z]+::Trait>::/g;
    const from5 = /<LookupasStaticLookup>/g;
    const from6 = /::Type/g;
    return value => {
      from1.lastIndex = 0;
      from2.lastIndex = 0;
      from3.lastIndex = 0;
      from4.lastIndex = 0;
      from5.lastIndex = 0;
      from6.lastIndex = 0;
      return value
      .replace(from1, '')
      .replace(from2, '')
      .replace(from3, '')
      .replace(from4, '')
      .replace(from5, 'Lookup')
      .replace(from6, '');
    };
  }
  function removeWrap(check) {
    const replacer = inner => inner;
    return value => replaceTagWith(value, check, replacer);
  }
  const sanitizeMap = new Map();
  function sanitize(value, options) {
    let result = value.toString();
    if (!options) {
      const memoized = sanitizeMap.get(result);
      if (memoized) {
        return memoized;
      }
    }
    for (let i = 0; i < mappings.length; i++) {
      result = mappings[i](result, options);
    }
    result = result.trim();
    if (!options) {
      sanitizeMap.set(value.toString(), result);
    }
    return result;
  }

  exports.TypeDefInfo = void 0;
  (function (TypeDefInfo) {
    TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
    TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
    TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
    TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
    TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
    TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
    TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
    TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
    TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
    TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
    TypeDefInfo[TypeDefInfo["Result"] = 12] = "Result";
    TypeDefInfo[TypeDefInfo["Set"] = 13] = "Set";
    TypeDefInfo[TypeDefInfo["Si"] = 14] = "Si";
    TypeDefInfo[TypeDefInfo["Struct"] = 15] = "Struct";
    TypeDefInfo[TypeDefInfo["Tuple"] = 16] = "Tuple";
    TypeDefInfo[TypeDefInfo["UInt"] = 17] = "UInt";
    TypeDefInfo[TypeDefInfo["Vec"] = 18] = "Vec";
    TypeDefInfo[TypeDefInfo["VecFixed"] = 19] = "VecFixed";
    TypeDefInfo[TypeDefInfo["WrapperOpaque"] = 20] = "WrapperOpaque";
  })(exports.TypeDefInfo || (exports.TypeDefInfo = {}));

  function isNotNested(...counters) {
    return !counters.some(counter => counter !== 0);
  }
  function typeSplit(type) {
    let [cDepth, fDepth, sDepth, tDepth, start] = [0, 0, 0, 0, 0];
    const result = [];
    const extract = index => {
      if (isNotNested(cDepth, fDepth, sDepth, tDepth)) {
        result.push(type.substr(start, index - start).trim());
        start = index + 1;
      }
    };
    for (let index = 0; index < type.length; index++) {
      switch (type[index]) {
        case ',':
          extract(index);
          break;
        case '<':
          cDepth++;
          break;
        case '>':
          cDepth--;
          break;
        case '[':
          fDepth++;
          break;
        case ']':
          fDepth--;
          break;
        case '{':
          sDepth++;
          break;
        case '}':
          sDepth--;
          break;
        case '(':
          tDepth++;
          break;
        case ')':
          tDepth--;
          break;
      }
    }
    assert$h(isNotNested(cDepth, fDepth, sDepth, tDepth), () => `Invalid definition (missing terminators) found in ${type}`);
    result.push(type.substr(start, type.length - start).trim());
    return result;
  }

  const MAX_NESTED = 64;
  const KNOWN_INTERNALS = ['_alias', '_fallback'];
  function getTypeString(typeOrObj) {
    return isString$1(typeOrObj) ? typeOrObj.toString() : JSON.stringify(typeOrObj);
  }
  function isRustEnum(details) {
    const values = Object.values(details);
    if (values.some(v => isNumber$1(v))) {
      assert$h(values.every(v => isNumber$1(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
      return false;
    }
    return true;
  }
  function _decodeEnum(value, details, count) {
    value.info = exports.TypeDefInfo.Enum;
    if (Array.isArray(details)) {
      value.sub = details.map((name, index) => ({
        index,
        info: exports.TypeDefInfo.Plain,
        name,
        type: 'Null'
      }));
    } else if (isRustEnum(details)) {
      value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread$1({}, getTypeDef(getTypeString(typeOrObj || 'Null'), {
        name
      }, count), {
        index
      }));
    } else {
      value.sub = Object.entries(details).map(([name, index]) => ({
        index,
        info: exports.TypeDefInfo.Plain,
        name,
        type: 'Null'
      }));
    }
    return value;
  }
  function _decodeSet(value, details) {
    value.info = exports.TypeDefInfo.Set;
    value.length = details._bitLength;
    value.sub = Object.entries(details).filter(([name]) => !name.startsWith('_')).map(([name, index]) => ({
      index,
      info: exports.TypeDefInfo.Plain,
      name,
      type: 'Null'
    }));
    return value;
  }
  function _decodeStruct(value, type, _, count) {
    const parsed = JSON.parse(type);
    const keys = Object.keys(parsed);
    if (keys.length === 1 && keys[0] === '_enum') {
      return _decodeEnum(value, parsed[keys[0]], count);
    } else if (keys.length === 1 && keys[0] === '_set') {
      return _decodeSet(value, parsed[keys[0]]);
    }
    value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : undefined;
    value.fallbackType = parsed._fallback;
    value.sub = keys.filter(name => !KNOWN_INTERNALS.includes(name)).map(name => getTypeDef(getTypeString(parsed[name]), {
      name
    }, count));
    return value;
  }
  function _decodeFixedVec(value, type, _, count) {
    const max = type.length - 1;
    let index = -1;
    let inner = 0;
    for (let i = 1; i < max && index === -1; i++) {
      if (type[i] === ';' && inner === 0) {
        index = i;
      } else if (['[', '(', '<'].includes(type[i])) {
        inner++;
      } else if ([']', ')', '>'].includes(type[i])) {
        inner--;
      }
    }
    assert$h(index !== -1, () => `${type}: Unable to extract location of ';'`);
    const vecType = type.substr(1, index - 1);
    const [strLength, displayName] = type.substr(index + 1, max - index - 1).split(';');
    const length = parseInt(strLength.trim(), 10);
    assert$h(length <= 256, () => `${type}: Only support for [Type; <length>], where length <= 256`);
    value.displayName = displayName;
    value.length = length;
    value.sub = getTypeDef(vecType, {}, count);
    return value;
  }
  function _decodeRange(value, _, subType) {
    const Type = getTypeDef(subType);
    value.sub = [Type, Type];
    return value;
  }
  function _decodeTuple(value, _, subType, count) {
    value.sub = subType.length === 0 ? [] : typeSplit(subType).map(inner => getTypeDef(inner, {}, count));
    return value;
  }
  function _decodeAnyInt(value, type, _, clazz) {
    const [strLength, displayName] = type.substr(clazz.length + 1, type.length - clazz.length - 1 - 1).split(',');
    const length = parseInt(strLength.trim(), 10);
    assert$h(length <= 8192 && length % 8 === 0, () => `${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
    value.displayName = displayName;
    value.length = length;
    return value;
  }
  function _decodeInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'Int');
  }
  function _decodeUInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'UInt');
  }
  function _decodeDoNotConstruct(value, type, _) {
    const NAME_LENGTH = 'DoNotConstruct'.length;
    value.displayName = type.substr(NAME_LENGTH + 1, type.length - NAME_LENGTH - 1 - 1);
    return value;
  }
  function hasWrapper(type, [start, end]) {
    return type.substr(0, start.length) === start && type.substr(-1 * end.length) === end;
  }
  const nestedExtraction = [['[', ']', exports.TypeDefInfo.VecFixed, _decodeFixedVec], ['{', '}', exports.TypeDefInfo.Struct, _decodeStruct], ['(', ')', exports.TypeDefInfo.Tuple, _decodeTuple],
  ['BTreeMap<', '>', exports.TypeDefInfo.BTreeMap, _decodeTuple], ['HashMap<', '>', exports.TypeDefInfo.HashMap, _decodeTuple], ['Int<', '>', exports.TypeDefInfo.Int, _decodeInt],
  ['Range<', '>', exports.TypeDefInfo.Tuple, _decodeRange], ['RangeInclusive<', '>', exports.TypeDefInfo.Tuple, _decodeRange], ['Result<', '>', exports.TypeDefInfo.Result, _decodeTuple], ['UInt<', '>', exports.TypeDefInfo.UInt, _decodeUInt], ['DoNotConstruct<', '>', exports.TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]];
  const wrappedExtraction = [['BTreeSet<', '>', exports.TypeDefInfo.BTreeSet], ['Compact<', '>', exports.TypeDefInfo.Compact], ['Linkage<', '>', exports.TypeDefInfo.Linkage], ['Option<', '>', exports.TypeDefInfo.Option], ['Vec<', '>', exports.TypeDefInfo.Vec], ['WrapperOpaque<', '>', exports.TypeDefInfo.WrapperOpaque]];
  function extractSubType(type, [start, end]) {
    return type.substr(start.length, type.length - start.length - end.length);
  }
  function getTypeDef(_type, {
    displayName,
    name
  } = {}, count = 0) {
    const type = sanitize(_type);
    const value = {
      displayName,
      info: exports.TypeDefInfo.Plain,
      name,
      type
    };
    assert$h(++count !== MAX_NESTED, 'getTypeDef: Maximum nested limit reached');
    const nested = nestedExtraction.find(nested => hasWrapper(type, nested));
    if (nested) {
      value.info = nested[2];
      return nested[3](value, type, extractSubType(type, nested), count);
    }
    const wrapped = wrappedExtraction.find(wrapped => hasWrapper(type, wrapped));
    if (wrapped) {
      value.info = wrapped[2];
      value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }
    return value;
  }

  function extractSubSingle({
    lookupName,
    type
  }) {
    return extractTypes$1([lookupName || type]);
  }
  function extractSubArray(types) {
    return extractTypes$1(types.map(({
      lookupName,
      type
    }) => lookupName || type));
  }
  function extractTypes$1(types) {
    return types.map(type => {
      const decoded = getTypeDef(type);
      switch (decoded.info) {
        case exports.TypeDefInfo.Plain:
          return decoded.lookupName || decoded.type;
        case exports.TypeDefInfo.BTreeSet:
        case exports.TypeDefInfo.Compact:
        case exports.TypeDefInfo.Option:
        case exports.TypeDefInfo.Vec:
        case exports.TypeDefInfo.VecFixed:
        case exports.TypeDefInfo.WrapperOpaque:
          return extractSubSingle(decoded.sub);
        case exports.TypeDefInfo.BTreeMap:
        case exports.TypeDefInfo.Enum:
        case exports.TypeDefInfo.HashMap:
        case exports.TypeDefInfo.Result:
        case exports.TypeDefInfo.Set:
        case exports.TypeDefInfo.Struct:
        case exports.TypeDefInfo.Tuple:
          return extractSubArray(decoded.sub);
        default:
          throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${exports.TypeDefInfo[decoded.info]})`);
      }
    });
  }

  const l$1 = logger('metadata');
  function validateTypes(registry, throwError, types) {
    const missing = flattenUniq(extractTypes$1(types)).filter(type => !registry.hasType(type)).sort();
    if (missing.length !== 0) {
      const message = `Unknown types found, no types for ${missing.join(', ')}`;
      if (throwError) {
        throw new Error(message);
      } else {
        l$1.warn(message);
      }
    }
    return types;
  }

  function extractTypes(lookup, types) {
    return types.map(({
      type
    }) => lookup.getTypeDef(type).type);
  }
  function extractFieldTypes(lookup, type) {
    return lookup.getSiType(type).def.asVariant.variants.map(({
      fields
    }) => extractTypes(lookup, fields));
  }
  function getPalletNames({
    lookup,
    pallets
  }) {
    return pallets.reduce((all, {
      calls,
      constants,
      events,
      storage
    }) => {
      all.push([extractTypes(lookup, constants)]);
      if (calls.isSome) {
        all.push(extractFieldTypes(lookup, calls.unwrap().type));
      }
      if (events.isSome) {
        all.push(extractFieldTypes(lookup, events.unwrap().type));
      }
      if (storage.isSome) {
        all.push(storage.unwrap().items.map(({
          type
        }) => {
          if (type.isPlain) {
            return [lookup.getTypeDef(type.asPlain).type];
          }
          const {
            hashers,
            key,
            value
          } = type.asMap;
          return hashers.length === 1 ? [lookup.getTypeDef(value).type, lookup.getTypeDef(key).type] : [lookup.getTypeDef(value).type, ...lookup.getSiType(key).def.asTuple.map(t => lookup.getTypeDef(t).type)];
        }));
      }
      return all;
    }, []);
  }
  function getUniqTypes(registry, meta, throwError) {
    return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
  }

  function trimDocs(docs) {
    const strings = docs.map(d => d.toString().trim());
    const firstEmpty = strings.findIndex(d => !d.length);
    return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
  }
  function toCallsOnly(registry, {
    extrinsic,
    lookup,
    pallets
  }) {
    return registry.createType('MetadataLatest', {
      extrinsic,
      lookup: {
        types: lookup.types.map(({
          id,
          type
        }) => registry.createType('PortableType', {
          id,
          type: { ...type,
            docs: trimDocs(type.docs)
          }
        }))
      },
      pallets: pallets.map(({
        calls,
        index,
        name
      }) => ({
        calls: registry.createType('Option<PalletCallMetadataLatest>', calls.unwrapOr(null)),
        index,
        name
      }))
    }).toJSON();
  }

  const HASHER_MAP = {
    Blake2_128: [16, false],
    Blake2_128Concat: [16, true],
    Blake2_256: [32, false],
    Identity: [0, true],
    Twox128: [16, false],
    Twox256: [32, false],
    Twox64Concat: [8, true]
  };
  function unwrapStorageSi(type) {
    return type.isPlain ? type.asPlain : type.asMap.value;
  }
  function unwrapStorageType(registry, type, isOptional) {
    const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
    return isOptional ? `Option<${outputType}>` : outputType;
  }
  function decodeStorageKey(value) {
    if (isU8a$1(value) || !value || isString$1(value)) {
      return {
        key: value
      };
    } else if (value instanceof StorageKey) {
      return {
        key: value,
        method: value.method,
        section: value.section
      };
    } else if (isFunction$1(value)) {
      return {
        key: value(),
        method: value.method,
        section: value.section
      };
    } else if (Array.isArray(value)) {
      const [fn, args = []] = value;
      assert$h(isFunction$1(fn), 'Expected function input for key construction');
      if (fn.meta && fn.meta.type.isMap) {
        const map = fn.meta.type.asMap;
        assert$h(Array.isArray(args) && args.length === map.hashers.length, () => `Expected an array of ${map.hashers.length} values as params to a Map query`);
      }
      return {
        key: fn(...args),
        method: fn.method,
        section: fn.section
      };
    }
    throw new Error(`Unable to convert input ${value} to StorageKey`);
  }
  function decodeHashers(registry, value, hashers) {
    let offset = 32;
    const result = new Array(hashers.length);
    for (let i = 0; i < hashers.length; i++) {
      const [hasher, type] = hashers[i];
      const [hashLen, canDecode] = HASHER_MAP[hasher.type];
      const decoded = canDecode ? registry.createType(registry.createLookupType(type), value.subarray(offset + hashLen)) : registry.createType('Raw', value.subarray(offset, offset + hashLen));
      offset += hashLen + (canDecode ? decoded.encodedLength : 0);
      result[i] = decoded;
    }
    return result;
  }
  function decodeArgsFromMeta(registry, value, meta) {
    if (!meta || !meta.type.isMap) {
      return [];
    }
    const {
      hashers,
      key
    } = meta.type.asMap;
    const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
    return decodeHashers(registry, value, hashers.map((h, i) => [h, keys[i]]));
  }
  function getMeta(value) {
    if (value instanceof StorageKey) {
      return value.meta;
    } else if (isFunction$1(value)) {
      return value.meta;
    } else if (Array.isArray(value)) {
      const [fn] = value;
      return fn.meta;
    }
    return undefined;
  }
  function getType(registry, value) {
    if (value instanceof StorageKey) {
      return value.outputType;
    } else if (isFunction$1(value)) {
      return unwrapStorageType(registry, value.meta.type);
    } else if (Array.isArray(value)) {
      const [fn] = value;
      if (fn.meta) {
        return unwrapStorageType(registry, fn.meta.type);
      }
    }
    return 'Raw';
  }
  class StorageKey extends Bytes {
    constructor(registry, value, override = {}) {
      const {
        key,
        method,
        section
      } = decodeStorageKey(value);
      super(registry, key);
      this._args = void 0;
      this._meta = void 0;
      this._outputType = void 0;
      this._method = void 0;
      this._section = void 0;
      this._outputType = getType(registry, value);
      this.setMeta(getMeta(value), override.section || section, override.method || method);
    }
    get args() {
      return this._args;
    }
    get meta() {
      return this._meta;
    }
    get method() {
      return this._method;
    }
    get outputType() {
      return this._outputType;
    }
    get section() {
      return this._section;
    }
    is(key) {
      return key.section === this.section && key.method === this.method;
    }
    setMeta(meta, section, method) {
      this._meta = meta;
      this._method = method || this._method;
      this._section = section || this._section;
      if (meta) {
        this._outputType = unwrapStorageType(this.registry, meta.type);
      }
      try {
        this._args = decodeArgsFromMeta(this.registry, this.toU8a(true), this.meta);
      } catch (error) {
      }
      return this;
    }
    toHuman() {
      return this._args.length ? this._args.map(arg => arg.toHuman()) : super.toHuman();
    }
    toRawType() {
      return 'StorageKey';
    }
  }

  const MAX_LENGTH = 128 * 1024;
  function decodeText(value) {
    if (isU8a$1(value)) {
      if (!value.length) {
        return ['', 0];
      }
      if (value instanceof Raw) {
        return [u8aToString$1(value), 0];
      }
      const [offset, length] = compactFromU8a(value);
      const total = offset + length.toNumber();
      assert$h(length.lten(MAX_LENGTH), () => `Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);
      assert$h(total <= value.length, () => `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
      return [u8aToString$1(value.subarray(offset, total)), total];
    } else if (isHex$1(value)) {
      return [u8aToString$1(hexToU8a$1(value)), 0];
    }
    return [value ? value.toString() : '', 0];
  }
  var _initialU8aLength = _classPrivateFieldKey("initialU8aLength");
  var _override = _classPrivateFieldKey("override");
  class Text extends String {
    constructor(registry, value) {
      const [str, decodedLength] = decodeText(value);
      super(str);
      this.registry = void 0;
      this.createdAtHash = void 0;
      Object.defineProperty(this, _initialU8aLength, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _override, {
        writable: true,
        value: null
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _initialU8aLength)[_initialU8aLength] = decodedLength;
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get initialU8aLength() {
      return _classPrivateFieldBase(this, _initialU8aLength)[_initialU8aLength];
    }
    get hash() {
      return this.registry.hash(this.toU8a());
    }
    get isEmpty() {
      return this.length === 0;
    }
    get length() {
      return super.length;
    }
    eq(other) {
      return isString$1(other) ? this.toString() === other.toString() : false;
    }
    setOverride(override) {
      _classPrivateFieldBase(this, _override)[_override] = override;
    }
    toHex() {
      return u8aToHex$1(this.toU8a(true));
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.toString();
    }
    toRawType() {
      return 'Text';
    }
    toString() {
      return _classPrivateFieldBase(this, _override)[_override] || super.toString();
    }
    toU8a(isBare) {
      const encoded = stringToU8a$1(super.toString());
      return isBare ? encoded : compactAddLength(encoded);
    }
  }

  class Type extends Text {
    constructor(registry, value = '') {
      super(registry, value);
      this.setOverride(sanitize(this.toString()));
    }
    toRawType() {
      return 'Type';
    }
  }

  class u8$1 extends UInt.with(8) {
    constructor(...args) {
      super(...args);
      this.__UIntType = 'u8';
    }
  }

  class u16$1 extends UInt.with(16) {
    constructor(...args) {
      super(...args);
      this.__UIntType = 'u16';
    }
  }

  class u32$1 extends UInt.with(32) {
    constructor(...args) {
      super(...args);
      this.__UIntType = 'u32';
    }
  }

  class u64 extends UInt.with(64) {
    constructor(...args) {
      super(...args);
      this.__UIntType = 'u64';
    }
  }

  class u128 extends UInt.with(128) {
    constructor(...args) {
      super(...args);
      this.__UIntType = 'u128';
    }
  }

  class u256 extends UInt.with(256) {
    constructor(...args) {
      super(...args);
      this.__UIntType = 'u256';
    }
  }

  class usize extends u32$1 {
    constructor(registry, value) {
      super(registry, value);
      throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
    }
  }

  function getTypeDefType({
    lookupName,
    type
  }) {
    return lookupName || type;
  }
  function getSubDefArray(value) {
    assert$h(value.sub && Array.isArray(value.sub), () => `Expected subtype as TypeDef[] in ${stringify(value)}`);
    return value.sub;
  }
  function getSubDef(value) {
    assert$h(value.sub && !Array.isArray(value.sub), () => `Expected subtype as TypeDef in ${stringify(value)}`);
    return value.sub;
  }
  function getSubType(value) {
    return getTypeDefType(getSubDef(value));
  }
  function getTypeClassMap(value) {
    const subs = getSubDefArray(value);
    const map = {};
    for (let i = 0; i < subs.length; i++) {
      map[subs[i].name] = getTypeDefType(subs[i]);
    }
    return map;
  }
  function getTypeClassArray(value) {
    return getSubDefArray(value).map(getTypeDefType);
  }
  function createInt({
    displayName,
    length
  }, Clazz) {
    assert$h(isNumber$1(length), () => `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
    return Clazz.with(length, displayName);
  }
  function createHashMap(value, Clazz) {
    const [keyType, valueType] = getTypeClassArray(value);
    return Clazz.with(keyType, valueType);
  }
  const infoMapping = {
    [exports.TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, BTreeMap),
    [exports.TypeDefInfo.BTreeSet]: (registry, value) => BTreeSet.with(getSubType(value)),
    [exports.TypeDefInfo.Compact]: (registry, value) => Compact.with(getSubType(value)),
    [exports.TypeDefInfo.DoNotConstruct]: (registry, value) => DoNotConstruct.with(value.displayName || value.type),
    [exports.TypeDefInfo.Enum]: (registry, value) => {
      const subs = getSubDefArray(value);
      return Enum.with(subs.every(({
        type
      }) => type === 'Null') ? subs.reduce((out, {
        index,
        name
      }, count) => {
        out[name] = index || count;
        return out;
      }, {}) : getTypeClassMap(value));
    },
    [exports.TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, HashMap),
    [exports.TypeDefInfo.Int]: (registry, value) => createInt(value, Int),
    [exports.TypeDefInfo.Linkage]: (registry, value) => {
      const type = `Option<${getSubType(value)}>`;
      const Clazz = Struct.with({
        previous: type,
        next: type
      });
      Clazz.prototype.toRawType = function () {
        return `Linkage<${this.next.toRawType(true)}>`;
      };
      return Clazz;
    },
    [exports.TypeDefInfo.Null]: (registry, _) => Null,
    [exports.TypeDefInfo.Option]: (registry, value) => Option.with(getSubType(value)),
    [exports.TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
    [exports.TypeDefInfo.Range]: (registry, value) => (value.type.includes('RangeInclusive') ? RangeInclusive : Range).with(getSubType(value)),
    [exports.TypeDefInfo.Result]: (registry, value) => {
      const [Ok, Err] = getTypeClassArray(value);
      return Result.with({
        Err,
        Ok
      });
    },
    [exports.TypeDefInfo.Set]: (registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, {
      index,
      name
    }) => {
      result[name] = index;
      return result;
    }, {}), value.length),
    [exports.TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
    [exports.TypeDefInfo.Struct]: (registry, value) => Struct.with(getTypeClassMap(value), value.alias),
    [exports.TypeDefInfo.Tuple]: (registry, value) => Tuple.with(getTypeClassArray(value)),
    [exports.TypeDefInfo.UInt]: (registry, value) => createInt(value, UInt),
    [exports.TypeDefInfo.Vec]: (registry, {
      sub
    }) => {
      assert$h(sub && !Array.isArray(sub), 'Expected type information for vector');
      return sub.type === 'u8' ? Bytes : Vec.with(getTypeDefType(sub));
    },
    [exports.TypeDefInfo.VecFixed]: (registry, {
      displayName,
      length,
      sub
    }) => {
      assert$h(sub && isNumber$1(length) && !Array.isArray(sub), 'Expected length & type information for fixed vector');
      return sub.type === 'u8' ? U8aFixed.with(length * 8, displayName) : VecFixed.with(getTypeDefType(sub), length);
    },
    [exports.TypeDefInfo.WrapperOpaque]: (registry, value) => WrapperOpaque.with(getSubType(value))
  };
  function constructTypeClass(registry, typeDef) {
    try {
      const Type = infoMapping[typeDef.info](registry, typeDef);
      assert$h(Type, 'No class created');
      if (!Type.__fallbackType && typeDef.fallbackType) {
        Type.__fallbackType = typeDef.fallbackType;
      }
      return Type;
    } catch (error) {
      throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);
    }
  }
  function getTypeClass(registry, typeDef) {
    return registry.get(typeDef.type, false, typeDef);
  }
  function createClass(registry, type) {
    return getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type));
  }

  function checkInstance(created, matcher) {
    const u8a = created.toU8a();
    const rawType = created.toRawType();
    const isOk =
    u8aEq(u8a, matcher) ||
    ['Bytes', 'Text', 'Type'].includes(rawType) && matcher.length === created.length ||
    created.isEmpty && matcher.every(v => !v);
    assert$h(isOk, () => `${rawType}:: Decoded input doesn't match input, received ${u8aToHex$1(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex$1(u8a, 512)} (${u8a.length} bytes)`);
  }
  function checkPedantic(created, [value], isPedantic = false) {
    if (isPedantic) {
      if (isU8a$1(value)) {
        checkInstance(created, value);
      } else if (isHex$1(value)) {
        checkInstance(created, u8aToU8a$1(value));
      }
    }
  }
  function initType(registry, Type, params = [], {
    blockHash,
    isOptional,
    isPedantic
  } = {}) {
    const created = new (isOptional ? Option.with(Type) : Type)(registry, ...params);
    checkPedantic(created, params, isPedantic);
    if (blockHash) {
      created.createdAtHash = createType(registry, 'Hash', blockHash);
    }
    return created;
  }
  function createTypeUnsafe(registry, type, params = [], options = {}) {
    let Clazz = null;
    let firstError = null;
    try {
      Clazz = createClass(registry, type);
      return initType(registry, Clazz, params, options);
    } catch (error) {
      firstError = new Error(`createType(${type}):: ${error.message}`);
    }
    if (Clazz && Clazz.__fallbackType) {
      try {
        Clazz = createClass(registry, Clazz.__fallbackType);
        return initType(registry, Clazz, params, options);
      } catch {
      }
    }
    throw firstError;
  }
  function createType(registry, type, ...params) {
    return createTypeUnsafe(registry, type, params);
  }

  const stringIdentity = value => value.toString();
  const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];
  function paramsNotation(outer, inner, transform = stringIdentity) {
    return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>` : ''}`;
  }
  function encodeWithParams(registry, typeDef, outer) {
    const {
      info,
      sub
    } = typeDef;
    switch (info) {
      case exports.TypeDefInfo.BTreeMap:
      case exports.TypeDefInfo.BTreeSet:
      case exports.TypeDefInfo.Compact:
      case exports.TypeDefInfo.HashMap:
      case exports.TypeDefInfo.Linkage:
      case exports.TypeDefInfo.Option:
      case exports.TypeDefInfo.Result:
      case exports.TypeDefInfo.Vec:
      case exports.TypeDefInfo.WrapperOpaque:
        return paramsNotation(outer, sub, p => encodeTypeDef(registry, p));
    }
    throw new Error(`Unable to encode ${stringify(typeDef)} with params`);
  }
  function encodeSubTypes(registry, sub, asEnum, extra) {
    const names = sub.map(({
      name
    }) => name);
    assert$h(names.every(n => !!n), () => `Subtypes does not have consistent names, ${names.join(', ')}`);
    const inner = objectSpread$1({}, extra);
    for (let i = 0; i < sub.length; i++) {
      const def = sub[i];
      inner[def.name] = encodeTypeDef(registry, def);
    }
    return stringify(asEnum ? {
      _enum: inner
    } : inner);
  }
  const encoders = {
    [exports.TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),
    [exports.TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),
    [exports.TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),
    [exports.TypeDefInfo.DoNotConstruct]: (registry, {
      displayName,
      lookupIndex,
      lookupName
    }) => `DoNotConstruct<${lookupName || displayName || (isUndefined(lookupIndex) ? 'Unknown' : registry.createLookupType(lookupIndex))}>`,
    [exports.TypeDefInfo.Enum]: (registry, {
      sub
    }) => {
      assert$h(sub && Array.isArray(sub), 'Unable to encode Enum type');
      return sub.every(({
        type
      }) => type === 'Null') ? stringify({
        _enum: sub.map(({
          name
        }, index) => `${name || `Empty${index}`}`)
      }) : encodeSubTypes(registry, sub, true);
    },
    [exports.TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),
    [exports.TypeDefInfo.Int]: (registry, {
      length = 32
    }) => `Int<${length}>`,
    [exports.TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),
    [exports.TypeDefInfo.Null]: (registry, typeDef) => 'Null',
    [exports.TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),
    [exports.TypeDefInfo.Plain]: (registry, {
      displayName,
      type
    }) => displayName || type,
    [exports.TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, typeDef.type.includes('RangeInclusive') ? 'RangeInclusive' : 'Range'),
    [exports.TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),
    [exports.TypeDefInfo.Set]: (registry, {
      length = 8,
      sub
    }) => {
      assert$h(sub && Array.isArray(sub), 'Unable to encode Set type');
      return stringify({
        _set: sub.reduce((all, {
          index,
          name
        }, count) => objectSpread$1(all, {
          [`${name || `Unknown${index || count}`}`]: index || count
        }), {
          _bitLength: length || 8
        })
      });
    },
    [exports.TypeDefInfo.Si]: (registry, {
      lookupName,
      type
    }) => lookupName || type,
    [exports.TypeDefInfo.Struct]: (registry, {
      alias,
      sub
    }) => {
      assert$h(sub && Array.isArray(sub), 'Unable to encode Struct type');
      return encodeSubTypes(registry, sub, false, alias ? {
        _alias: [...alias.entries()].reduce((all, [k, v]) => objectSpread$1(all, {
          [k]: v
        }), {})
      } : {});
    },
    [exports.TypeDefInfo.Tuple]: (registry, {
      sub
    }) => {
      assert$h(sub && Array.isArray(sub), 'Unable to encode Tuple type');
      return `(${sub.map(type => encodeTypeDef(registry, type)).join(',')})`;
    },
    [exports.TypeDefInfo.UInt]: (registry, {
      length = 32
    }) => `UInt<${length}>`,
    [exports.TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),
    [exports.TypeDefInfo.VecFixed]: (registry, {
      length,
      sub
    }) => {
      assert$h(isNumber$1(length) && !isUndefined(sub) && !Array.isArray(sub), 'Unable to encode VecFixed type');
      return `[${sub.type};${length}]`;
    },
    [exports.TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperOpaque')
  };
  function encodeType(registry, typeDef, withLookup = true) {
    return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
  }
  function encodeTypeDef(registry, typeDef) {
    return typeDef.displayName && !INFO_WRAP.some(i => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
  }
  function withTypeString(registry, typeDef) {
    return objectSpread$1({}, typeDef, {
      type: encodeType(registry, typeDef, false)
    });
  }

  function lazyVariants(lookup, {
    type
  }, getName, creator) {
    const result = {};
    const variants = lookup.getSiType(type).def.asVariant.variants;
    for (let i = 0; i < variants.length; i++) {
      lazyMethod(result, variants[i], creator, getName);
    }
    return result;
  }

  class TextDecoder$1 {
    constructor(_) {
    }
    decode(value) {
      let result = '';
      for (const c of value) {
        result += String.fromCharCode(c);
      }
      return result;
    }
  }

  const TextDecoder = typeof xglobal.TextDecoder === 'undefined' ? TextDecoder$1 : xglobal.TextDecoder;

  class TextEncoder$1 {
    encode(value) {
      const u8a = new Uint8Array(value.length);
      for (let i = 0; i < value.length; i++) {
        u8a[i] = value.charCodeAt(i);
      }
      return u8a;
    }
  }

  const TextEncoder = typeof xglobal.TextEncoder === 'undefined' ? TextEncoder$1 : xglobal.TextEncoder;

  function isFunction(value) {
    return typeof value === 'function';
  }

  function isString(value) {
    return typeof value === 'string' || value instanceof String;
  }

  function assert$g(condition, message) {
    if (!condition) {
      throw new Error(isFunction(message) ? message() : message);
    }
  }

  function arrayRange(size, startAt = 0) {
    assert$g(size > 0, 'Expected non-zero, positive number as a range size');
    const result = new Array(size).fill(0);
    for (let i = 0; i < result.length; i++) {
      result[i] = i + startAt;
    }
    return result;
  }

  function isBoolean(value) {
    return typeof value === 'boolean';
  }

  function objectSpread(dest, ...sources) {
    for (let i = 0; i < sources.length; i++) {
      const src = sources[i];
      if (src) {
        const keys = Object.keys(src);
        for (let j = 0; j < keys.length; j++) {
          const key = keys[j];
          dest[key] = src[key];
        }
      }
    }
    return dest;
  }

  const HEX_REGEX = /^0x[a-fA-F0-9]+$/;
  function isHex(value, bitLength = -1, ignoreLength = false) {
    return typeof value === 'string' && (value === '0x' || HEX_REGEX.test(value)) ? bitLength === -1 ? value.length % 2 === 0 || ignoreLength : value.length === 2 + Math.ceil(bitLength / 4) : false;
  }

  function hexHasPrefix(value) {
    return !!(value && isHex(value, -1, true) && value.substr(0, 2) === '0x');
  }

  const UNPREFIX_HEX_REGEX = /^[a-fA-F0-9]+$/;
  function hexStripPrefix(value) {
    if (!value) {
      return '';
    } else if (hexHasPrefix(value)) {
      return value.substr(2);
    } else if (UNPREFIX_HEX_REGEX.test(value)) {
      return value;
    }
    throw new Error(`Invalid hex ${value} passed to hexStripPrefix`);
  }

  function reverse(value) {
    return (value.match(/.{1,2}/g) || []).reverse().join('');
  }
  function hexToBn(value, options = {
    isLe: false,
    isNegative: false
  }) {
    if (!value) {
      return new BN$8(0);
    }
    const _options = objectSpread({
      isLe: false,
      isNegative: false
    }, isBoolean(options) ? {
      isLe: options
    } : options);
    const _value = hexStripPrefix(value);
    const bn = new BN$8((_options.isLe ? reverse(_value) : _value) || '00', 16);
    return _options.isNegative ? bn.fromTwos(_value.length * 4) : bn;
  }

  function isBigInt(value) {
    return typeof value === 'bigint';
  }

  function isToBn(value) {
    return !!value && isFunction(value.toBn);
  }

  function bnToBn(value) {
    if (!value) {
      return new BN$8(0);
    } else if (isHex(value)) {
      return hexToBn(value.toString());
    } else if (isBigInt(value)) {
      return new BN$8(value.toString());
    }
    return BN$8.isBN(value) ? value : isToBn(value) ? value.toBn() : new BN$8(value);
  }

  function isNumber(value) {
    return typeof value === 'number';
  }

  function hexToU8a(_value, bitLength = -1) {
    if (!_value) {
      return new Uint8Array();
    }
    assert$g(isHex(_value), () => `Expected hex value to convert, found '${_value}'`);
    const value = hexStripPrefix(_value);
    const valLength = value.length / 2;
    const bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);
    const result = new Uint8Array(bufLength);
    const offset = Math.max(0, bufLength - valLength);
    for (let index = 0; index < bufLength; index++) {
      result[index + offset] = parseInt(value.substr(index * 2, 2), 16);
    }
    return result;
  }

  function isBuffer(value) {
    return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);
  }

  function isU8a(value) {
    return value instanceof Uint8Array;
  }

  const encoder = new TextEncoder();
  function stringToU8a(value) {
    return value ? encoder.encode(value.toString()) : new Uint8Array();
  }

  function u8aToU8a(value) {
    if (!value) {
      return new Uint8Array();
    } else if (isHex(value)) {
      return hexToU8a(value);
    } else if (isString(value)) {
      return stringToU8a(value);
    } else if (Array.isArray(value) || isBuffer(value)) {
      return new Uint8Array(value);
    }
    assert$g(isU8a(value), () => `Unable to convert ${value.toString()} (typeof ${typeof value}) to a Uint8Array`);
    return value;
  }

  function u8aConcat(...list) {
    let length = 0;
    let offset = 0;
    const u8as = new Array(list.length);
    for (let i = 0; i < list.length; i++) {
      u8as[i] = u8aToU8a(list[i]);
      length += u8as[i].length;
    }
    const result = new Uint8Array(length);
    for (let i = 0; i < u8as.length; i++) {
      result.set(u8as[i], offset);
      offset += u8as[i].length;
    }
    return result;
  }

  const ALPHABET = arrayRange(256).map(n => n.toString(16).padStart(2, '0'));
  function extract(value) {
    const result = new Array(value.length);
    for (let i = 0; i < value.length; i++) {
      result[i] = ALPHABET[value[i]];
    }
    return result.join('');
  }
  function unprefixed(value, bitLength = -1) {
    const byteLength = Math.ceil(bitLength / 8);
    return byteLength > 0 && value.length > byteLength ? trim(value, Math.ceil(byteLength / 2)) : extract(value);
  }
  function trim(value, halfLength) {
    return `${unprefixed(value.subarray(0, halfLength))}…${unprefixed(value.subarray(value.length - halfLength))}`;
  }
  function u8aToHex(value, bitLength = -1, isPrefixed = true) {
    return `${isPrefixed ? '0x' : ''}${!value || !value.length ? '' : unprefixed(value, bitLength)}`;
  }

  const decoder = new TextDecoder('utf-8');
  function u8aToString(value) {
    return !(value !== null && value !== void 0 && value.length) ? '' : decoder.decode(value);
  }

  function createEmpty(byteLength, options) {
    return options.bitLength === -1 ? new Uint8Array() : new Uint8Array(byteLength);
  }
  function createValue$1(valueBn, byteLength, {
    isLe,
    isNegative
  }) {
    const output = new Uint8Array(byteLength);
    const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
    return output;
  }
  function bnToU8a(value, arg1 = {
    bitLength: -1,
    isLe: true,
    isNegative: false
  }, arg2) {
    const options = objectSpread({
      bitLength: -1,
      isLe: true,
      isNegative: false
    }, isNumber(arg1) ? {
      bitLength: arg1,
      isLe: arg2
    } : arg1);
    const valueBn = bnToBn(value);
    const byteLength = options.bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((options.bitLength || 0) / 8);
    return value ? createValue$1(valueBn, byteLength, options) : createEmpty(byteLength, options);
  }

  function bufferToU8a(buffer) {
    return new Uint8Array(buffer || []);
  }

  function getRandomValues(arr) {
    return crypto.getRandomValues(arr);
  }

  const asmJsInit = null;

  const CODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  const lookup = [];
  const revLookup = [];
  for (let i = 0; i < CODE.length; ++i) {
    lookup[i] = CODE[i];
    revLookup[CODE.charCodeAt(i)] = i;
  }
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
  function getLens(b64) {
    const len = b64.length;
    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }
    const validLen = b64.indexOf('=');
    return validLen === -1 ? [len, 0] : [validLen, 4 - validLen % 4];
  }
  function toByteArray(b64) {
    const [validLen, placeHoldersLen] = getLens(b64);
    const arr = new Uint8Array((validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen);
    let curByte = 0;
    let i;
    let tmp;
    const len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    for (i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    } else if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
    return arr;
  }

  const sizeCompressed = 152872;
  const sizeUncompressed$1 = 300043;
  const bytes$1 = '';
  var bytes_1 = { bytes: bytes$1, sizeCompressed, sizeUncompressed: sizeUncompressed$1 };

  const bytes = bytes_1.bytes;
  const sizeUncompressed = bytes_1.sizeUncompressed;

  const u8 = Uint8Array,
        u16 = Uint16Array,
        u32 = Uint32Array;
  const clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  const fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
  0, 0,
  0]);
  const fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
  0, 0]);
  const freb = (eb, start) => {
    const b = new u16(31);
    for (let i = 0; i < 31; ++i) {
      b[i] = start += 1 << eb[i - 1];
    }
    const r = new u32(b[30]);
    for (let i = 1; i < 30; ++i) {
      for (let j = b[i]; j < b[i + 1]; ++j) {
        r[j] = j - b[i] << 5 | i;
      }
    }
    return [b, r];
  };
  const [fl, revfl] = freb(fleb, 2);
  fl[28] = 258, revfl[258] = 28;
  const [fd] = freb(fdeb, 0);
  const rev = new u16(32768);
  for (let i = 0; i < 32768; ++i) {
    let x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
    x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
    x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
    rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
  }
  const hMap = (cd, mb, r) => {
    const s = cd.length;
    let i = 0;
    const l = new u16(mb);
    for (; i < s; ++i) ++l[cd[i] - 1];
    const le = new u16(mb);
    for (i = 0; i < mb; ++i) {
      le[i] = le[i - 1] + l[i - 1] << 1;
    }
    let co;
    if (r) {
      co = new u16(1 << mb);
      const rvb = 15 - mb;
      for (i = 0; i < s; ++i) {
        if (cd[i]) {
          const sv = i << 4 | cd[i];
          const r = mb - cd[i];
          let v = le[cd[i] - 1]++ << r;
          for (const m = v | (1 << r) - 1; v <= m; ++v) {
            co[rev[v] >>> rvb] = sv;
          }
        }
      }
    } else {
      co = new u16(s);
      for (i = 0; i < s; ++i) co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
    }
    return co;
  };
  const flt = new u8(288);
  for (let i = 0; i < 144; ++i) flt[i] = 8;
  for (let i = 144; i < 256; ++i) flt[i] = 9;
  for (let i = 256; i < 280; ++i) flt[i] = 7;
  for (let i = 280; i < 288; ++i) flt[i] = 8;
  const fdt = new u8(32);
  for (let i = 0; i < 32; ++i) fdt[i] = 5;
  const flrm = hMap(flt, 9, 1);
  const fdrm = hMap(fdt, 5, 1);
  const bits = (d, p, m) => {
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
  };
  const bits16 = (d, p) => {
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
  };
  const shft = p => (p >>> 3) + (p & 7 && 1);
  const slc = (v, s, e) => {
    if (s == null || s < 0) s = 0;
    if (e == null || e > v.length) e = v.length;
    const n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
  };
  const max = a => {
    let m = a[0];
    for (let i = 1; i < a.length; ++i) {
      if (a[i] > m) m = a[i];
    }
    return m;
  };
  const inflt = (dat, buf, st) => {
    const noSt = !st || st.i;
    if (!st) st = {};
    const sl = dat.length;
    const noBuf = !buf || !noSt;
    if (!buf) buf = new u8(sl * 3);
    const cbuf = l => {
      let bl = buf.length;
      if (l > bl) {
        const nbuf = new u8(Math.max(bl << 1, l));
        nbuf.set(buf);
        buf = nbuf;
      }
    };
    let final = st.f || 0,
        pos = st.p || 0,
        bt = st.b || 0,
        lm = st.l,
        dm = st.d,
        lbt = st.m,
        dbt = st.n;
    if (final && !lm) return buf;
    const tbts = sl << 3;
    do {
      if (!lm) {
        st.f = final = bits(dat, pos, 1);
        const type = bits(dat, pos + 1, 3);
        pos += 3;
        if (!type) {
          const s = shft(pos) + 4,
                l = dat[s - 4] | dat[s - 3] << 8,
                t = s + l;
          if (t > sl) {
            if (noSt) throw 'unexpected EOF';
            break;
          }
          if (noBuf) cbuf(bt + l);
          buf.set(dat.subarray(s, t), bt);
          st.b = bt += l, st.p = pos = t << 3;
          continue;
        } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;else if (type == 2) {
          const hLit = bits(dat, pos, 31) + 257,
                hcLen = bits(dat, pos + 10, 15) + 4;
          const tl = hLit + bits(dat, pos + 5, 31) + 1;
          pos += 14;
          const ldt = new u8(tl);
          const clt = new u8(19);
          for (let i = 0; i < hcLen; ++i) {
            clt[clim[i]] = bits(dat, pos + i * 3, 7);
          }
          pos += hcLen * 3;
          const clb = max(clt),
                clbmsk = (1 << clb) - 1;
          if (!noSt && pos + tl * (clb + 7) > tbts) break;
          const clm = hMap(clt, clb, 1);
          for (let i = 0; i < tl;) {
            const r = clm[bits(dat, pos, clbmsk)];
            pos += r & 15;
            const s = r >>> 4;
            if (s < 16) {
              ldt[i++] = s;
            } else {
              let c = 0,
                  n = 0;
              if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;
              while (n--) ldt[i++] = c;
            }
          }
          const lt = ldt.subarray(0, hLit),
                dt = ldt.subarray(hLit);
          lbt = max(lt);
          dbt = max(dt);
          lm = hMap(lt, lbt, 1);
          dm = hMap(dt, dbt, 1);
        } else throw 'invalid block type';
        if (pos > tbts) throw 'unexpected EOF';
      }
      if (noBuf) cbuf(bt + 131072);
      const lms = (1 << lbt) - 1,
            dms = (1 << dbt) - 1;
      const mxa = lbt + dbt + 18;
      while (noSt || pos + mxa < tbts) {
        const c = lm[bits16(dat, pos) & lms],
              sym = c >>> 4;
        pos += c & 15;
        if (pos > tbts) throw 'unexpected EOF';
        if (!c) throw 'invalid length/literal';
        if (sym < 256) buf[bt++] = sym;else if (sym == 256) {
          lm = undefined;
          break;
        } else {
          let add = sym - 254;
          if (sym > 264) {
            const i = sym - 257,
                  b = fleb[i];
            add = bits(dat, pos, (1 << b) - 1) + fl[i];
            pos += b;
          }
          const d = dm[bits16(dat, pos) & dms],
                dsym = d >>> 4;
          if (!d) throw 'invalid distance';
          pos += d & 15;
          let dt = fd[dsym];
          if (dsym > 3) {
            const b = fdeb[dsym];
            dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
          }
          if (pos > tbts) throw 'unexpected EOF';
          if (noBuf) cbuf(bt + 131072);
          const end = bt + add;
          for (; bt < end; bt += 4) {
            buf[bt] = buf[bt - dt];
            buf[bt + 1] = buf[bt + 1 - dt];
            buf[bt + 2] = buf[bt + 2 - dt];
            buf[bt + 3] = buf[bt + 3 - dt];
          }
          bt = end;
        }
      }
      st.l = lm, st.p = pos, st.b = bt;
      if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
  };
  const zlv = d => {
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw 'invalid zlib data';
    if (d[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';
  };
  function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
  }

  const wasmBytes = unzlibSync(toByteArray(bytes), new Uint8Array(sizeUncompressed));

  let wasm = null;
  let cachegetInt32 = null;
  let cachegetUint8 = null;
  async function initWasm(wasmBytes, asmFn, wbg) {
    try {
      assert$g(typeof WebAssembly !== 'undefined' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');
      const source = await WebAssembly.instantiate(wasmBytes, {
        wbg
      });
      wasm = source.instance.exports;
    } catch (error) {
      if (asmFn) {
        wasm = asmFn(wbg);
      } else {
        console.error('FATAL: Unable to initialize @polkadot/wasm-crypto');
        console.error(error);
        wasm = null;
      }
    }
  }
  function withWasm(fn) {
    return (...params) => {
      assert$g(wasm, 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');
      return fn(wasm)(...params);
    };
  }
  function getWasm() {
    return wasm;
  }
  function getInt32() {
    if (cachegetInt32 === null || cachegetInt32.buffer !== wasm.memory.buffer) {
      cachegetInt32 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32;
  }
  function getUint8() {
    if (cachegetUint8 === null || cachegetUint8.buffer !== wasm.memory.buffer) {
      cachegetUint8 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8;
  }
  function getU8a(ptr, len) {
    return getUint8().subarray(ptr / 1, ptr / 1 + len);
  }
  function getString(ptr, len) {
    return u8aToString(getU8a(ptr, len));
  }
  function allocU8a(arg) {
    const ptr = wasm.__wbindgen_malloc(arg.length * 1);
    getUint8().set(arg, ptr / 1);
    return [ptr, arg.length];
  }
  function resultU8a() {
    const r0 = getInt32()[8 / 4 + 0];
    const r1 = getInt32()[8 / 4 + 1];
    const ret = getU8a(r0, r1).slice();
    wasm.__wbindgen_free(r0, r1 * 1);
    return ret;
  }

  const DEFAULT_CRYPTO = {
    getRandomValues
  };
  const DEFAULT_SELF = {
    crypto: DEFAULT_CRYPTO
  };
  const heap = new Array(32).fill(undefined).concat(undefined, null, true, false);
  let heapNext = heap.length;
  function getObject(idx) {
    return heap[idx];
  }
  function dropObject(idx) {
    if (idx < 36) {
      return;
    }
    heap[idx] = heapNext;
    heapNext = idx;
  }
  function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
  }
  function addObject(obj) {
    if (heapNext === heap.length) {
      heap.push(heap.length + 1);
    }
    const idx = heapNext;
    heapNext = heap[idx];
    heap[idx] = obj;
    return idx;
  }
  function __wbindgen_is_undefined(idx) {
    return getObject(idx) === undefined;
  }
  function __wbg_self_1b7a39e3a92c949c() {
    return addObject(DEFAULT_SELF);
  }
  function __wbg_require_604837428532a733(ptr, len) {
    throw new Error(`Unable to require ${getString(ptr, len)}`);
  }
  function __wbg_crypto_968f1772287e2df0(_idx) {
    return addObject(DEFAULT_CRYPTO);
  }
  function __wbg_getRandomValues_a3d34b4fee3c2869(_idx) {
    return addObject(DEFAULT_CRYPTO.getRandomValues);
  }
  function __wbg_getRandomValues_f5e14ab7ac8e995d(_arg0, ptr, len) {
    DEFAULT_CRYPTO.getRandomValues(getU8a(ptr, len));
  }
  function __wbg_randomFillSync_d5bd2d655fdf256a(_idx, _ptr, _len) {
    throw new Error('randomFillsync is not available');
  }
  function __wbindgen_object_drop_ref(idx) {
    takeObject(idx);
  }
  function abort() {
    throw new Error('abort');
  }

  const imports = /*#__PURE__*/Object.freeze({
    __proto__: null,
    __wbindgen_is_undefined: __wbindgen_is_undefined,
    __wbg_self_1b7a39e3a92c949c: __wbg_self_1b7a39e3a92c949c,
    __wbg_require_604837428532a733: __wbg_require_604837428532a733,
    __wbg_crypto_968f1772287e2df0: __wbg_crypto_968f1772287e2df0,
    __wbg_getRandomValues_a3d34b4fee3c2869: __wbg_getRandomValues_a3d34b4fee3c2869,
    __wbg_getRandomValues_f5e14ab7ac8e995d: __wbg_getRandomValues_f5e14ab7ac8e995d,
    __wbg_randomFillSync_d5bd2d655fdf256a: __wbg_randomFillSync_d5bd2d655fdf256a,
    __wbindgen_object_drop_ref: __wbindgen_object_drop_ref,
    abort: abort
  });

  initWasm(wasmBytes, asmJsInit, imports).catch(() => null);
  const blake2b$1 = withWasm(wasm => (data, key, size) => {
    const [ptr0, len0] = allocU8a(data);
    const [ptr1, len1] = allocU8a(key);
    wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);
    return resultU8a();
  });
  const keccak256 = withWasm(wasm => data => {
    const [ptr0, len0] = allocU8a(data);
    wasm.ext_keccak256(8, ptr0, len0);
    return resultU8a();
  });
  const twox = withWasm(wasm => (data, rounds) => {
    const [ptr0, len0] = allocU8a(data);
    wasm.ext_twox(8, ptr0, len0, rounds);
    return resultU8a();
  });
  function isReady() {
    return !!getWasm();
  }

  var safeBuffer = {exports: {}};

  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  (function (module, exports) {
  var buffer = require$$0__default["default"];
  var Buffer = buffer.Buffer;
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }
  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }
  SafeBuffer.prototype = Object.create(Buffer.prototype);
  copyProps(Buffer, SafeBuffer);
  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };
  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };
  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };
  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return buffer.SlowBuffer(size)
  };
  }(safeBuffer, safeBuffer.exports));

  var _Buffer = safeBuffer.exports.Buffer;
  function base$1 (ALPHABET) {
    if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode (source) {
      if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
      if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
      if (source.length === 0) { return '' }
      var zeroes = 0;
      var length = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i = 0;
        for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
          carry += (256 * b58[it1]) >>> 0;
          b58[it1] = (carry % BASE) >>> 0;
          carry = (carry / BASE) >>> 0;
        }
        if (carry !== 0) { throw new Error('Non-zero carry') }
        length = i;
        pbegin++;
      }
      var it2 = size - length;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
      return str
    }
    function decodeUnsafe (source) {
      if (typeof source !== 'string') { throw new TypeError('Expected String') }
      if (source.length === 0) { return _Buffer.alloc(0) }
      var psz = 0;
      var zeroes = 0;
      var length = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (((source.length - psz) * FACTOR) + 1) >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) { return }
        var i = 0;
        for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
          carry += (BASE * b256[it3]) >>> 0;
          b256[it3] = (carry % 256) >>> 0;
          carry = (carry / 256) >>> 0;
        }
        if (carry !== 0) { throw new Error('Non-zero carry') }
        length = i;
        psz++;
      }
      var it4 = size - length;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
      vch.fill(0x00, 0, zeroes);
      var j = zeroes;
      while (it4 !== size) {
        vch[j++] = b256[it4++];
      }
      return vch
    }
    function decode (string) {
      var buffer = decodeUnsafe(string);
      if (buffer) { return buffer }
      throw new Error('Non-base' + BASE + ' character')
    }
    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    }
  }
  var src = base$1;
  const baseX = src;

  const BASE58_ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  const bs58 = baseX(BASE58_ALPHABET);

  function createValidateFn({
    alphabet,
    ipfsChar,
    type
  }) {
    return (value, ipfsCompat) => {
      assert$g(value && typeof value === 'string', () => `Expected non-null, non-empty ${type} string input`);
      assert$g(!ipfsCompat || value[0] === ipfsChar, () => `Expected ${type} to start with '${ipfsChar}'`);
      for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {
        assert$g(alphabet.includes(value[i]), () => `Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
      return true;
    };
  }
  const base58Validate = createValidateFn({
    alphabet: BASE58_ALPHABET,
    ipfsChar: 'z',
    type: 'base58'
  });

  function base58Decode(value, ipfsCompat) {
    base58Validate(value, ipfsCompat);
    return bufferToU8a(bs58.decode(value.substr(ipfsCompat ? 1 : 0)));
  }

  const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';
  function normalizeInput (input) {
    let ret;
    if (input instanceof Uint8Array) {
      ret = input;
    } else if (input instanceof Buffer) {
      ret = new Uint8Array(input);
    } else if (typeof input === 'string') {
      ret = new Uint8Array(Buffer.from(input, 'utf8'));
    } else {
      throw new Error(ERROR_MSG_INPUT)
    }
    return ret
  }
  function toHex$1 (bytes) {
    return Array.prototype.map
      .call(bytes, function (n) {
        return (n < 16 ? '0' : '') + n.toString(16)
      })
      .join('')
  }
  function uint32ToHex (val) {
    return (0x100000000 + val).toString(16).substring(1)
  }
  function debugPrint (label, arr, size) {
    let msg = '\n' + label + ' = ';
    for (let i = 0; i < arr.length; i += 2) {
      if (size === 32) {
        msg += uint32ToHex(arr[i]).toUpperCase();
        msg += ' ';
        msg += uint32ToHex(arr[i + 1]).toUpperCase();
      } else if (size === 64) {
        msg += uint32ToHex(arr[i + 1]).toUpperCase();
        msg += uint32ToHex(arr[i]).toUpperCase();
      } else throw new Error('Invalid size ' + size)
      if (i % 6 === 4) {
        msg += '\n' + new Array(label.length + 4).join(' ');
      } else if (i < arr.length - 2) {
        msg += ' ';
      }
    }
    console.log(msg);
  }
  function testSpeed (hashFn, N, M) {
    let startMs = new Date().getTime();
    const input = new Uint8Array(N);
    for (let i = 0; i < N; i++) {
      input[i] = i % 256;
    }
    const genMs = new Date().getTime();
    console.log('Generated random input in ' + (genMs - startMs) + 'ms');
    startMs = genMs;
    for (let i = 0; i < M; i++) {
      const hashHex = hashFn(input);
      const hashMs = new Date().getTime();
      const ms = hashMs - startMs;
      startMs = hashMs;
      console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
      console.log(
        Math.round((N / (1 << 20) / (ms / 1000)) * 100) / 100 + ' MB PER SECOND'
      );
    }
  }
  var util$2 = {
    normalizeInput: normalizeInput,
    toHex: toHex$1,
    debugPrint: debugPrint,
    testSpeed: testSpeed
  };

  const util$1 = util$2;
  function ADD64AA (v, a, b) {
    const o0 = v[a] + v[b];
    let o1 = v[a + 1] + v[b + 1];
    if (o0 >= 0x100000000) {
      o1++;
    }
    v[a] = o0;
    v[a + 1] = o1;
  }
  function ADD64AC (v, a, b0, b1) {
    let o0 = v[a] + b0;
    if (b0 < 0) {
      o0 += 0x100000000;
    }
    let o1 = v[a + 1] + b1;
    if (o0 >= 0x100000000) {
      o1++;
    }
    v[a] = o0;
    v[a + 1] = o1;
  }
  function B2B_GET32 (arr, i) {
    return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)
  }
  function B2B_G (a, b, c, d, ix, iy) {
    const x0 = m$1[ix];
    const x1 = m$1[ix + 1];
    const y0 = m$1[iy];
    const y1 = m$1[iy + 1];
    ADD64AA(v$1, a, b);
    ADD64AC(v$1, a, x0, x1);
    let xor0 = v$1[d] ^ v$1[a];
    let xor1 = v$1[d + 1] ^ v$1[a + 1];
    v$1[d] = xor1;
    v$1[d + 1] = xor0;
    ADD64AA(v$1, c, d);
    xor0 = v$1[b] ^ v$1[c];
    xor1 = v$1[b + 1] ^ v$1[c + 1];
    v$1[b] = (xor0 >>> 24) ^ (xor1 << 8);
    v$1[b + 1] = (xor1 >>> 24) ^ (xor0 << 8);
    ADD64AA(v$1, a, b);
    ADD64AC(v$1, a, y0, y1);
    xor0 = v$1[d] ^ v$1[a];
    xor1 = v$1[d + 1] ^ v$1[a + 1];
    v$1[d] = (xor0 >>> 16) ^ (xor1 << 16);
    v$1[d + 1] = (xor1 >>> 16) ^ (xor0 << 16);
    ADD64AA(v$1, c, d);
    xor0 = v$1[b] ^ v$1[c];
    xor1 = v$1[b + 1] ^ v$1[c + 1];
    v$1[b] = (xor1 >>> 31) ^ (xor0 << 1);
    v$1[b + 1] = (xor0 >>> 31) ^ (xor1 << 1);
  }
  const BLAKE2B_IV32 = new Uint32Array([
    0xf3bcc908,
    0x6a09e667,
    0x84caa73b,
    0xbb67ae85,
    0xfe94f82b,
    0x3c6ef372,
    0x5f1d36f1,
    0xa54ff53a,
    0xade682d1,
    0x510e527f,
    0x2b3e6c1f,
    0x9b05688c,
    0xfb41bd6b,
    0x1f83d9ab,
    0x137e2179,
    0x5be0cd19
  ]);
  const SIGMA8 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
  ];
  const SIGMA82 = new Uint8Array(
    SIGMA8.map(function (x) {
      return x * 2
    })
  );
  const v$1 = new Uint32Array(32);
  const m$1 = new Uint32Array(32);
  function blake2bCompress (ctx, last) {
    let i = 0;
    for (i = 0; i < 16; i++) {
      v$1[i] = ctx.h[i];
      v$1[i + 16] = BLAKE2B_IV32[i];
    }
    v$1[24] = v$1[24] ^ ctx.t;
    v$1[25] = v$1[25] ^ (ctx.t / 0x100000000);
    if (last) {
      v$1[28] = ~v$1[28];
      v$1[29] = ~v$1[29];
    }
    for (i = 0; i < 32; i++) {
      m$1[i] = B2B_GET32(ctx.b, 4 * i);
    }
    for (i = 0; i < 12; i++) {
      B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
      B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
      B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
      B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
      B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
      B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
      B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
      B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
    }
    for (i = 0; i < 16; i++) {
      ctx.h[i] = ctx.h[i] ^ v$1[i] ^ v$1[i + 16];
    }
  }
  function blake2bInit (outlen, key) {
    if (outlen === 0 || outlen > 64) {
      throw new Error('Illegal output length, expected 0 < length <= 64')
    }
    if (key && key.length > 64) {
      throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')
    }
    const ctx = {
      b: new Uint8Array(128),
      h: new Uint32Array(16),
      t: 0,
      c: 0,
      outlen: outlen
    };
    for (let i = 0; i < 16; i++) {
      ctx.h[i] = BLAKE2B_IV32[i];
    }
    const keylen = key ? key.length : 0;
    ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;
    if (key) {
      blake2bUpdate(ctx, key);
      ctx.c = 128;
    }
    return ctx
  }
  function blake2bUpdate (ctx, input) {
    for (let i = 0; i < input.length; i++) {
      if (ctx.c === 128) {
        ctx.t += ctx.c;
        blake2bCompress(ctx, false);
        ctx.c = 0;
      }
      ctx.b[ctx.c++] = input[i];
    }
  }
  function blake2bFinal (ctx) {
    ctx.t += ctx.c;
    while (ctx.c < 128) {
      ctx.b[ctx.c++] = 0;
    }
    blake2bCompress(ctx, true);
    const out = new Uint8Array(ctx.outlen);
    for (let i = 0; i < ctx.outlen; i++) {
      out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
    }
    return out
  }
  function blake2b (input, key, outlen) {
    outlen = outlen || 64;
    input = util$1.normalizeInput(input);
    const ctx = blake2bInit(outlen, key);
    blake2bUpdate(ctx, input);
    return blake2bFinal(ctx)
  }
  function blake2bHex (input, key, outlen) {
    const output = blake2b(input, key, outlen);
    return util$1.toHex(output)
  }
  var blake2b_1 = {
    blake2b: blake2b,
    blake2bHex: blake2bHex,
    blake2bInit: blake2bInit,
    blake2bUpdate: blake2bUpdate,
    blake2bFinal: blake2bFinal
  };

  const util = util$2;
  function B2S_GET32 (v, i) {
    return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)
  }
  function B2S_G (a, b, c, d, x, y) {
    v[a] = v[a] + v[b] + x;
    v[d] = ROTR32(v[d] ^ v[a], 16);
    v[c] = v[c] + v[d];
    v[b] = ROTR32(v[b] ^ v[c], 12);
    v[a] = v[a] + v[b] + y;
    v[d] = ROTR32(v[d] ^ v[a], 8);
    v[c] = v[c] + v[d];
    v[b] = ROTR32(v[b] ^ v[c], 7);
  }
  function ROTR32 (x, y) {
    return (x >>> y) ^ (x << (32 - y))
  }
  const BLAKE2S_IV = new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
  ]);
  const SIGMA = new Uint8Array([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0
  ]);
  const v = new Uint32Array(16);
  const m = new Uint32Array(16);
  function blake2sCompress (ctx, last) {
    let i = 0;
    for (i = 0; i < 8; i++) {
      v[i] = ctx.h[i];
      v[i + 8] = BLAKE2S_IV[i];
    }
    v[12] ^= ctx.t;
    v[13] ^= ctx.t / 0x100000000;
    if (last) {
      v[14] = ~v[14];
    }
    for (i = 0; i < 16; i++) {
      m[i] = B2S_GET32(ctx.b, 4 * i);
    }
    for (i = 0; i < 10; i++) {
      B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
      B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
      B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
      B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
      B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
      B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
      B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
      B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
    }
    for (i = 0; i < 8; i++) {
      ctx.h[i] ^= v[i] ^ v[i + 8];
    }
  }
  function blake2sInit (outlen, key) {
    if (!(outlen > 0 && outlen <= 32)) {
      throw new Error('Incorrect output length, should be in [1, 32]')
    }
    const keylen = key ? key.length : 0;
    if (key && !(keylen > 0 && keylen <= 32)) {
      throw new Error('Incorrect key length, should be in [1, 32]')
    }
    const ctx = {
      h: new Uint32Array(BLAKE2S_IV),
      b: new Uint8Array(64),
      c: 0,
      t: 0,
      outlen: outlen
    };
    ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;
    if (keylen > 0) {
      blake2sUpdate(ctx, key);
      ctx.c = 64;
    }
    return ctx
  }
  function blake2sUpdate (ctx, input) {
    for (let i = 0; i < input.length; i++) {
      if (ctx.c === 64) {
        ctx.t += ctx.c;
        blake2sCompress(ctx, false);
        ctx.c = 0;
      }
      ctx.b[ctx.c++] = input[i];
    }
  }
  function blake2sFinal (ctx) {
    ctx.t += ctx.c;
    while (ctx.c < 64) {
      ctx.b[ctx.c++] = 0;
    }
    blake2sCompress(ctx, true);
    const out = new Uint8Array(ctx.outlen);
    for (let i = 0; i < ctx.outlen; i++) {
      out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xff;
    }
    return out
  }
  function blake2s (input, key, outlen) {
    outlen = outlen || 32;
    input = util.normalizeInput(input);
    const ctx = blake2sInit(outlen, key);
    blake2sUpdate(ctx, input);
    return blake2sFinal(ctx)
  }
  function blake2sHex (input, key, outlen) {
    const output = blake2s(input, key, outlen);
    return util.toHex(output)
  }
  var blake2s_1 = {
    blake2s: blake2s,
    blake2sHex: blake2sHex,
    blake2sInit: blake2sInit,
    blake2sUpdate: blake2sUpdate,
    blake2sFinal: blake2sFinal
  };

  const b2b = blake2b_1;
  const b2s = blake2s_1;
  var blakejs = {
    blake2b: b2b.blake2b,
    blake2bHex: b2b.blake2bHex,
    blake2bInit: b2b.blake2bInit,
    blake2bUpdate: b2b.blake2bUpdate,
    blake2bFinal: b2b.blake2bFinal,
    blake2s: b2s.blake2s,
    blake2sHex: b2s.blake2sHex,
    blake2sInit: b2s.blake2sInit,
    blake2sUpdate: b2s.blake2sUpdate,
    blake2sFinal: b2s.blake2sFinal
  };
  const js$1 = blakejs;

  function blake2AsU8a(data, bitLength = 256, key, onlyJs = false) {
    const byteLength = Math.ceil(bitLength / 8);
    return isReady() && !onlyJs ? blake2b$1(u8aToU8a(data), u8aToU8a(key), byteLength) : js$1.blake2b(u8aToU8a(data), key || undefined, byteLength);
  }

  const SS58_PREFIX = stringToU8a('SS58PRE');
  function sshash(key) {
    return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
  }

  function checkAddressChecksum(decoded) {
    const ss58Length = decoded[0] & 0b01000000 ? 2 : 1;
    const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 0b00111111) << 2 | decoded[1] >> 6 | (decoded[1] & 0b00111111) << 8;
    const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
    const length = decoded.length - (isPublicKey ? 2 : 1);
    const hash = sshash(decoded.subarray(0, length));
    const isValid = (decoded[0] & 0b10000000) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
    return [isValid, length, ss58Length, ss58Decoded];
  }

  const knownGenesis = {
    acala: ['0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c'],
    bifrost: ['0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed'],
    centrifuge: ['0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5'],
    'dock-mainnet': ['0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'],
    edgeware: ['0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'],
    equilibrium: ['0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925'],
    genshiro: ['0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243'],
    hydradx: ['0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc',
    '0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9',
    '0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047',
    '0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2'
    ],
    karura: ['0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b'],
    kulupu: ['0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'],
    kusama: ['0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',
    '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636',
    '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf'
    ],
    'nodle-chain': ['0xa3d114c2b8d0627c1aa9b134eafcf7d05ca561fdc19fb388bb9457f81809fb23'],
    plasm: ['0x3e86364d4b4894021cb2a0390bcf2feb5517d5292f2de2bb9404227e908b0b8b'],
    polkadot: ['0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'],
    polymesh: ['0x9deeb940c92ae02111c3bd5baca89970384f4c9849f02a1b2e53e66414d30f9f'],
    stafi: ['0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'],
    statemine: ['0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a'],
    subsocial: ['0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8']
  };
  const knownIcon = {
    centrifuge: 'polkadot',
    kusama: 'polkadot',
    polkadot: 'polkadot',
    statemine: 'polkadot',
    statemint: 'polkadot',
    westmint: 'polkadot'
  };
  const knownLedger = {
    centrifuge: 0x000002eb,
    'dock-mainnet': 0x00000252,
    edgeware: 0x0000020b,
    equilibrium: 0x05f5e0fd,
    genshiro: 0x05f5e0fc,
    kusama: 0x000001b2,
    'nodle-chain': 0x000003eb,
    polkadot: 0x00000162,
    polymesh: 0x00000253,
    statemine: 0x000001b2
  };
  const knownTestnet = {
    '': true,
    'cess-testnet': true,
    'dock-testnet': true,
    jupiter: true,
    'mathchain-testnet': true,
    'zero-alphaville': true
  };

  const knownSubstrate = [{
    decimals: [10],
    displayName: 'Polkadot Relay Chain',
    network: 'polkadot',
    prefix: 0,
    standardAccount: '*25519',
    symbols: ['DOT'],
    website: 'https://polkadot.network'
  }, {
    decimals: null,
    displayName: 'Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.',
    network: 'BareSr25519',
    prefix: 1,
    standardAccount: 'Sr25519',
    symbols: null,
    website: null
  }, {
    decimals: [12],
    displayName: 'Kusama Relay Chain',
    network: 'kusama',
    prefix: 2,
    standardAccount: '*25519',
    symbols: ['KSM'],
    website: 'https://kusama.network'
  }, {
    decimals: null,
    displayName: 'Bare 32-bit Ed25519 public key.',
    network: 'BareEd25519',
    prefix: 3,
    standardAccount: 'Ed25519',
    symbols: null,
    website: null
  }, {
    decimals: null,
    displayName: 'Katal Chain',
    network: 'katalchain',
    prefix: 4,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [15],
    displayName: 'Plasm Network',
    network: 'plasm',
    prefix: 5,
    standardAccount: '*25519',
    symbols: ['PLM'],
    website: 'https://plasmnet.io'
  }, {
    decimals: [12],
    displayName: 'Bifrost',
    network: 'bifrost',
    prefix: 6,
    standardAccount: '*25519',
    symbols: ['BNC'],
    website: 'https://bifrost.finance/'
  }, {
    decimals: [18],
    displayName: 'Edgeware',
    network: 'edgeware',
    prefix: 7,
    standardAccount: '*25519',
    symbols: ['EDG'],
    website: 'https://edgewa.re'
  }, {
    decimals: [12],
    displayName: 'Karura',
    network: 'karura',
    prefix: 8,
    standardAccount: '*25519',
    symbols: ['KAR'],
    website: 'https://karura.network/'
  }, {
    decimals: [18],
    displayName: 'Laminar Reynolds Canary',
    network: 'reynolds',
    prefix: 9,
    standardAccount: '*25519',
    symbols: ['REY'],
    website: 'http://laminar.network/'
  }, {
    decimals: [12],
    displayName: 'Acala',
    network: 'acala',
    prefix: 10,
    standardAccount: '*25519',
    symbols: ['ACA'],
    website: 'https://acala.network/'
  }, {
    decimals: [18],
    displayName: 'Laminar',
    network: 'laminar',
    prefix: 11,
    standardAccount: '*25519',
    symbols: ['LAMI'],
    website: 'http://laminar.network/'
  }, {
    decimals: [6],
    displayName: 'Polymesh',
    network: 'polymesh',
    prefix: 12,
    standardAccount: '*25519',
    symbols: ['POLYX'],
    website: 'https://polymath.network/'
  }, {
    decimals: [12],
    displayName: 'Integritee',
    network: 'integritee',
    prefix: 13,
    standardAccount: '*25519',
    symbols: ['TEER'],
    website: 'https://integritee.network'
  }, {
    decimals: [0],
    displayName: 'Totem',
    network: 'totem',
    prefix: 14,
    standardAccount: '*25519',
    symbols: ['XTX'],
    website: 'https://totemaccounting.com'
  }, {
    decimals: [12],
    displayName: 'Synesthesia',
    network: 'synesthesia',
    prefix: 15,
    standardAccount: '*25519',
    symbols: ['SYN'],
    website: 'https://synesthesia.network/'
  }, {
    decimals: [12],
    displayName: 'Kulupu',
    network: 'kulupu',
    prefix: 16,
    standardAccount: '*25519',
    symbols: ['KLP'],
    website: 'https://kulupu.network/'
  }, {
    decimals: null,
    displayName: 'Dark Mainnet',
    network: 'dark',
    prefix: 17,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [9, 9],
    displayName: 'Darwinia Network',
    network: 'darwinia',
    prefix: 18,
    standardAccount: '*25519',
    symbols: ['RING', 'KTON'],
    website: 'https://darwinia.network/'
  }, {
    decimals: [12],
    displayName: 'GeekCash',
    network: 'geek',
    prefix: 19,
    standardAccount: '*25519',
    symbols: ['GEEK'],
    website: 'https://geekcash.org'
  }, {
    decimals: [12],
    displayName: 'Stafi',
    network: 'stafi',
    prefix: 20,
    standardAccount: '*25519',
    symbols: ['FIS'],
    website: 'https://stafi.io'
  }, {
    decimals: [6],
    displayName: 'Dock Testnet',
    network: 'dock-testnet',
    prefix: 21,
    standardAccount: '*25519',
    symbols: ['DCK'],
    website: 'https://dock.io'
  }, {
    decimals: [6],
    displayName: 'Dock Mainnet',
    network: 'dock-mainnet',
    prefix: 22,
    standardAccount: '*25519',
    symbols: ['DCK'],
    website: 'https://dock.io'
  }, {
    decimals: null,
    displayName: 'ShiftNrg',
    network: 'shift',
    prefix: 23,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [18],
    displayName: 'ZERO',
    network: 'zero',
    prefix: 24,
    standardAccount: '*25519',
    symbols: ['PLAY'],
    website: 'https://zero.io'
  }, {
    decimals: [18],
    displayName: 'ZERO Alphaville',
    network: 'zero-alphaville',
    prefix: 25,
    standardAccount: '*25519',
    symbols: ['PLAY'],
    website: 'https://zero.io'
  }, {
    decimals: [10],
    displayName: 'Jupiter',
    network: 'jupiter',
    prefix: 26,
    standardAccount: '*25519',
    symbols: ['jDOT'],
    website: 'https://jupiter.patract.io'
  }, {
    decimals: null,
    displayName: 'Subsocial',
    network: 'subsocial',
    prefix: 28,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [12, 12],
    displayName: 'CORD Network',
    network: 'cord',
    prefix: 29,
    standardAccount: '*25519',
    symbols: ['DHI', 'WAY'],
    website: 'https://cord.network/'
  }, {
    decimals: [12],
    displayName: 'Phala Network',
    network: 'phala',
    prefix: 30,
    standardAccount: '*25519',
    symbols: ['PHA'],
    website: 'https://phala.network'
  }, {
    decimals: [12],
    displayName: 'Litentry Network',
    network: 'litentry',
    prefix: 31,
    standardAccount: '*25519',
    symbols: ['LIT'],
    website: 'https://litentry.com/'
  }, {
    decimals: [9],
    displayName: 'Robonomics',
    network: 'robonomics',
    prefix: 32,
    standardAccount: '*25519',
    symbols: ['XRT'],
    website: 'https://robonomics.network'
  }, {
    decimals: null,
    displayName: 'DataHighway',
    network: 'datahighway',
    prefix: 33,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [12],
    displayName: 'Ares Protocol',
    network: 'ares',
    prefix: 34,
    standardAccount: '*25519',
    symbols: ['ARES'],
    website: 'https://www.aresprotocol.com/'
  }, {
    decimals: [15],
    displayName: 'Valiu Liquidity Network',
    network: 'vln',
    prefix: 35,
    standardAccount: '*25519',
    symbols: ['USDv'],
    website: 'https://valiu.com/'
  }, {
    decimals: [18],
    displayName: 'Centrifuge Chain',
    network: 'centrifuge',
    prefix: 36,
    standardAccount: '*25519',
    symbols: ['CFG'],
    website: 'https://centrifuge.io/'
  }, {
    decimals: [18],
    displayName: 'Nodle Chain',
    network: 'nodle',
    prefix: 37,
    standardAccount: '*25519',
    symbols: ['NODL'],
    website: 'https://nodle.io/'
  }, {
    decimals: [18],
    displayName: 'KILT Chain',
    network: 'kilt',
    prefix: 38,
    standardAccount: '*25519',
    symbols: ['KILT'],
    website: 'https://kilt.io/'
  }, {
    decimals: [18],
    displayName: 'MathChain mainnet',
    network: 'mathchain',
    prefix: 39,
    standardAccount: '*25519',
    symbols: ['MATH'],
    website: 'https://mathwallet.org'
  }, {
    decimals: [18],
    displayName: 'MathChain testnet',
    network: 'mathchain-testnet',
    prefix: 40,
    standardAccount: '*25519',
    symbols: ['MATH'],
    website: 'https://mathwallet.org'
  }, {
    decimals: null,
    displayName: 'Polimec Chain',
    network: 'poli',
    prefix: 41,
    standardAccount: '*25519',
    symbols: null,
    website: 'https://polimec.io/'
  }, {
    decimals: null,
    displayName: 'Substrate',
    network: 'substrate',
    prefix: 42,
    standardAccount: '*25519',
    symbols: null,
    website: 'https://substrate.io/'
  }, {
    decimals: null,
    displayName: 'Bare 32-bit ECDSA SECP-256k1 public key.',
    network: 'BareSecp256k1',
    prefix: 43,
    standardAccount: 'secp256k1',
    symbols: null,
    website: null
  }, {
    decimals: [8],
    displayName: 'ChainX',
    network: 'chainx',
    prefix: 44,
    standardAccount: '*25519',
    symbols: ['PCX'],
    website: 'https://chainx.org/'
  }, {
    decimals: [12, 12],
    displayName: 'UniArts Network',
    network: 'uniarts',
    prefix: 45,
    standardAccount: '*25519',
    symbols: ['UART', 'UINK'],
    website: 'https://uniarts.me'
  }, {
    decimals: null,
    displayName: 'This prefix is reserved.',
    network: 'reserved46',
    prefix: 46,
    standardAccount: null,
    symbols: null,
    website: null
  }, {
    decimals: null,
    displayName: 'This prefix is reserved.',
    network: 'reserved47',
    prefix: 47,
    standardAccount: null,
    symbols: null,
    website: null
  }, {
    decimals: [12],
    displayName: 'Neatcoin Mainnet',
    network: 'neatcoin',
    prefix: 48,
    standardAccount: '*25519',
    symbols: ['NEAT'],
    website: 'https://neatcoin.org'
  }, {
    decimals: [12],
    displayName: 'Picasso',
    network: 'picasso',
    prefix: 49,
    standardAccount: '*25519',
    symbols: ['PICA'],
    website: 'https://picasso.composable.finance'
  }, {
    decimals: [12],
    displayName: 'Composable',
    network: 'composable',
    prefix: 50,
    standardAccount: '*25519',
    symbols: ['LAYR'],
    website: 'https://composable.finance'
  }, {
    decimals: [12],
    displayName: 'HydraDX',
    network: 'hydradx',
    prefix: 63,
    standardAccount: '*25519',
    symbols: ['HDX'],
    website: 'https://hydradx.io'
  }, {
    decimals: [18],
    displayName: 'AvN Mainnet',
    network: 'aventus',
    prefix: 65,
    standardAccount: '*25519',
    symbols: ['AVT'],
    website: 'https://aventus.io'
  }, {
    decimals: [12],
    displayName: 'Crust Network',
    network: 'crust',
    prefix: 66,
    standardAccount: '*25519',
    symbols: ['CRU'],
    website: 'https://crust.network'
  }, {
    decimals: [0, 9, 9, 9, 9, 9, 9, 9],
    displayName: 'Equilibrium Network',
    network: 'equilibrium',
    prefix: 67,
    standardAccount: '*25519',
    symbols: ['Unknown', 'USD', 'EQ', 'ETH', 'BTC', 'EOS', 'DOT', 'CRV'],
    website: 'https://equilibrium.io'
  }, {
    decimals: [18],
    displayName: 'SORA Network',
    network: 'sora',
    prefix: 69,
    standardAccount: '*25519',
    symbols: ['XOR'],
    website: 'https://sora.org'
  }, {
    decimals: [10],
    displayName: 'Zeitgeist',
    network: 'zeitgeist',
    prefix: 73,
    standardAccount: '*25519',
    symbols: ['ZTG'],
    website: 'https://zeitgeist.pm'
  }, {
    decimals: [12],
    displayName: 'Manta network',
    network: 'manta',
    prefix: 77,
    standardAccount: '*25519',
    symbols: ['MA'],
    website: 'https://manta.network'
  }, {
    decimals: [12],
    displayName: 'Calamari: Manta Canary Network',
    network: 'calamari',
    prefix: 78,
    standardAccount: '*25519',
    symbols: ['KMA'],
    website: 'https://manta.network'
  }, {
    decimals: [12],
    displayName: 'Polkadex Mainnet',
    network: 'polkadex',
    prefix: 88,
    standardAccount: '*25519',
    symbols: ['PDEX'],
    website: 'https://polkadex.trade'
  }, {
    decimals: [18],
    displayName: 'PolkaSmith Canary Network',
    network: 'polkasmith',
    prefix: 98,
    standardAccount: '*25519',
    symbols: ['PKS'],
    website: 'https://polkafoundry.com'
  }, {
    decimals: [18],
    displayName: 'PolkaFoundry Network',
    network: 'polkafoundry',
    prefix: 99,
    standardAccount: '*25519',
    symbols: ['PKF'],
    website: 'https://polkafoundry.com'
  }, {
    decimals: [18],
    displayName: 'OriginTrail Parachain',
    network: 'origintrail-parachain',
    prefix: 101,
    standardAccount: 'secp256k1',
    symbols: ['TRAC'],
    website: 'https://origintrail.io'
  }, {
    decimals: [12],
    displayName: 'Heiko',
    network: 'heiko',
    prefix: 110,
    standardAccount: '*25519',
    symbols: ['HKO'],
    website: 'https://parallel.fi/'
  }, {
    decimals: null,
    displayName: 'Integritee Incognito',
    network: 'integritee-incognito',
    prefix: 113,
    standardAccount: '*25519',
    symbols: null,
    website: 'https://integritee.network'
  }, {
    decimals: [18],
    displayName: 'Clover Finance',
    network: 'clover',
    prefix: 128,
    standardAccount: '*25519',
    symbols: ['CLV'],
    website: 'https://clover.finance'
  }, {
    decimals: [18],
    displayName: 'Altair',
    network: 'altair',
    prefix: 136,
    standardAccount: '*25519',
    symbols: ['AIR'],
    website: 'https://centrifuge.io/'
  }, {
    decimals: [12],
    displayName: 'Parallel',
    network: 'parallel',
    prefix: 172,
    standardAccount: '*25519',
    symbols: ['PARA'],
    website: 'https://parallel.fi/'
  }, {
    decimals: [18],
    displayName: 'Social Network',
    network: 'social-network',
    prefix: 252,
    standardAccount: '*25519',
    symbols: ['NET'],
    website: 'https://social.network'
  }, {
    decimals: [15],
    displayName: 'QUARTZ by UNIQUE',
    network: 'quartz_mainnet',
    prefix: 255,
    standardAccount: '*25519',
    symbols: ['QTZ'],
    website: 'https://unique.network'
  }, {
    decimals: [18],
    displayName: 'Pioneer Network by Bit.Country',
    network: 'pioneer_network',
    prefix: 268,
    standardAccount: '*25519',
    symbols: ['NEER'],
    website: 'https://bit.country'
  }, {
    decimals: [18],
    displayName: 'Moonbeam',
    network: 'moonbeam',
    prefix: 1284,
    standardAccount: 'secp256k1',
    symbols: ['GLMR'],
    website: 'https://moonbeam.network'
  }, {
    decimals: [18],
    displayName: 'Moonriver',
    network: 'moonriver',
    prefix: 1285,
    standardAccount: 'secp256k1',
    symbols: ['MOVR'],
    website: 'https://moonbeam.network'
  }, {
    decimals: [12],
    displayName: 'Basilisk',
    network: 'basilisk',
    prefix: 10041,
    standardAccount: '*25519',
    symbols: ['BSX'],
    website: 'https://bsx.fi'
  }, {
    decimals: [12],
    displayName: 'CESS Testnet',
    network: 'cess-testnet',
    prefix: 10042,
    standardAccount: '*25519',
    symbols: ['TCESS'],
    website: 'https://cess.cloud'
  }, {
    decimals: [12],
    displayName: 'CESS',
    network: 'cess',
    prefix: 10043,
    standardAccount: '*25519',
    symbols: ['CESS'],
    website: 'https://cess.cloud'
  }, {
    decimals: [18],
    displayName: 'Automata ContextFree',
    network: 'contextfree',
    prefix: 11820,
    standardAccount: '*25519',
    symbols: ['CTX'],
    website: 'https://ata.network'
  }];

  const UNSORTED = [0, 2, 42];
  const TESTNETS = ['testnet'];
  function toExpanded(o) {
    const network = o.network || '';
    const nameParts = network.replace(/_/g, '-').split('-');
    const n = o;
    n.slip44 = knownLedger[network];
    n.hasLedgerSupport = !!n.slip44;
    n.genesisHash = knownGenesis[network] || [];
    n.icon = knownIcon[network] || 'substrate';
    n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.symbols) && o.prefix !== 42;
    return n;
  }
  function filterSelectable({
    genesisHash,
    prefix
  }) {
    return !!genesisHash.length || prefix === 42;
  }
  function filterAvailable(n) {
    return !n.isIgnored && !!n.network;
  }
  function sortNetworks(a, b) {
    const isUnSortedA = UNSORTED.includes(a.prefix);
    const isUnSortedB = UNSORTED.includes(b.prefix);
    return isUnSortedA === isUnSortedB ? 0 : isUnSortedA ? -1 : isUnSortedB ? 1 : a.displayName.localeCompare(b.displayName);
  }
  const allNetworks = knownSubstrate.map(toExpanded);
  const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
  availableNetworks.filter(filterSelectable);

  function networkToPrefix({
    prefix
  }) {
    return prefix;
  }
  const defaults = {
    allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
    allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
    allowedPrefix: availableNetworks.map(networkToPrefix),
    prefix: 42
  };

  function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
    assert$g(encoded, 'Invalid empty address passed');
    if (isU8a(encoded) || isHex(encoded)) {
      return u8aToU8a(encoded);
    }
    try {
      const decoded = base58Decode(encoded);
      assert$g(defaults.allowedEncodedLengths.includes(decoded.length), 'Invalid decoded address length');
      const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
      assert$g(ignoreChecksum || isValid, 'Invalid decoded address checksum');
      assert$g([-1, ss58Decoded].includes(ss58Format), () => `Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
      return decoded.slice(ss58Length, endPos);
    } catch (error) {
      throw new Error(`Decoding ${encoded}: ${error.message}`);
    }
  }

  var elliptic = {};

  var name = "elliptic";
  var version = "6.5.4";
  var description = "EC cryptography";
  var main = "lib/elliptic.js";
  var files = [
  	"lib"
  ];
  var scripts = {
  	lint: "eslint lib test",
  	"lint:fix": "npm run lint -- --fix",
  	unit: "istanbul test _mocha --reporter=spec test/index.js",
  	test: "npm run lint && npm run unit",
  	version: "grunt dist && git add dist/"
  };
  var repository = {
  	type: "git",
  	url: "git@github.com:indutny/elliptic"
  };
  var keywords = [
  	"EC",
  	"Elliptic",
  	"curve",
  	"Cryptography"
  ];
  var author = "Fedor Indutny <fedor@indutny.com>";
  var license = "MIT";
  var bugs = {
  	url: "https://github.com/indutny/elliptic/issues"
  };
  var homepage = "https://github.com/indutny/elliptic";
  var devDependencies = {
  	brfs: "^2.0.2",
  	coveralls: "^3.1.0",
  	eslint: "^7.6.0",
  	grunt: "^1.2.1",
  	"grunt-browserify": "^5.3.0",
  	"grunt-cli": "^1.3.2",
  	"grunt-contrib-connect": "^3.0.0",
  	"grunt-contrib-copy": "^1.0.0",
  	"grunt-contrib-uglify": "^5.0.0",
  	"grunt-mocha-istanbul": "^5.0.2",
  	"grunt-saucelabs": "^9.0.1",
  	istanbul: "^0.4.5",
  	mocha: "^8.0.1"
  };
  var dependencies = {
  	"bn.js": "^4.11.9",
  	brorand: "^1.1.0",
  	"hash.js": "^1.0.0",
  	"hmac-drbg": "^1.0.1",
  	inherits: "^2.0.4",
  	"minimalistic-assert": "^1.0.1",
  	"minimalistic-crypto-utils": "^1.0.1"
  };
  const require$$0 = {
  	name: name,
  	version: version,
  	description: description,
  	main: main,
  	files: files,
  	scripts: scripts,
  	repository: repository,
  	keywords: keywords,
  	author: author,
  	license: license,
  	bugs: bugs,
  	homepage: homepage,
  	devDependencies: devDependencies,
  	dependencies: dependencies
  };

  var utils$m = {};

  var minimalisticAssert = assert$f;
  function assert$f(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }
  assert$f.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };

  var utils$l = {};

  (function (exports) {
  var utils = exports;
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray;
  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;
  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };
  }(utils$l));

  (function (exports) {
  var utils = exports;
  var BN = bn.exports;
  var minAssert = minimalisticAssert;
  var minUtils = utils$l;
  utils.assert = minAssert;
  utils.toArray = minUtils.toArray;
  utils.zero2 = minUtils.zero2;
  utils.toHex = minUtils.toHex;
  utils.encode = minUtils.encode;
  function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << (w + 1);
    var k = num.clone();
    for (var i = 0; i < naf.length; i++) {
      var z;
      var mod = k.andln(ws - 1);
      if (k.isOdd()) {
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }
      naf[i] = z;
      k.iushrn(1);
    }
    return naf;
  }
  utils.getNAF = getNAF;
  function getJSF(k1, k2) {
    var jsf = [
      [],
      [],
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);
      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }
    return jsf;
  }
  utils.getJSF = getJSF;
  function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] :
        this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;
  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
      bytes;
  }
  utils.parseBytes = parseBytes;
  function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;
  }(utils$m));

  var brorand = {exports: {}};

  var r$1;
  brorand.exports = function rand(len) {
    if (!r$1)
      r$1 = new Rand(null);
    return r$1.generate(len);
  };
  function Rand(rand) {
    this.rand = rand;
  }
  brorand.exports.Rand = Rand;
  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };
  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for (var i = 0; i < res.length; i++)
      res[i] = this.rand.getByte();
    return res;
  };
  if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else if (typeof window === 'object') {
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    try {
      var crypto$1 = require('crypto');
      if (typeof crypto$1.randomBytes !== 'function')
        throw new Error('Not supported');
      Rand.prototype._rand = function _rand(n) {
        return crypto$1.randomBytes(n);
      };
    } catch (e) {
    }
  }

  var curve = {};

  var BN$7 = bn.exports;
  var utils$k = utils$m;
  var getNAF = utils$k.getNAF;
  var getJSF = utils$k.getJSF;
  var assert$e = utils$k.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN$7(conf.p, 16);
    this.red = conf.prime ? BN$7.red(conf.prime) : BN$7.mont(this.p);
    this.zero = new BN$7(0).toRed(this.red);
    this.one = new BN$7(1).toRed(this.red);
    this.two = new BN$7(2).toRed(this.red);
    this.n = conf.n && new BN$7(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$e(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      for (var l = 0; i >= 0 && naf[i] === 0; i--)
        l++;
      if (i >= 0)
        l++;
      acc = acc.dblp(l);
      if (i < 0)
        break;
      var z = naf[i];
      assert$e(z !== 0);
      if (p.type === 'affine') {
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
    points,
    coeffs,
    len,
    jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i;
    var j;
    var p;
    for (i = 0; i < len; i++) {
      p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }
    for (i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }
      var comb = [
        points[a],
        null,
        null,
        points[b],
      ];
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
      var index = [
        -3,
        -1,
        -5,
        -7,
        0,
        7,
        5,
        1,
        3,
      ];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i = max; i >= 0; i--) {
      var k = 0;
      while (i >= 0) {
        var zero = true;
        for (j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;
      for (j = 0; j < len; j++) {
        var z = tmp[j];
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();
        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    for (i = 0; i < len; i++)
      wnd[i] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
  };
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils$k.toArray(bytes, enc);
    var len = this.p.byteLength();
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06)
        assert$e(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 0x07)
        assert$e(bytes[bytes.length - 1] % 2 === 1);
      var res =  this.point(bytes.slice(1, 1 + len),
        bytes.slice(1 + len, 1 + 2 * len));
      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);
    return [ 0x04 ].concat(x, this.getY().toArray('be', len));
  };
  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils$k.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null,
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles,
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res,
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };

  var inherits_browser = {exports: {}};

  if (typeof Object.create === 'function') {
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }

  var utils$j = utils$m;
  var BN$6 = bn.exports;
  var inherits$3 = inherits_browser.exports;
  var Base$2 = base;
  var assert$d = utils$j.assert;
  function ShortCurve(conf) {
    Base$2.call(this, 'short', conf);
    this.a = new BN$6(conf.a, 16).toRed(this.red);
    this.b = new BN$6(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits$3(ShortCurve, Base$2);
  var short = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN$6(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN$6(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$d(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN$6(vec.a, 16),
          b: new BN$6(vec.b, 16),
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta: beta,
      lambda: lambda,
      basis: basis,
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN$6.mont(num);
    var tinv = new BN$6(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN$6(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [ l1, l2 ];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN$6(1);
    var y1 = new BN$6(0);
    var x2 = new BN$6(0);
    var y2 = new BN$6(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));
      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;
      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 },
    ];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN$6(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x, y);
  };
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();
          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }
          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
        for (var j = 0; j < i * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };
  function Point$2(curve, x, y, isRed) {
    Base$2.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN$6(x, 16);
      this.y = new BN$6(y, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits$3(Point$2, Base$2.BasePoint);
  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point$2(this, x, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point$2.fromJSON(this, obj, red);
  };
  Point$2.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul),
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul),
        },
      };
    }
    return beta;
  };
  Point$2.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [ this.x, this.y ];
    return [ this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1),
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1),
      },
    } ];
  };
  Point$2.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [ res ].concat(pre.doubles.points.map(obj2point)),
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [ res ].concat(pre.naf.points.map(obj2point)),
      },
    };
    return res;
  };
  Point$2.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };
  Point$2.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point$2.prototype.add = function add(p) {
    if (this.inf)
      return p;
    if (p.inf)
      return this;
    if (this.eq(p))
      return this.dbl();
    if (this.neg().eq(p))
      return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point$2.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point$2.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point$2.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point$2.prototype.mul = function mul(k) {
    k = new BN$6(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([ this ], [ k ]);
    else
      return this.curve._wnafMul(this, k);
  };
  Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point$2.prototype.eq = function eq(p) {
    return this === p ||
           this.inf === p.inf &&
               (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  Point$2.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate),
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate),
        },
      };
    }
    return res;
  };
  Point$2.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve, x, y, z) {
    Base$2.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN$6(0);
    } else {
      this.x = new BN$6(x, 16);
      this.y = new BN$6(y, 16);
      this.z = new BN$6(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits$3(JPoint, Base$2.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity())
      return p.toJ();
    if (p.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      var m = xx.redAdd(xx).redIAdd(xx);
      var t = m.redSqr().redISub(s).redISub(s);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t;
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = b.redSqr();
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      var e = a.redAdd(a).redIAdd(a);
      var f = e.redSqr();
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f.redISub(d).redISub(d);
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t = m.redSqr().redISub(s).redISub(s);
      nx = t;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN$6(k, kbase);
    return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());
    if (this === p)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };

  var BN$5 = bn.exports;
  var inherits$2 = inherits_browser.exports;
  var Base$1 = base;
  var utils$i = utils$m;
  function MontCurve(conf) {
    Base$1.call(this, 'mont', conf);
    this.a = new BN$5(conf.a, 16).toRed(this.red);
    this.b = new BN$5(conf.b, 16).toRed(this.red);
    this.i4 = new BN$5(4).toRed(this.red).redInvm();
    this.two = new BN$5(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits$2(MontCurve, Base$1);
  var mont = MontCurve;
  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
  };
  function Point$1(curve, x, z) {
    Base$1.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN$5(x, 16);
      this.z = new BN$5(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits$2(Point$1, Base$1.BasePoint);
  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils$i.toArray(bytes, enc), 1);
  };
  MontCurve.prototype.point = function point(x, z) {
    return new Point$1(this, x, z);
  };
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$1.fromJSON(this, obj);
  };
  Point$1.prototype.precompute = function precompute() {
  };
  Point$1.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
  };
  Point$1.fromJSON = function fromJSON(curve, obj) {
    return new Point$1(curve, obj[0], obj[1] || curve.one);
  };
  Point$1.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };
  Point$1.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  Point$1.prototype.dbl = function dbl() {
    var a = this.x.redAdd(this.z);
    var aa = a.redSqr();
    var b = this.x.redSub(this.z);
    var bb = b.redSqr();
    var c = aa.redSub(bb);
    var nx = aa.redMul(bb);
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };
  Point$1.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };
  Point$1.prototype.diffAdd = function diffAdd(p, diff) {
    var a = this.x.redAdd(this.z);
    var b = this.x.redSub(this.z);
    var c = p.x.redAdd(p.z);
    var d = p.x.redSub(p.z);
    var da = d.redMul(a);
    var cb = c.redMul(b);
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };
  Point$1.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this;
    var b = this.curve.point(null, null);
    var c = this;
    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
      bits.push(t.andln(1));
    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        a = a.diffAdd(b, c);
        b = b.dbl();
      } else {
        b = a.diffAdd(b, c);
        a = a.dbl();
      }
    }
    return b;
  };
  Point$1.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };
  Point$1.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
  };
  Point$1.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };
  Point$1.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  Point$1.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };

  var utils$h = utils$m;
  var BN$4 = bn.exports;
  var inherits$1 = inherits_browser.exports;
  var Base = base;
  var assert$c = utils$h.assert;
  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new BN$4(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN$4(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN$4(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert$c(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits$1(EdwardsCurve, Base);
  var edwards = EdwardsCurve;
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };
  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN$4(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x, y);
  };
  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN$4(y, 16);
    if (!y.red)
      y = y.toRed(this.red);
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error('invalid point');
      else
        return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd)
      x = x.redNeg();
    return this.point(x, y);
  };
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
  };
  function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN$4(x, 16);
      this.y = new BN$4(y, 16);
      this.z = z ? new BN$4(z, 16) : this.curve.one;
      this.t = t && new BN$4(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits$1(Point, Base.BasePoint);
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
  };
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 &&
      (this.y.cmp(this.z) === 0 ||
      (this.zOne && this.y.cmp(this.curve.c) === 0));
  };
  Point.prototype._extDbl = function _extDbl() {
    var a = this.x.redSqr();
    var b = this.y.redSqr();
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    var d = this.curve._mulA(a);
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    var g = d.redAdd(b);
    var f = g.redSub(c);
    var h = d.redSub(b);
    var nx = e.redMul(f);
    var ny = g.redMul(h);
    var nt = e.redMul(h);
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projDbl = function _projDbl() {
    var b = this.x.redAdd(this.y).redSqr();
    var c = this.x.redSqr();
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
      e = this.curve._mulA(c);
      var f = e.redAdd(d);
      if (this.zOne) {
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        ny = f.redMul(e.redSub(d));
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        h = this.z.redSqr();
        j = f.redSub(h).redISub(h);
        nx = b.redSub(c).redISub(d).redMul(j);
        ny = f.redMul(e.redSub(d));
        nz = f.redMul(j);
      }
    } else {
      e = c.redAdd(d);
      h = this.curve._mulC(this.z).redSqr();
      j = e.redSub(h).redSub(h);
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  Point.prototype._extAdd = function _extAdd(p) {
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    var d = this.z.redMul(p.z.redAdd(p.z));
    var e = b.redSub(a);
    var f = d.redSub(c);
    var g = d.redAdd(c);
    var h = b.redAdd(a);
    var nx = e.redMul(f);
    var ny = g.redMul(h);
    var nt = e.redMul(h);
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projAdd = function _projAdd(p) {
    var a = this.z.redMul(p.z);
    var b = a.redSqr();
    var c = this.x.redMul(p.x);
    var d = this.y.redMul(p.y);
    var e = this.curve.d.redMul(c).redMul(d);
    var f = b.redSub(e);
    var g = b.redAdd(e);
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      nz = f.redMul(g);
    } else {
      ny = a.redMul(g).redMul(d.redSub(c));
      nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };
  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
  };
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(),
      this.y,
      this.z,
      this.t && this.t.redNeg());
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  Point.prototype.eq = function eq(other) {
    return this === other ||
           this.getX().cmp(other.getX()) === 0 &&
           this.getY().cmp(other.getY()) === 0;
  };
  Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;

  (function (exports) {
  var curve = exports;
  curve.base = base;
  curve.short = short;
  curve.mont = mont;
  curve.edwards = edwards;
  }(curve));

  var curves$2 = {};

  var hash$2 = {};

  var utils$g = {};

  var assert$b = minimalisticAssert;
  var inherits = inherits_browser.exports;
  utils$g.inherits = inherits;
  function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
      return false;
    }
    if (i < 0 || i + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
  }
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        var p = 0;
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = (c >> 6) | 192;
            res[p++] = (c & 63) | 128;
          } else if (isSurrogatePair(msg, i)) {
            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
            res[p++] = (c >> 18) | 240;
            res[p++] = ((c >> 12) & 63) | 128;
            res[p++] = ((c >> 6) & 63) | 128;
            res[p++] = (c & 63) | 128;
          } else {
            res[p++] = (c >> 12) | 224;
            res[p++] = ((c >> 6) & 63) | 128;
            res[p++] = (c & 63) | 128;
          }
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  utils$g.toArray = toArray;
  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils$g.toHex = toHex;
  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  utils$g.htonl = htonl;
  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils$g.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils$g.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  utils$g.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len = end - start;
    assert$b(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  utils$g.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  utils$g.split32 = split32;
  function rotr32$1(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  utils$g.rotr32 = rotr32$1;
  function rotl32$2(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  utils$g.rotl32 = rotl32$2;
  function sum32$3(a, b) {
    return (a + b) >>> 0;
  }
  utils$g.sum32 = sum32$3;
  function sum32_3$1(a, b, c) {
    return (a + b + c) >>> 0;
  }
  utils$g.sum32_3 = sum32_3$1;
  function sum32_4$2(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  utils$g.sum32_4 = sum32_4$2;
  function sum32_5$2(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  utils$g.sum32_5 = sum32_5$2;
  function sum64$1(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  utils$g.sum64 = sum64$1;
  function sum64_hi$1(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  utils$g.sum64_hi = sum64_hi$1;
  function sum64_lo$1(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  utils$g.sum64_lo = sum64_lo$1;
  function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  utils$g.sum64_4_hi = sum64_4_hi$1;
  function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  utils$g.sum64_4_lo = sum64_4_lo$1;
  function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  utils$g.sum64_5_hi = sum64_5_hi$1;
  function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  utils$g.sum64_5_lo = sum64_5_lo$1;
  function rotr64_hi$1(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  }
  utils$g.rotr64_hi = rotr64_hi$1;
  function rotr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  utils$g.rotr64_lo = rotr64_lo$1;
  function shr64_hi$1(ah, al, num) {
    return ah >>> num;
  }
  utils$g.shr64_hi = shr64_hi$1;
  function shr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  utils$g.shr64_lo = shr64_lo$1;

  var common$5 = {};

  var utils$f = utils$g;
  var assert$a = minimalisticAssert;
  function BlockHash$4() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$5.BlockHash = BlockHash$4;
  BlockHash$4.prototype.update = function update(msg, enc) {
    msg = utils$f.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils$f.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }
    return this;
  };
  BlockHash$4.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert$a(this.pending === null);
    return this._digest(enc);
  };
  BlockHash$4.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }
    return res;
  };

  var sha = {};

  var common$4 = {};

  var utils$e = utils$g;
  var rotr32 = utils$e.rotr32;
  function ft_1$1(s, x, y, z) {
    if (s === 0)
      return ch32$1(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32$1(x, y, z);
  }
  common$4.ft_1 = ft_1$1;
  function ch32$1(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }
  common$4.ch32 = ch32$1;
  function maj32$1(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }
  common$4.maj32 = maj32$1;
  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  common$4.p32 = p32;
  function s0_256$1(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  common$4.s0_256 = s0_256$1;
  function s1_256$1(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  common$4.s1_256 = s1_256$1;
  function g0_256$1(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }
  common$4.g0_256 = g0_256$1;
  function g1_256$1(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }
  common$4.g1_256 = g1_256$1;

  var utils$d = utils$g;
  var common$3 = common$5;
  var shaCommon$1 = common$4;
  var rotl32$1 = utils$d.rotl32;
  var sum32$2 = utils$d.sum32;
  var sum32_5$1 = utils$d.sum32_5;
  var ft_1 = shaCommon$1.ft_1;
  var BlockHash$3 = common$3.BlockHash;
  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash$3.call(this);
    this.h = [
      0x67452301, 0xefcdab89, 0x98badcfe,
      0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }
  utils$d.inherits(SHA1, BlockHash$3);
  var _1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for(; i < W.length; i++)
      W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for (i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t;
    }
    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
  };
  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$d.toHex32(this.h, 'big');
    else
      return utils$d.split32(this.h, 'big');
  };

  var utils$c = utils$g;
  var common$2 = common$5;
  var shaCommon = common$4;
  var assert$9 = minimalisticAssert;
  var sum32$1 = utils$c.sum32;
  var sum32_4$1 = utils$c.sum32_4;
  var sum32_5 = utils$c.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash$2 = common$2.BlockHash;
  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];
  function SHA256$1() {
    if (!(this instanceof SHA256$1))
      return new SHA256$1();
    BlockHash$2.call(this);
    this.h = [
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$c.inherits(SHA256$1, BlockHash$2);
  var _256 = SHA256$1;
  SHA256$1.blockSize = 512;
  SHA256$1.outSize = 256;
  SHA256$1.hmacStrength = 192;
  SHA256$1.padLength = 64;
  SHA256$1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert$9(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32$1(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32$1(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$1(T1, T2);
    }
    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
  };
  SHA256$1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$c.toHex32(this.h, 'big');
    else
      return utils$c.split32(this.h, 'big');
  };

  var utils$b = utils$g;
  var SHA256 = _256;
  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();
    SHA256.call(this);
    this.h = [
      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils$b.inherits(SHA224, SHA256);
  var _224 = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  SHA224.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$b.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils$b.split32(this.h.slice(0, 7), 'big');
  };

  var utils$a = utils$g;
  var common$1 = common$5;
  var assert$8 = minimalisticAssert;
  var rotr64_hi = utils$a.rotr64_hi;
  var rotr64_lo = utils$a.rotr64_lo;
  var shr64_hi = utils$a.shr64_hi;
  var shr64_lo = utils$a.shr64_lo;
  var sum64 = utils$a.sum64;
  var sum64_hi = utils$a.sum64_hi;
  var sum64_lo = utils$a.sum64_lo;
  var sum64_4_hi = utils$a.sum64_4_hi;
  var sum64_4_lo = utils$a.sum64_4_lo;
  var sum64_5_hi = utils$a.sum64_5_hi;
  var sum64_5_lo = utils$a.sum64_5_lo;
  var BlockHash$1 = common$1.BlockHash;
  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];
  function SHA512$1() {
    if (!(this instanceof SHA512$1))
      return new SHA512$1();
    BlockHash$1.call(this);
    this.h = [
      0x6a09e667, 0xf3bcc908,
      0xbb67ae85, 0x84caa73b,
      0x3c6ef372, 0xfe94f82b,
      0xa54ff53a, 0x5f1d36f1,
      0x510e527f, 0xade682d1,
      0x9b05688c, 0x2b3e6c1f,
      0x1f83d9ab, 0xfb41bd6b,
      0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$a.inherits(SHA512$1, BlockHash$1);
  var _512 = SHA512$1;
  SHA512$1.blockSize = 1024;
  SHA512$1.outSize = 512;
  SHA512$1.hmacStrength = 192;
  SHA512$1.padLength = 128;
  SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];
      var c3_lo = W[i - 31];
      W[i] = sum64_4_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
    }
  };
  SHA512$1.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert$8(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];
      var T1_hi = sum64_5_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };
  SHA512$1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$a.toHex32(this.h, 'big');
    else
      return utils$a.split32(this.h, 'big');
  };
  function ch64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function maj64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);
    var c2_hi = rotr64_hi(xl, xh, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);
    var c2_lo = rotr64_lo(xl, xh, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  var utils$9 = utils$g;
  var SHA512 = _512;
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    SHA512.call(this);
    this.h = [
      0xcbbb9d5d, 0xc1059ed8,
      0x629a292a, 0x367cd507,
      0x9159015a, 0x3070dd17,
      0x152fecd8, 0xf70e5939,
      0x67332667, 0xffc00b31,
      0x8eb44a87, 0x68581511,
      0xdb0c2e0d, 0x64f98fa7,
      0x47b5481d, 0xbefa4fa4 ];
  }
  utils$9.inherits(SHA384, SHA512);
  var _384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$9.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils$9.split32(this.h.slice(0, 12), 'big');
  };

  sha.sha1 = _1;
  sha.sha224 = _224;
  sha.sha256 = _256;
  sha.sha384 = _384;
  sha.sha512 = _512;

  var ripemd = {};

  var utils$8 = utils$g;
  var common = common$5;
  var rotl32 = utils$8.rotl32;
  var sum32 = utils$8.sum32;
  var sum32_3 = utils$8.sum32_3;
  var sum32_4 = utils$8.sum32_4;
  var BlockHash = common.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils$8.inherits(RIPEMD160, BlockHash);
  ripemd.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$8.toHex32(this.h, 'little');
    else
      return utils$8.split32(this.h, 'little');
  };
  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }
  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }
  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }
  var r = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];
  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];
  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];
  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var utils$7 = utils$g;
  var assert$7 = minimalisticAssert;
  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils$7.toArray(key, enc));
  }
  var hmac = Hmac;
  Hmac.prototype._init = function init(key) {
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert$7(key.length <= this.blockSize);
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };
  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };

  (function (exports) {
  var hash = exports;
  hash.utils = utils$g;
  hash.common = common$5;
  hash.sha = sha;
  hash.ripemd = ripemd;
  hash.hmac = hmac;
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  }(hash$2));

  (function (exports) {
  var curves = exports;
  var hash = hash$2;
  var curve$1 = curve;
  var utils = utils$m;
  var assert = utils.assert;
  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new curve$1.short(options);
    else if (options.type === 'edwards')
      this.curve = new curve$1.edwards(options);
    else
      this.curve = new curve$1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;
  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve,
        });
        return curve;
      },
    });
  }
  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
      '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
      '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
    ],
  });
  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
      'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
      'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
    ],
  });
  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
      '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
      '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
    ],
  });
  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
       '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
       'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash.sha384,
    gRed: false,
    g: [
      'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
      '5502f25d bf55296c 3a545e38 72760ab7',
      '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
      '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
    ],
  });
  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
       '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
       '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
       'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash.sha512,
    gRed: false,
    g: [
      '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
      '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
      'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
      '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
      '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
      '3fad0761 353c7086 a272c240 88be9476 9fd16650',
    ],
  });
  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '9',
    ],
  });
  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
      '6666666666666666666666666666666666666666666666666666666666666658',
    ],
  });
  var pre;
  try {
    pre = require('./precomputed/secp256k1');
  } catch (e) {
    pre = undefined;
  }
  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
      {
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3',
      },
      {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15',
      },
    ],
    gRed: false,
    g: [
      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
      '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
      pre,
    ],
  });
  }(curves$2));

  var hash$1 = hash$2;
  var utils$6 = utils$l;
  var assert$6 = minimalisticAssert;
  function HmacDRBG$1(options) {
    if (!(this instanceof HmacDRBG$1))
      return new HmacDRBG$1(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils$6.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils$6.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils$6.toArray(options.pers, options.persEnc || 'hex');
    assert$6(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG$1;
  HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000;
  };
  HmacDRBG$1.prototype._hmac = function hmac() {
    return new hash$1.hmac(this.hash, this.K);
  };
  HmacDRBG$1.prototype._update = function update(seed) {
    var kmac = this._hmac()
                   .update(this.V)
                   .update([ 0x00 ]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac()
                 .update(this.V)
                 .update([ 0x01 ])
                 .update(seed)
                 .digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils$6.toArray(entropy, entropyEnc);
    add = utils$6.toArray(add, addEnc);
    assert$6(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };
  HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error('Reseed is required');
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }
    if (add) {
      add = utils$6.toArray(add, addEnc || 'hex');
      this._update(add);
    }
    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils$6.encode(res, enc);
  };

  var BN$3 = bn.exports;
  var utils$5 = utils$m;
  var assert$5 = utils$5.assert;
  function KeyPair$3(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key$1 = KeyPair$3;
  KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair$3)
      return pub;
    return new KeyPair$3(ec, {
      pub: pub,
      pubEnc: enc,
    });
  };
  KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair$3)
      return priv;
    return new KeyPair$3(ec, {
      priv: priv,
      privEnc: enc,
    });
  };
  KeyPair$3.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
      return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: 'Public key * N != O' };
    return { result: true, reason: null };
  };
  KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN$3(key, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      if (this.ec.curve.type === 'mont') {
        assert$5(key.x, 'Need x coordinate');
      } else if (this.ec.curve.type === 'short' ||
                 this.ec.curve.type === 'edwards') {
        assert$5(key.x && key.y, 'Need both x and y coordinate');
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };
  KeyPair$3.prototype.derive = function derive(pub) {
    if(!pub.validate()) {
      assert$5(pub.validate(), 'public point not validated');
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair$3.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair$3.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };
  KeyPair$3.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
           ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };

  var BN$2 = bn.exports;
  var utils$4 = utils$m;
  var assert$4 = utils$4.assert;
  function Signature$3(options, enc) {
    if (options instanceof Signature$3)
      return options;
    if (this._importDER(options, enc))
      return;
    assert$4(options.r && options.s, 'Signature without r or s');
    this.r = new BN$2(options.r, 16);
    this.s = new BN$2(options.s, 16);
    if (options.recoveryParam === undefined)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature$1 = Signature$3;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
      return initial;
    }
    var octetLen = initial & 0xf;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 0x7f) {
      return false;
    }
    p.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }
  Signature$3.prototype._importDER = function _importDER(data, enc) {
    data = utils$4.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
      return false;
    }
    var len = getLength(data, p);
    if (len === false) {
      return false;
    }
    if ((len + p.place) !== data.length) {
      return false;
    }
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var rlen = getLength(data, p);
    if (rlen === false) {
      return false;
    }
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var slen = getLength(data, p);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p.place) {
      return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
      if (r[1] & 0x80) {
        r = r.slice(1);
      } else {
        return false;
      }
    }
    if (s[0] === 0) {
      if (s[1] & 0x80) {
        s = s.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN$2(r);
    this.s = new BN$2(s);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
  }
  Signature$3.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    if (r[0] & 0x80)
      r = [ 0 ].concat(r);
    if (s[0] & 0x80)
      s = [ 0 ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }
    var arr = [ 0x02 ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [ 0x30 ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils$4.encode(res, enc);
  };

  var BN$1 = bn.exports;
  var HmacDRBG = hmacDrbg;
  var utils$3 = utils$m;
  var curves$1 = curves$2;
  var rand = brorand.exports;
  var assert$3 = utils$3.assert;
  var KeyPair$2 = key$1;
  var Signature$2 = signature$1;
  function EC$1(options) {
    if (!(this instanceof EC$1))
      return new EC$1(options);
    if (typeof options === 'string') {
      assert$3(Object.prototype.hasOwnProperty.call(curves$1, options),
        'Unknown curve ' + options);
      options = curves$1[options];
    }
    if (options instanceof curves$1.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  var ec = EC$1;
  EC$1.prototype.keyPair = function keyPair(options) {
    return new KeyPair$2(this, options);
  };
  EC$1.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair$2.fromPrivate(this, priv, enc);
  };
  EC$1.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair$2.fromPublic(this, pub, enc);
  };
  EC$1.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || 'utf8',
      nonce: this.n.toArray(),
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN$1(2));
    for (;;) {
      var priv = new BN$1(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC$1.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC$1.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN$1(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    var nonce = msg.toArray('be', bytes);
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
    });
    var ns1 = this.n.sub(new BN$1(1));
    for (var iter = 0; ; iter++) {
      var k = options.k ?
        options.k(iter) :
        new BN$1(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;
      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                          (kpX.cmp(r) !== 0 ? 2 : 0);
      if (options.canonical && s.cmp(this.nh) > 0) {
        s = this.n.sub(s);
        recoveryParam ^= 1;
      }
      return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
    }
  };
  EC$1.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN$1(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature$2(signature, 'hex');
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.getX().umod(this.n).cmp(r) === 0;
    }
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;
    return p.eqXToP(r);
  };
  EC$1.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert$3((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature$2(signature, enc);
    var n = this.n;
    var e = new BN$1(msg);
    var r = signature.r;
    var s = signature.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find sencond key candinate');
    if (isSecondKey)
      r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
      r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    return this.g.mulAdd(s1, r, s2);
  };
  EC$1.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature$2(signature, enc);
    if (signature.recoveryParam !== null)
      return signature.recoveryParam;
    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature, i);
      } catch (e) {
        continue;
      }
      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };

  var utils$2 = utils$m;
  var assert$2 = utils$2.assert;
  var parseBytes$2 = utils$2.parseBytes;
  var cachedProperty$1 = utils$2.cachedProperty;
  function KeyPair$1(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes$2(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes$2(params.pub);
  }
  KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair$1)
      return pub;
    return new KeyPair$1(eddsa, { pub: pub });
  };
  KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair$1)
      return secret;
    return new KeyPair$1(eddsa, { secret: secret });
  };
  KeyPair$1.prototype.secret = function secret() {
    return this._secret;
  };
  cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  cachedProperty$1(KeyPair$1, 'pub', function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
  });
  cachedProperty$1(KeyPair$1, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  cachedProperty$1(KeyPair$1, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });
  KeyPair$1.prototype.sign = function sign(message) {
    assert$2(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
  };
  KeyPair$1.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };
  KeyPair$1.prototype.getSecret = function getSecret(enc) {
    assert$2(this._secret, 'KeyPair is public only');
    return utils$2.encode(this.secret(), enc);
  };
  KeyPair$1.prototype.getPublic = function getPublic(enc) {
    return utils$2.encode(this.pubBytes(), enc);
  };
  var key = KeyPair$1;

  var BN = bn.exports;
  var utils$1 = utils$m;
  var assert$1 = utils$1.assert;
  var cachedProperty = utils$1.cachedProperty;
  var parseBytes$1 = utils$1.parseBytes;
  function Signature$1(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object')
      sig = parseBytes$1(sig);
    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength),
      };
    }
    assert$1(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN)
      this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }
  cachedProperty(Signature$1, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  cachedProperty(Signature$1, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });
  Signature$1.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };
  Signature$1.prototype.toHex = function toHex() {
    return utils$1.encode(this.toBytes(), 'hex').toUpperCase();
  };
  var signature = Signature$1;

  var hash = hash$2;
  var curves = curves$2;
  var utils = utils$m;
  var assert = utils.assert;
  var parseBytes = utils.parseBytes;
  var KeyPair = key;
  var Signature = signature;
  function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof EDDSA))
      return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
  }
  var eddsa = EDDSA;
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
      .mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
  };
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
  };
  EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for (var i = 0; i < arguments.length; i++)
      hash.update(arguments[i]);
    return utils.intFromLE(hash.digest()).umod(this.curve.n);
  };
  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };
  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };
  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
  };
  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };
  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
  };
  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
  };
  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };

  (function (exports) {
  var elliptic = exports;
  elliptic.version = require$$0.version;
  elliptic.utils = utils$m;
  elliptic.rand = brorand.exports;
  elliptic.curve = curve;
  elliptic.curves = curves$2;
  elliptic.ec = ec;
  elliptic.eddsa = eddsa;
  }(elliptic));

  const EC = elliptic.ec;
  const secp256k1 = new EC('secp256k1');
  const EXPAND_OPT = {
    bitLength: 256,
    isLe: false
  };

  function base58Encode(value, ipfsCompat) {
    const out = bs58.encode(u8aToU8a(value));
    return ipfsCompat ? `z${out}` : out;
  }

  function encodeAddress(key, ss58Format = defaults.prefix) {
    const u8a = decodeAddress(key);
    assert$g(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');
    assert$g(defaults.allowedDecodedLengths.includes(u8a.length), () => `Expected a valid key to convert, with length ${defaults.allowedDecodedLengths.join(', ')}`);
    const input = u8aConcat(ss58Format < 64 ? [ss58Format] : [(ss58Format & 0b0000000011111100) >> 2 | 0b01000000, ss58Format >> 8 | (ss58Format & 0b0000000000000011) << 6], u8a);
    return base58Encode(u8aConcat(input, sshash(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
  }

  var sha3 = {exports: {}};

  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   */
  (function (module) {
  (function () {
    var INPUT_ERROR = 'input is invalid type';
    var FINALIZE_ERROR = 'finalize already called';
    var WINDOW = typeof window === 'object';
    var root = WINDOW ? window : {};
    if (root.JS_SHA3_NO_WINDOW) {
      WINDOW = false;
    }
    var WEB_WORKER = !WINDOW && typeof self === 'object';
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal;
    } else if (WEB_WORKER) {
      root = self;
    }
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    var HEX_CHARS = '0123456789abcdef'.split('');
    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
      0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
      2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
      2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
      2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    var BITS = [224, 256, 384, 512];
    var SHAKE_BITS = [128, 256];
    var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
    var CSHAKE_BYTEPAD = {
      '128': 168,
      '256': 136
    };
    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
      Array.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
    }
    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
      ArrayBuffer.isView = function (obj) {
        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
    }
    var createOutputMethod = function (bits, padding, outputType) {
      return function (message) {
        return new Keccak(bits, padding, bits).update(message)[outputType]();
      };
    };
    var createShakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits) {
        return new Keccak(bits, padding, outputBits).update(message)[outputType]();
      };
    };
    var createCshakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits, n, s) {
        return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
      };
    };
    var createKmacOutputMethod = function (bits, padding, outputType) {
      return function (key, message, outputBits, s) {
        return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
      };
    };
    var createOutputMethods = function (method, createMethod, bits, padding) {
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createMethod(bits, padding, type);
      }
      return method;
    };
    var createMethod = function (bits, padding) {
      var method = createOutputMethod(bits, padding, 'hex');
      method.create = function () {
        return new Keccak(bits, padding, bits);
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      return createOutputMethods(method, createOutputMethod, bits, padding);
    };
    var createShakeMethod = function (bits, padding) {
      var method = createShakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits) {
        return new Keccak(bits, padding, outputBits);
      };
      method.update = function (message, outputBits) {
        return method.create(outputBits).update(message);
      };
      return createOutputMethods(method, createShakeOutputMethod, bits, padding);
    };
    var createCshakeMethod = function (bits, padding) {
      var w = CSHAKE_BYTEPAD[bits];
      var method = createCshakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits, n, s) {
        if (!n && !s) {
          return methods['shake' + bits].create(outputBits);
        } else {
          return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
        }
      };
      method.update = function (message, outputBits, n, s) {
        return method.create(outputBits, n, s).update(message);
      };
      return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
    };
    var createKmacMethod = function (bits, padding) {
      var w = CSHAKE_BYTEPAD[bits];
      var method = createKmacOutputMethod(bits, padding, 'hex');
      method.create = function (key, outputBits, s) {
        return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
      };
      method.update = function (key, message, outputBits, s) {
        return method.create(key, outputBits, s).update(message);
      };
      return createOutputMethods(method, createKmacOutputMethod, bits, padding);
    };
    var algorithms = [
      { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
      { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
      { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
      { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
      { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
    ];
    var methods = {}, methodNames = [];
    for (var i = 0; i < algorithms.length; ++i) {
      var algorithm = algorithms[i];
      var bits = algorithm.bits;
      for (var j = 0; j < bits.length; ++j) {
        var methodName = algorithm.name + '_' + bits[j];
        methodNames.push(methodName);
        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        if (algorithm.name !== 'sha3') {
          var newMethodName = algorithm.name + bits[j];
          methodNames.push(newMethodName);
          methods[newMethodName] = methods[methodName];
        }
      }
    }
    function Keccak(bits, padding, outputBits) {
      this.blocks = [];
      this.s = [];
      this.padding = padding;
      this.outputBits = outputBits;
      this.reset = true;
      this.finalized = false;
      this.block = 0;
      this.start = 0;
      this.blockCount = (1600 - (bits << 1)) >> 5;
      this.byteCount = this.blockCount << 2;
      this.outputBlocks = outputBits >> 5;
      this.extraBytes = (outputBits & 31) >> 3;
      for (var i = 0; i < 50; ++i) {
        this.s[i] = 0;
      }
    }
    Keccak.prototype.update = function (message) {
      if (this.finalized) {
        throw new Error(FINALIZE_ERROR);
      }
      var notString, type = typeof message;
      if (type !== 'string') {
        if (type === 'object') {
          if (message === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          } else if (!Array.isArray(message)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
        blockCount = this.blockCount, index = 0, s = this.s, i, code;
      while (index < length) {
        if (this.reset) {
          this.reset = false;
          blocks[0] = this.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (notString) {
          for (i = this.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = this.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
        this.lastByteIndex = i;
        if (i >= byteCount) {
          this.start = i - byteCount;
          this.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
          this.reset = true;
        } else {
          this.start = i;
        }
      }
      return this;
    };
    Keccak.prototype.encode = function (x, right) {
      var o = x & 255, n = 1;
      var bytes = [o];
      x = x >> 8;
      o = x & 255;
      while (o > 0) {
        bytes.unshift(o);
        x = x >> 8;
        o = x & 255;
        ++n;
      }
      if (right) {
        bytes.push(n);
      } else {
        bytes.unshift(n);
      }
      this.update(bytes);
      return bytes.length;
    };
    Keccak.prototype.encodeString = function (str) {
      var notString, type = typeof str;
      if (type !== 'string') {
        if (type === 'object') {
          if (str === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
            str = new Uint8Array(str);
          } else if (!Array.isArray(str)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var bytes = 0, length = str.length;
      if (notString) {
        bytes = length;
      } else {
        for (var i = 0; i < str.length; ++i) {
          var code = str.charCodeAt(i);
          if (code < 0x80) {
            bytes += 1;
          } else if (code < 0x800) {
            bytes += 2;
          } else if (code < 0xd800 || code >= 0xe000) {
            bytes += 3;
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
            bytes += 4;
          }
        }
      }
      bytes += this.encode(bytes * 8);
      this.update(str);
      return bytes;
    };
    Keccak.prototype.bytepad = function (strs, w) {
      var bytes = this.encode(w);
      for (var i = 0; i < strs.length; ++i) {
        bytes += this.encodeString(strs[i]);
      }
      var paddingBytes = w - bytes % w;
      var zeros = [];
      zeros.length = paddingBytes;
      this.update(zeros);
      return this;
    };
    Keccak.prototype.finalize = function () {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
      blocks[i >> 2] |= this.padding[i & 3];
      if (this.lastByteIndex === this.byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);
    };
    Keccak.prototype.toString = Keccak.prototype.hex = function () {
      this.finalize();
      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var hex = '', block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
            HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
            HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
            HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
        }
        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }
      if (extraBytes) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
        if (extraBytes > 1) {
          hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
        }
        if (extraBytes > 2) {
          hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
        }
      }
      return hex;
    };
    Keccak.prototype.arrayBuffer = function () {
      this.finalize();
      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var bytes = this.outputBits >> 3;
      var buffer;
      if (extraBytes) {
        buffer = new ArrayBuffer((outputBlocks + 1) << 2);
      } else {
        buffer = new ArrayBuffer(bytes);
      }
      var array = new Uint32Array(buffer);
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          array[j] = s[i];
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        array[i] = s[i];
        buffer = buffer.slice(0, bytes);
      }
      return buffer;
    };
    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
    Keccak.prototype.digest = Keccak.prototype.array = function () {
      this.finalize();
      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var array = [], offset, block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          array[offset + 1] = (block >> 8) & 0xFF;
          array[offset + 2] = (block >> 16) & 0xFF;
          array[offset + 3] = (block >> 24) & 0xFF;
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        if (extraBytes > 1) {
          array[offset + 1] = (block >> 8) & 0xFF;
        }
        if (extraBytes > 2) {
          array[offset + 2] = (block >> 16) & 0xFF;
        }
      }
      return array;
    };
    function Kmac(bits, padding, outputBits) {
      Keccak.call(this, bits, padding, outputBits);
    }
    Kmac.prototype = new Keccak();
    Kmac.prototype.finalize = function () {
      this.encode(this.outputBits, true);
      return Keccak.prototype.finalize.call(this);
    };
    var f = function (s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;
        b0 = s[0];
        b1 = s[1];
        b32 = (s[11] << 4) | (s[10] >>> 28);
        b33 = (s[10] << 4) | (s[11] >>> 28);
        b14 = (s[20] << 3) | (s[21] >>> 29);
        b15 = (s[21] << 3) | (s[20] >>> 29);
        b46 = (s[31] << 9) | (s[30] >>> 23);
        b47 = (s[30] << 9) | (s[31] >>> 23);
        b28 = (s[40] << 18) | (s[41] >>> 14);
        b29 = (s[41] << 18) | (s[40] >>> 14);
        b20 = (s[2] << 1) | (s[3] >>> 31);
        b21 = (s[3] << 1) | (s[2] >>> 31);
        b2 = (s[13] << 12) | (s[12] >>> 20);
        b3 = (s[12] << 12) | (s[13] >>> 20);
        b34 = (s[22] << 10) | (s[23] >>> 22);
        b35 = (s[23] << 10) | (s[22] >>> 22);
        b16 = (s[33] << 13) | (s[32] >>> 19);
        b17 = (s[32] << 13) | (s[33] >>> 19);
        b48 = (s[42] << 2) | (s[43] >>> 30);
        b49 = (s[43] << 2) | (s[42] >>> 30);
        b40 = (s[5] << 30) | (s[4] >>> 2);
        b41 = (s[4] << 30) | (s[5] >>> 2);
        b22 = (s[14] << 6) | (s[15] >>> 26);
        b23 = (s[15] << 6) | (s[14] >>> 26);
        b4 = (s[25] << 11) | (s[24] >>> 21);
        b5 = (s[24] << 11) | (s[25] >>> 21);
        b36 = (s[34] << 15) | (s[35] >>> 17);
        b37 = (s[35] << 15) | (s[34] >>> 17);
        b18 = (s[45] << 29) | (s[44] >>> 3);
        b19 = (s[44] << 29) | (s[45] >>> 3);
        b10 = (s[6] << 28) | (s[7] >>> 4);
        b11 = (s[7] << 28) | (s[6] >>> 4);
        b42 = (s[17] << 23) | (s[16] >>> 9);
        b43 = (s[16] << 23) | (s[17] >>> 9);
        b24 = (s[26] << 25) | (s[27] >>> 7);
        b25 = (s[27] << 25) | (s[26] >>> 7);
        b6 = (s[36] << 21) | (s[37] >>> 11);
        b7 = (s[37] << 21) | (s[36] >>> 11);
        b38 = (s[47] << 24) | (s[46] >>> 8);
        b39 = (s[46] << 24) | (s[47] >>> 8);
        b30 = (s[8] << 27) | (s[9] >>> 5);
        b31 = (s[9] << 27) | (s[8] >>> 5);
        b12 = (s[18] << 20) | (s[19] >>> 12);
        b13 = (s[19] << 20) | (s[18] >>> 12);
        b44 = (s[29] << 7) | (s[28] >>> 25);
        b45 = (s[28] << 7) | (s[29] >>> 25);
        b26 = (s[38] << 8) | (s[39] >>> 24);
        b27 = (s[39] << 8) | (s[38] >>> 24);
        b8 = (s[48] << 14) | (s[49] >>> 18);
        b9 = (s[49] << 14) | (s[48] >>> 18);
        s[0] = b0 ^ (~b2 & b4);
        s[1] = b1 ^ (~b3 & b5);
        s[10] = b10 ^ (~b12 & b14);
        s[11] = b11 ^ (~b13 & b15);
        s[20] = b20 ^ (~b22 & b24);
        s[21] = b21 ^ (~b23 & b25);
        s[30] = b30 ^ (~b32 & b34);
        s[31] = b31 ^ (~b33 & b35);
        s[40] = b40 ^ (~b42 & b44);
        s[41] = b41 ^ (~b43 & b45);
        s[2] = b2 ^ (~b4 & b6);
        s[3] = b3 ^ (~b5 & b7);
        s[12] = b12 ^ (~b14 & b16);
        s[13] = b13 ^ (~b15 & b17);
        s[22] = b22 ^ (~b24 & b26);
        s[23] = b23 ^ (~b25 & b27);
        s[32] = b32 ^ (~b34 & b36);
        s[33] = b33 ^ (~b35 & b37);
        s[42] = b42 ^ (~b44 & b46);
        s[43] = b43 ^ (~b45 & b47);
        s[4] = b4 ^ (~b6 & b8);
        s[5] = b5 ^ (~b7 & b9);
        s[14] = b14 ^ (~b16 & b18);
        s[15] = b15 ^ (~b17 & b19);
        s[24] = b24 ^ (~b26 & b28);
        s[25] = b25 ^ (~b27 & b29);
        s[34] = b34 ^ (~b36 & b38);
        s[35] = b35 ^ (~b37 & b39);
        s[44] = b44 ^ (~b46 & b48);
        s[45] = b45 ^ (~b47 & b49);
        s[6] = b6 ^ (~b8 & b0);
        s[7] = b7 ^ (~b9 & b1);
        s[16] = b16 ^ (~b18 & b10);
        s[17] = b17 ^ (~b19 & b11);
        s[26] = b26 ^ (~b28 & b20);
        s[27] = b27 ^ (~b29 & b21);
        s[36] = b36 ^ (~b38 & b30);
        s[37] = b37 ^ (~b39 & b31);
        s[46] = b46 ^ (~b48 & b40);
        s[47] = b47 ^ (~b49 & b41);
        s[8] = b8 ^ (~b0 & b2);
        s[9] = b9 ^ (~b1 & b3);
        s[18] = b18 ^ (~b10 & b12);
        s[19] = b19 ^ (~b11 & b13);
        s[28] = b28 ^ (~b20 & b22);
        s[29] = b29 ^ (~b21 & b23);
        s[38] = b38 ^ (~b30 & b32);
        s[39] = b39 ^ (~b31 & b33);
        s[48] = b48 ^ (~b40 & b42);
        s[49] = b49 ^ (~b41 & b43);
        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };
    if (COMMON_JS) {
      module.exports = methods;
    } else {
      for (i = 0; i < methodNames.length; ++i) {
        root[methodNames[i]] = methods[methodNames[i]];
      }
    }
  })();
  }(sha3));
  const js = sha3.exports;

  function keccakAsU8a(value, bitLength = 256, onlyJs = false) {
    const is256 = bitLength === 256;
    return isReady() && is256 && !onlyJs ? keccak256(u8aToU8a(value)) : new Uint8Array((is256 ? js.keccak256 : js.keccak512).update(u8aToU8a(value)).arrayBuffer());
  }

  function secp256k1Expand(publicKey) {
    assert$g([33, 65].includes(publicKey.length), 'Invalid publicKey provided');
    const expanded = secp256k1.keyFromPublic(publicKey).getPublic();
    return u8aConcat(bnToU8a(expanded.getX(), EXPAND_OPT), bnToU8a(expanded.getY(), EXPAND_OPT));
  }

  function getH160(u8a) {
    if ([33, 65].includes(u8a.length)) {
      u8a = keccakAsU8a(secp256k1Expand(u8a));
    }
    return u8a.slice(-20);
  }
  function ethereumEncode(addressOrPublic) {
    if (!addressOrPublic) {
      return '0x';
    }
    const u8aAddress = u8aToU8a(addressOrPublic);
    assert$g([20, 32, 33, 65].includes(u8aAddress.length), 'Invalid address or publicKey passed');
    const address = u8aToHex(getH160(u8aAddress), -1, false);
    const hash = u8aToHex(keccakAsU8a(address), -1, false);
    let result = '';
    for (let index = 0; index < 40; index++) {
      result = `${result}${parseInt(hash[index], 16) > 7 ? address[index].toUpperCase() : address[index]}`;
    }
    return `0x${result}`;
  }

  function isInvalidChar(char, byte) {
    return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
  }
  function isEthereumChecksum(_address) {
    const address = _address.replace('0x', '');
    const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);
    for (let index = 0; index < 40; index++) {
      if (isInvalidChar(address[index], parseInt(hash[index], 16))) {
        return false;
      }
    }
    return true;
  }

  function isEthereumAddress(address) {
    if (!address || address.length !== 42 || !isHex(address)) {
      return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
      return true;
    }
    return isEthereumChecksum(address);
  }

  var cuint = {};

  var uint32 = {exports: {}};

  (function (module) {
  (function (root) {
  	({
  		36: UINT32( Math.pow(36, 5) )
  	,	16: UINT32( Math.pow(16, 7) )
  	,	10: UINT32( Math.pow(10, 9) )
  	,	2:  UINT32( Math.pow(2, 30) )
  	});
  	({
  		36: UINT32(36)
  	,	16: UINT32(16)
  	,	10: UINT32(10)
  	,	2:  UINT32(2)
  	});
  	function UINT32 (l, h) {
  		if ( !(this instanceof UINT32) )
  			return new UINT32(l, h)
  		this._low = 0;
  		this._high = 0;
  		this.remainder = null;
  		if (typeof h == 'undefined')
  			return fromNumber.call(this, l)
  		if (typeof l == 'string')
  			return fromString.call(this, l, h)
  		fromBits.call(this, l, h);
  	}
  	function fromBits (l, h) {
  		this._low = l | 0;
  		this._high = h | 0;
  		return this
  	}
  	UINT32.prototype.fromBits = fromBits;
  	function fromNumber (value) {
  		this._low = value & 0xFFFF;
  		this._high = value >>> 16;
  		return this
  	}
  	UINT32.prototype.fromNumber = fromNumber;
  	function fromString (s, radix) {
  		var value = parseInt(s, radix || 10);
  		this._low = value & 0xFFFF;
  		this._high = value >>> 16;
  		return this
  	}
  	UINT32.prototype.fromString = fromString;
  	UINT32.prototype.toNumber = function () {
  		return (this._high * 65536) + this._low
  	};
  	UINT32.prototype.toString = function (radix) {
  		return this.toNumber().toString(radix || 10)
  	};
  	UINT32.prototype.add = function (other) {
  		var a00 = this._low + other._low;
  		var a16 = a00 >>> 16;
  		a16 += this._high + other._high;
  		this._low = a00 & 0xFFFF;
  		this._high = a16 & 0xFFFF;
  		return this
  	};
  	UINT32.prototype.subtract = function (other) {
  		return this.add( other.clone().negate() )
  	};
  	UINT32.prototype.multiply = function (other) {
  		var a16 = this._high;
  		var a00 = this._low;
  		var b16 = other._high;
  		var b00 = other._low;
  		var c16, c00;
  		c00 = a00 * b00;
  		c16 = c00 >>> 16;
  		c16 += a16 * b00;
  		c16 &= 0xFFFF;
  		c16 += a00 * b16;
  		this._low = c00 & 0xFFFF;
  		this._high = c16 & 0xFFFF;
  		return this
  	};
  	UINT32.prototype.div = function (other) {
  		if ( (other._low == 0) && (other._high == 0) ) throw Error('division by zero')
  		if (other._high == 0 && other._low == 1) {
  			this.remainder = new UINT32(0);
  			return this
  		}
  		if ( other.gt(this) ) {
  			this.remainder = this.clone();
  			this._low = 0;
  			this._high = 0;
  			return this
  		}
  		if ( this.eq(other) ) {
  			this.remainder = new UINT32(0);
  			this._low = 1;
  			this._high = 0;
  			return this
  		}
  		var _other = other.clone();
  		var i = -1;
  		while ( !this.lt(_other) ) {
  			_other.shiftLeft(1, true);
  			i++;
  		}
  		this.remainder = this.clone();
  		this._low = 0;
  		this._high = 0;
  		for (; i >= 0; i--) {
  			_other.shiftRight(1);
  			if ( !this.remainder.lt(_other) ) {
  				this.remainder.subtract(_other);
  				if (i >= 16) {
  					this._high |= 1 << (i - 16);
  				} else {
  					this._low |= 1 << i;
  				}
  			}
  		}
  		return this
  	};
  	UINT32.prototype.negate = function () {
  		var v = ( ~this._low & 0xFFFF ) + 1;
  		this._low = v & 0xFFFF;
  		this._high = (~this._high + (v >>> 16)) & 0xFFFF;
  		return this
  	};
  	UINT32.prototype.equals = UINT32.prototype.eq = function (other) {
  		return (this._low == other._low) && (this._high == other._high)
  	};
  	UINT32.prototype.greaterThan = UINT32.prototype.gt = function (other) {
  		if (this._high > other._high) return true
  		if (this._high < other._high) return false
  		return this._low > other._low
  	};
  	UINT32.prototype.lessThan = UINT32.prototype.lt = function (other) {
  		if (this._high < other._high) return true
  		if (this._high > other._high) return false
  		return this._low < other._low
  	};
  	UINT32.prototype.or = function (other) {
  		this._low |= other._low;
  		this._high |= other._high;
  		return this
  	};
  	UINT32.prototype.and = function (other) {
  		this._low &= other._low;
  		this._high &= other._high;
  		return this
  	};
  	UINT32.prototype.not = function() {
  		this._low = ~this._low & 0xFFFF;
  		this._high = ~this._high & 0xFFFF;
  		return this
  	};
  	UINT32.prototype.xor = function (other) {
  		this._low ^= other._low;
  		this._high ^= other._high;
  		return this
  	};
  	UINT32.prototype.shiftRight = UINT32.prototype.shiftr = function (n) {
  		if (n > 16) {
  			this._low = this._high >> (n - 16);
  			this._high = 0;
  		} else if (n == 16) {
  			this._low = this._high;
  			this._high = 0;
  		} else {
  			this._low = (this._low >> n) | ( (this._high << (16-n)) & 0xFFFF );
  			this._high >>= n;
  		}
  		return this
  	};
  	UINT32.prototype.shiftLeft = UINT32.prototype.shiftl = function (n, allowOverflow) {
  		if (n > 16) {
  			this._high = this._low << (n - 16);
  			this._low = 0;
  			if (!allowOverflow) {
  				this._high &= 0xFFFF;
  			}
  		} else if (n == 16) {
  			this._high = this._low;
  			this._low = 0;
  		} else {
  			this._high = (this._high << n) | (this._low >> (16-n));
  			this._low = (this._low << n) & 0xFFFF;
  			if (!allowOverflow) {
  				this._high &= 0xFFFF;
  			}
  		}
  		return this
  	};
  	UINT32.prototype.rotateLeft = UINT32.prototype.rotl = function (n) {
  		var v = (this._high << 16) | this._low;
  		v = (v << n) | (v >>> (32 - n));
  		this._low = v & 0xFFFF;
  		this._high = v >>> 16;
  		return this
  	};
  	UINT32.prototype.rotateRight = UINT32.prototype.rotr = function (n) {
  		var v = (this._high << 16) | this._low;
  		v = (v >>> n) | (v << (32 - n));
  		this._low = v & 0xFFFF;
  		this._high = v >>> 16;
  		return this
  	};
  	UINT32.prototype.clone = function () {
  		return new UINT32(this._low, this._high)
  	};
  	if (module.exports) {
  		module.exports = UINT32;
  	} else {
  		root['UINT32'] = UINT32;
  	}
  })(commonjsGlobal);
  }(uint32));

  var uint64 = {exports: {}};

  (function (module) {
  (function (root) {
  	var radixPowerCache = {
  		16: UINT64( Math.pow(16, 5) )
  	,	10: UINT64( Math.pow(10, 5) )
  	,	2:  UINT64( Math.pow(2, 5) )
  	};
  	var radixCache = {
  		16: UINT64(16)
  	,	10: UINT64(10)
  	,	2:  UINT64(2)
  	};
  	function UINT64 (a00, a16, a32, a48) {
  		if ( !(this instanceof UINT64) )
  			return new UINT64(a00, a16, a32, a48)
  		this.remainder = null;
  		if (typeof a00 == 'string')
  			return fromString.call(this, a00, a16)
  		if (typeof a16 == 'undefined')
  			return fromNumber.call(this, a00)
  		fromBits.apply(this, arguments);
  	}
  	function fromBits (a00, a16, a32, a48) {
  		if (typeof a32 == 'undefined') {
  			this._a00 = a00 & 0xFFFF;
  			this._a16 = a00 >>> 16;
  			this._a32 = a16 & 0xFFFF;
  			this._a48 = a16 >>> 16;
  			return this
  		}
  		this._a00 = a00 | 0;
  		this._a16 = a16 | 0;
  		this._a32 = a32 | 0;
  		this._a48 = a48 | 0;
  		return this
  	}
  	UINT64.prototype.fromBits = fromBits;
  	function fromNumber (value) {
  		this._a00 = value & 0xFFFF;
  		this._a16 = value >>> 16;
  		this._a32 = 0;
  		this._a48 = 0;
  		return this
  	}
  	UINT64.prototype.fromNumber = fromNumber;
  	function fromString (s, radix) {
  		radix = radix || 10;
  		this._a00 = 0;
  		this._a16 = 0;
  		this._a32 = 0;
  		this._a48 = 0;
  		var radixUint = radixPowerCache[radix] || new UINT64( Math.pow(radix, 5) );
  		for (var i = 0, len = s.length; i < len; i += 5) {
  			var size = Math.min(5, len - i);
  			var value = parseInt( s.slice(i, i + size), radix );
  			this.multiply(
  					size < 5
  						? new UINT64( Math.pow(radix, size) )
  						: radixUint
  				)
  				.add( new UINT64(value) );
  		}
  		return this
  	}
  	UINT64.prototype.fromString = fromString;
  	UINT64.prototype.toNumber = function () {
  		return (this._a16 * 65536) + this._a00
  	};
  	UINT64.prototype.toString = function (radix) {
  		radix = radix || 10;
  		var radixUint = radixCache[radix] || new UINT64(radix);
  		if ( !this.gt(radixUint) ) return this.toNumber().toString(radix)
  		var self = this.clone();
  		var res = new Array(64);
  		for (var i = 63; i >= 0; i--) {
  			self.div(radixUint);
  			res[i] = self.remainder.toNumber().toString(radix);
  			if ( !self.gt(radixUint) ) break
  		}
  		res[i-1] = self.toNumber().toString(radix);
  		return res.join('')
  	};
  	UINT64.prototype.add = function (other) {
  		var a00 = this._a00 + other._a00;
  		var a16 = a00 >>> 16;
  		a16 += this._a16 + other._a16;
  		var a32 = a16 >>> 16;
  		a32 += this._a32 + other._a32;
  		var a48 = a32 >>> 16;
  		a48 += this._a48 + other._a48;
  		this._a00 = a00 & 0xFFFF;
  		this._a16 = a16 & 0xFFFF;
  		this._a32 = a32 & 0xFFFF;
  		this._a48 = a48 & 0xFFFF;
  		return this
  	};
  	UINT64.prototype.subtract = function (other) {
  		return this.add( other.clone().negate() )
  	};
  	UINT64.prototype.multiply = function (other) {
  		var a00 = this._a00;
  		var a16 = this._a16;
  		var a32 = this._a32;
  		var a48 = this._a48;
  		var b00 = other._a00;
  		var b16 = other._a16;
  		var b32 = other._a32;
  		var b48 = other._a48;
  		var c00 = a00 * b00;
  		var c16 = c00 >>> 16;
  		c16 += a00 * b16;
  		var c32 = c16 >>> 16;
  		c16 &= 0xFFFF;
  		c16 += a16 * b00;
  		c32 += c16 >>> 16;
  		c32 += a00 * b32;
  		var c48 = c32 >>> 16;
  		c32 &= 0xFFFF;
  		c32 += a16 * b16;
  		c48 += c32 >>> 16;
  		c32 &= 0xFFFF;
  		c32 += a32 * b00;
  		c48 += c32 >>> 16;
  		c48 += a00 * b48;
  		c48 &= 0xFFFF;
  		c48 += a16 * b32;
  		c48 &= 0xFFFF;
  		c48 += a32 * b16;
  		c48 &= 0xFFFF;
  		c48 += a48 * b00;
  		this._a00 = c00 & 0xFFFF;
  		this._a16 = c16 & 0xFFFF;
  		this._a32 = c32 & 0xFFFF;
  		this._a48 = c48 & 0xFFFF;
  		return this
  	};
  	UINT64.prototype.div = function (other) {
  		if ( (other._a16 == 0) && (other._a32 == 0) && (other._a48 == 0) ) {
  			if (other._a00 == 0) throw Error('division by zero')
  			if (other._a00 == 1) {
  				this.remainder = new UINT64(0);
  				return this
  			}
  		}
  		if ( other.gt(this) ) {
  			this.remainder = this.clone();
  			this._a00 = 0;
  			this._a16 = 0;
  			this._a32 = 0;
  			this._a48 = 0;
  			return this
  		}
  		if ( this.eq(other) ) {
  			this.remainder = new UINT64(0);
  			this._a00 = 1;
  			this._a16 = 0;
  			this._a32 = 0;
  			this._a48 = 0;
  			return this
  		}
  		var _other = other.clone();
  		var i = -1;
  		while ( !this.lt(_other) ) {
  			_other.shiftLeft(1, true);
  			i++;
  		}
  		this.remainder = this.clone();
  		this._a00 = 0;
  		this._a16 = 0;
  		this._a32 = 0;
  		this._a48 = 0;
  		for (; i >= 0; i--) {
  			_other.shiftRight(1);
  			if ( !this.remainder.lt(_other) ) {
  				this.remainder.subtract(_other);
  				if (i >= 48) {
  					this._a48 |= 1 << (i - 48);
  				} else if (i >= 32) {
  					this._a32 |= 1 << (i - 32);
  				} else if (i >= 16) {
  					this._a16 |= 1 << (i - 16);
  				} else {
  					this._a00 |= 1 << i;
  				}
  			}
  		}
  		return this
  	};
  	UINT64.prototype.negate = function () {
  		var v = ( ~this._a00 & 0xFFFF ) + 1;
  		this._a00 = v & 0xFFFF;
  		v = (~this._a16 & 0xFFFF) + (v >>> 16);
  		this._a16 = v & 0xFFFF;
  		v = (~this._a32 & 0xFFFF) + (v >>> 16);
  		this._a32 = v & 0xFFFF;
  		this._a48 = (~this._a48 + (v >>> 16)) & 0xFFFF;
  		return this
  	};
  	UINT64.prototype.equals = UINT64.prototype.eq = function (other) {
  		return (this._a48 == other._a48) && (this._a00 == other._a00)
  			 && (this._a32 == other._a32) && (this._a16 == other._a16)
  	};
  	UINT64.prototype.greaterThan = UINT64.prototype.gt = function (other) {
  		if (this._a48 > other._a48) return true
  		if (this._a48 < other._a48) return false
  		if (this._a32 > other._a32) return true
  		if (this._a32 < other._a32) return false
  		if (this._a16 > other._a16) return true
  		if (this._a16 < other._a16) return false
  		return this._a00 > other._a00
  	};
  	UINT64.prototype.lessThan = UINT64.prototype.lt = function (other) {
  		if (this._a48 < other._a48) return true
  		if (this._a48 > other._a48) return false
  		if (this._a32 < other._a32) return true
  		if (this._a32 > other._a32) return false
  		if (this._a16 < other._a16) return true
  		if (this._a16 > other._a16) return false
  		return this._a00 < other._a00
  	};
  	UINT64.prototype.or = function (other) {
  		this._a00 |= other._a00;
  		this._a16 |= other._a16;
  		this._a32 |= other._a32;
  		this._a48 |= other._a48;
  		return this
  	};
  	UINT64.prototype.and = function (other) {
  		this._a00 &= other._a00;
  		this._a16 &= other._a16;
  		this._a32 &= other._a32;
  		this._a48 &= other._a48;
  		return this
  	};
  	UINT64.prototype.xor = function (other) {
  		this._a00 ^= other._a00;
  		this._a16 ^= other._a16;
  		this._a32 ^= other._a32;
  		this._a48 ^= other._a48;
  		return this
  	};
  	UINT64.prototype.not = function() {
  		this._a00 = ~this._a00 & 0xFFFF;
  		this._a16 = ~this._a16 & 0xFFFF;
  		this._a32 = ~this._a32 & 0xFFFF;
  		this._a48 = ~this._a48 & 0xFFFF;
  		return this
  	};
  	UINT64.prototype.shiftRight = UINT64.prototype.shiftr = function (n) {
  		n %= 64;
  		if (n >= 48) {
  			this._a00 = this._a48 >> (n - 48);
  			this._a16 = 0;
  			this._a32 = 0;
  			this._a48 = 0;
  		} else if (n >= 32) {
  			n -= 32;
  			this._a00 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
  			this._a16 = (this._a48 >> n) & 0xFFFF;
  			this._a32 = 0;
  			this._a48 = 0;
  		} else if (n >= 16) {
  			n -= 16;
  			this._a00 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF;
  			this._a16 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
  			this._a32 = (this._a48 >> n) & 0xFFFF;
  			this._a48 = 0;
  		} else {
  			this._a00 = ( (this._a00 >> n) | (this._a16 << (16-n)) ) & 0xFFFF;
  			this._a16 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF;
  			this._a32 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
  			this._a48 = (this._a48 >> n) & 0xFFFF;
  		}
  		return this
  	};
  	UINT64.prototype.shiftLeft = UINT64.prototype.shiftl = function (n, allowOverflow) {
  		n %= 64;
  		if (n >= 48) {
  			this._a48 = this._a00 << (n - 48);
  			this._a32 = 0;
  			this._a16 = 0;
  			this._a00 = 0;
  		} else if (n >= 32) {
  			n -= 32;
  			this._a48 = (this._a16 << n) | (this._a00 >> (16-n));
  			this._a32 = (this._a00 << n) & 0xFFFF;
  			this._a16 = 0;
  			this._a00 = 0;
  		} else if (n >= 16) {
  			n -= 16;
  			this._a48 = (this._a32 << n) | (this._a16 >> (16-n));
  			this._a32 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF;
  			this._a16 = (this._a00 << n) & 0xFFFF;
  			this._a00 = 0;
  		} else {
  			this._a48 = (this._a48 << n) | (this._a32 >> (16-n));
  			this._a32 = ( (this._a32 << n) | (this._a16 >> (16-n)) ) & 0xFFFF;
  			this._a16 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF;
  			this._a00 = (this._a00 << n) & 0xFFFF;
  		}
  		if (!allowOverflow) {
  			this._a48 &= 0xFFFF;
  		}
  		return this
  	};
  	UINT64.prototype.rotateLeft = UINT64.prototype.rotl = function (n) {
  		n %= 64;
  		if (n == 0) return this
  		if (n >= 32) {
  			var v = this._a00;
  			this._a00 = this._a32;
  			this._a32 = v;
  			v = this._a48;
  			this._a48 = this._a16;
  			this._a16 = v;
  			if (n == 32) return this
  			n -= 32;
  		}
  		var high = (this._a48 << 16) | this._a32;
  		var low = (this._a16 << 16) | this._a00;
  		var _high = (high << n) | (low >>> (32 - n));
  		var _low = (low << n) | (high >>> (32 - n));
  		this._a00 = _low & 0xFFFF;
  		this._a16 = _low >>> 16;
  		this._a32 = _high & 0xFFFF;
  		this._a48 = _high >>> 16;
  		return this
  	};
  	UINT64.prototype.rotateRight = UINT64.prototype.rotr = function (n) {
  		n %= 64;
  		if (n == 0) return this
  		if (n >= 32) {
  			var v = this._a00;
  			this._a00 = this._a32;
  			this._a32 = v;
  			v = this._a48;
  			this._a48 = this._a16;
  			this._a16 = v;
  			if (n == 32) return this
  			n -= 32;
  		}
  		var high = (this._a48 << 16) | this._a32;
  		var low = (this._a16 << 16) | this._a00;
  		var _high = (high >>> n) | (low << (32 - n));
  		var _low = (low >>> n) | (high << (32 - n));
  		this._a00 = _low & 0xFFFF;
  		this._a16 = _low >>> 16;
  		this._a32 = _high & 0xFFFF;
  		this._a48 = _high >>> 16;
  		return this
  	};
  	UINT64.prototype.clone = function () {
  		return new UINT64(this._a00, this._a16, this._a32, this._a48)
  	};
  	if (module.exports) {
  		module.exports = UINT64;
  	} else {
  		root['UINT64'] = UINT64;
  	}
  })(commonjsGlobal);
  }(uint64));

  cuint.UINT32 = uint32.exports;
  cuint.UINT64 = uint64.exports;

  var UINT32 = cuint.UINT32;
  UINT32.prototype.xxh_update = function (low, high) {
  	var b00 = PRIME32_2._low;
  	var b16 = PRIME32_2._high;
  	var c16, c00;
  	c00 = low * b00;
  	c16 = c00 >>> 16;
  	c16 += high * b00;
  	c16 &= 0xFFFF;
  	c16 += low * b16;
  	var a00 = this._low + (c00 & 0xFFFF);
  	var a16 = a00 >>> 16;
  	a16 += this._high + (c16 & 0xFFFF);
  	var v = (a16 << 16) | (a00 & 0xFFFF);
  	v = (v << 13) | (v >>> 19);
  	a00 = v & 0xFFFF;
  	a16 = v >>> 16;
  	b00 = PRIME32_1._low;
  	b16 = PRIME32_1._high;
  	c00 = a00 * b00;
  	c16 = c00 >>> 16;
  	c16 += a16 * b00;
  	c16 &= 0xFFFF;
  	c16 += a00 * b16;
  	this._low = c00 & 0xFFFF;
  	this._high = c16 & 0xFFFF;
  };
  var PRIME32_1 = UINT32( '2654435761' );
  var PRIME32_2 = UINT32( '2246822519' );
  var PRIME32_3 = UINT32( '3266489917' );
  var PRIME32_4 = UINT32(  '668265263' );
  var PRIME32_5 = UINT32(  '374761393' );
  function toUTF8Array$1 (str) {
  	var utf8 = [];
  	for (var i=0, n=str.length; i < n; i++) {
  		var charcode = str.charCodeAt(i);
  		if (charcode < 0x80) utf8.push(charcode);
  		else if (charcode < 0x800) {
  			utf8.push(0xc0 | (charcode >> 6),
  			0x80 | (charcode & 0x3f));
  		}
  		else if (charcode < 0xd800 || charcode >= 0xe000) {
  			utf8.push(0xe0 | (charcode >> 12),
  			0x80 | ((charcode>>6) & 0x3f),
  			0x80 | (charcode & 0x3f));
  		}
  		else {
  			i++;
  			charcode = 0x10000 + (((charcode & 0x3ff)<<10)
  			| (str.charCodeAt(i) & 0x3ff));
  			utf8.push(0xf0 | (charcode >>18),
  			0x80 | ((charcode>>12) & 0x3f),
  			0x80 | ((charcode>>6) & 0x3f),
  			0x80 | (charcode & 0x3f));
  		}
  	}
  	return new Uint8Array(utf8)
  }
  function XXH () {
  	if (arguments.length == 2)
  		return new XXH( arguments[1] ).update( arguments[0] ).digest()
  	if (!(this instanceof XXH))
  		return new XXH( arguments[0] )
  	init$1.call(this, arguments[0]);
  }
   function init$1 (seed) {
  	this.seed = seed instanceof UINT32 ? seed.clone() : UINT32(seed);
  	this.v1 = this.seed.clone().add(PRIME32_1).add(PRIME32_2);
  	this.v2 = this.seed.clone().add(PRIME32_2);
  	this.v3 = this.seed.clone();
  	this.v4 = this.seed.clone().subtract(PRIME32_1);
  	this.total_len = 0;
  	this.memsize = 0;
  	this.memory = null;
  	return this
  }
  XXH.prototype.init = init$1;
  XXH.prototype.update = function (input) {
  	var isString = typeof input == 'string';
  	var isArrayBuffer;
  	if (isString) {
  		input = toUTF8Array$1(input);
  		isString = false;
  		isArrayBuffer = true;
  	}
  	if (typeof ArrayBuffer !== "undefined" && input instanceof ArrayBuffer)
  	{
  		isArrayBuffer = true;
  		input = new Uint8Array(input);
  	}
  	var p = 0;
  	var len = input.length;
  	var bEnd = p + len;
  	if (len == 0) return this
  	this.total_len += len;
  	if (this.memsize == 0)
  	{
  		if (isString) {
  			this.memory = '';
  		} else if (isArrayBuffer) {
  			this.memory = new Uint8Array(16);
  		} else {
  			this.memory = new Buffer(16);
  		}
  	}
  	if (this.memsize + len < 16)
  	{
  		if (isString) {
  			this.memory += input;
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(0, len), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, 0, len );
  		}
  		this.memsize += len;
  		return this
  	}
  	if (this.memsize > 0)
  	{
  		if (isString) {
  			this.memory += input.slice(0, 16 - this.memsize);
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(0, 16 - this.memsize), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, 0, 16 - this.memsize );
  		}
  		var p32 = 0;
  		if (isString) {
  			this.v1.xxh_update(
  				(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
  			,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
  			);
  			p32 += 4;
  			this.v2.xxh_update(
  				(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
  			,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
  			);
  			p32 += 4;
  			this.v3.xxh_update(
  				(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
  			,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
  			);
  			p32 += 4;
  			this.v4.xxh_update(
  				(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
  			,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
  			);
  		} else {
  			this.v1.xxh_update(
  				(this.memory[p32+1] << 8) | this.memory[p32]
  			,	(this.memory[p32+3] << 8) | this.memory[p32+2]
  			);
  			p32 += 4;
  			this.v2.xxh_update(
  				(this.memory[p32+1] << 8) | this.memory[p32]
  			,	(this.memory[p32+3] << 8) | this.memory[p32+2]
  			);
  			p32 += 4;
  			this.v3.xxh_update(
  				(this.memory[p32+1] << 8) | this.memory[p32]
  			,	(this.memory[p32+3] << 8) | this.memory[p32+2]
  			);
  			p32 += 4;
  			this.v4.xxh_update(
  				(this.memory[p32+1] << 8) | this.memory[p32]
  			,	(this.memory[p32+3] << 8) | this.memory[p32+2]
  			);
  		}
  		p += 16 - this.memsize;
  		this.memsize = 0;
  		if (isString) this.memory = '';
  	}
  	if (p <= bEnd - 16)
  	{
  		var limit = bEnd - 16;
  		do
  		{
  			if (isString) {
  				this.v1.xxh_update(
  					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  				);
  				p += 4;
  				this.v2.xxh_update(
  					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  				);
  				p += 4;
  				this.v3.xxh_update(
  					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  				);
  				p += 4;
  				this.v4.xxh_update(
  					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  				);
  			} else {
  				this.v1.xxh_update(
  					(input[p+1] << 8) | input[p]
  				,	(input[p+3] << 8) | input[p+2]
  				);
  				p += 4;
  				this.v2.xxh_update(
  					(input[p+1] << 8) | input[p]
  				,	(input[p+3] << 8) | input[p+2]
  				);
  				p += 4;
  				this.v3.xxh_update(
  					(input[p+1] << 8) | input[p]
  				,	(input[p+3] << 8) | input[p+2]
  				);
  				p += 4;
  				this.v4.xxh_update(
  					(input[p+1] << 8) | input[p]
  				,	(input[p+3] << 8) | input[p+2]
  				);
  			}
  			p += 4;
  		} while (p <= limit)
  	}
  	if (p < bEnd)
  	{
  		if (isString) {
  			this.memory += input.slice(p);
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(p, bEnd), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, p, bEnd );
  		}
  		this.memsize = bEnd - p;
  	}
  	return this
  };
  XXH.prototype.digest = function () {
  	var input = this.memory;
  	var isString = typeof input == 'string';
  	var p = 0;
  	var bEnd = this.memsize;
  	var h32, h;
  	var u = new UINT32;
  	if (this.total_len >= 16)
  	{
  		h32 = this.v1.rotl(1).add( this.v2.rotl(7).add( this.v3.rotl(12).add( this.v4.rotl(18) ) ) );
  	}
  	else
  	{
  		h32  = this.seed.clone().add( PRIME32_5 );
  	}
  	h32.add( u.fromNumber(this.total_len) );
  	while (p <= bEnd - 4)
  	{
  		if (isString) {
  			u.fromBits(
  				(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  			,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  			);
  		} else {
  			u.fromBits(
  				(input[p+1] << 8) | input[p]
  			,	(input[p+3] << 8) | input[p+2]
  			);
  		}
  		h32
  			.add( u.multiply(PRIME32_3) )
  			.rotl(17)
  			.multiply( PRIME32_4 );
  		p += 4;
  	}
  	while (p < bEnd)
  	{
  		u.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0 );
  		h32
  			.add( u.multiply(PRIME32_5) )
  			.rotl(11)
  			.multiply(PRIME32_1);
  	}
  	h = h32.clone().shiftRight(15);
  	h32.xor(h).multiply(PRIME32_2);
  	h = h32.clone().shiftRight(13);
  	h32.xor(h).multiply(PRIME32_3);
  	h = h32.clone().shiftRight(16);
  	h32.xor(h);
  	this.init( this.seed );
  	return h32
  };
  var xxhash = XXH;

  var UINT64 = cuint.UINT64;
  var PRIME64_1 = UINT64( '11400714785074694791' );
  var PRIME64_2 = UINT64( '14029467366897019727' );
  var PRIME64_3 = UINT64(  '1609587929392839161' );
  var PRIME64_4 = UINT64(  '9650029242287828579' );
  var PRIME64_5 = UINT64(  '2870177450012600261' );
  function toUTF8Array (str) {
  	var utf8 = [];
  	for (var i=0, n=str.length; i < n; i++) {
  		var charcode = str.charCodeAt(i);
  		if (charcode < 0x80) utf8.push(charcode);
  		else if (charcode < 0x800) {
  			utf8.push(0xc0 | (charcode >> 6),
  			0x80 | (charcode & 0x3f));
  		}
  		else if (charcode < 0xd800 || charcode >= 0xe000) {
  			utf8.push(0xe0 | (charcode >> 12),
  			0x80 | ((charcode>>6) & 0x3f),
  			0x80 | (charcode & 0x3f));
  		}
  		else {
  			i++;
  			charcode = 0x10000 + (((charcode & 0x3ff)<<10)
  			| (str.charCodeAt(i) & 0x3ff));
  			utf8.push(0xf0 | (charcode >>18),
  			0x80 | ((charcode>>12) & 0x3f),
  			0x80 | ((charcode>>6) & 0x3f),
  			0x80 | (charcode & 0x3f));
  		}
  	}
  	return new Uint8Array(utf8)
  }
  function XXH64 () {
  	if (arguments.length == 2)
  		return new XXH64( arguments[1] ).update( arguments[0] ).digest()
  	if (!(this instanceof XXH64))
  		return new XXH64( arguments[0] )
  	init.call(this, arguments[0]);
  }
   function init (seed) {
  	this.seed = seed instanceof UINT64 ? seed.clone() : UINT64(seed);
  	this.v1 = this.seed.clone().add(PRIME64_1).add(PRIME64_2);
  	this.v2 = this.seed.clone().add(PRIME64_2);
  	this.v3 = this.seed.clone();
  	this.v4 = this.seed.clone().subtract(PRIME64_1);
  	this.total_len = 0;
  	this.memsize = 0;
  	this.memory = null;
  	return this
  }
  XXH64.prototype.init = init;
  XXH64.prototype.update = function (input) {
  	var isString = typeof input == 'string';
  	var isArrayBuffer;
  	if (isString) {
  		input = toUTF8Array(input);
  		isString = false;
  		isArrayBuffer = true;
  	}
  	if (typeof ArrayBuffer !== "undefined" && input instanceof ArrayBuffer)
  	{
  		isArrayBuffer = true;
  		input = new Uint8Array(input);
  	}
  	var p = 0;
  	var len = input.length;
  	var bEnd = p + len;
  	if (len == 0) return this
  	this.total_len += len;
  	if (this.memsize == 0)
  	{
  		if (isString) {
  			this.memory = '';
  		} else if (isArrayBuffer) {
  			this.memory = new Uint8Array(32);
  		} else {
  			this.memory = new Buffer(32);
  		}
  	}
  	if (this.memsize + len < 32)
  	{
  		if (isString) {
  			this.memory += input;
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(0, len), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, 0, len );
  		}
  		this.memsize += len;
  		return this
  	}
  	if (this.memsize > 0)
  	{
  		if (isString) {
  			this.memory += input.slice(0, 32 - this.memsize);
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(0, 32 - this.memsize), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, 0, 32 - this.memsize );
  		}
  		var p64 = 0;
  		if (isString) {
  			var other;
  			other = UINT64(
  					(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
  				,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
  				,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
  				,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
  				);
  			this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
  				,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
  				,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
  				,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
  				);
  			this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
  				,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
  				,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
  				,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
  				);
  			this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
  				,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
  				,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
  				,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
  				);
  			this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  		} else {
  			var other;
  			other = UINT64(
  					(this.memory[p64+1] << 8) | this.memory[p64]
  				,	(this.memory[p64+3] << 8) | this.memory[p64+2]
  				,	(this.memory[p64+5] << 8) | this.memory[p64+4]
  				,	(this.memory[p64+7] << 8) | this.memory[p64+6]
  				);
  			this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory[p64+1] << 8) | this.memory[p64]
  				,	(this.memory[p64+3] << 8) | this.memory[p64+2]
  				,	(this.memory[p64+5] << 8) | this.memory[p64+4]
  				,	(this.memory[p64+7] << 8) | this.memory[p64+6]
  				);
  			this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory[p64+1] << 8) | this.memory[p64]
  				,	(this.memory[p64+3] << 8) | this.memory[p64+2]
  				,	(this.memory[p64+5] << 8) | this.memory[p64+4]
  				,	(this.memory[p64+7] << 8) | this.memory[p64+6]
  				);
  			this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory[p64+1] << 8) | this.memory[p64]
  				,	(this.memory[p64+3] << 8) | this.memory[p64+2]
  				,	(this.memory[p64+5] << 8) | this.memory[p64+4]
  				,	(this.memory[p64+7] << 8) | this.memory[p64+6]
  				);
  			this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  		}
  		p += 32 - this.memsize;
  		this.memsize = 0;
  		if (isString) this.memory = '';
  	}
  	if (p <= bEnd - 32)
  	{
  		var limit = bEnd - 32;
  		do
  		{
  			if (isString) {
  				var other;
  				other = UINT64(
  						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  					,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  					,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  					);
  				this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  					,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  					,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  					);
  				this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  					,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  					,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  					);
  				this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  					,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  					,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  					);
  				this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			} else {
  				var other;
  				other = UINT64(
  						(input[p+1] << 8) | input[p]
  					,	(input[p+3] << 8) | input[p+2]
  					,	(input[p+5] << 8) | input[p+4]
  					,	(input[p+7] << 8) | input[p+6]
  					);
  				this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input[p+1] << 8) | input[p]
  					,	(input[p+3] << 8) | input[p+2]
  					,	(input[p+5] << 8) | input[p+4]
  					,	(input[p+7] << 8) | input[p+6]
  					);
  				this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input[p+1] << 8) | input[p]
  					,	(input[p+3] << 8) | input[p+2]
  					,	(input[p+5] << 8) | input[p+4]
  					,	(input[p+7] << 8) | input[p+6]
  					);
  				this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input[p+1] << 8) | input[p]
  					,	(input[p+3] << 8) | input[p+2]
  					,	(input[p+5] << 8) | input[p+4]
  					,	(input[p+7] << 8) | input[p+6]
  					);
  				this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			}
  			p += 8;
  		} while (p <= limit)
  	}
  	if (p < bEnd)
  	{
  		if (isString) {
  			this.memory += input.slice(p);
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(p, bEnd), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, p, bEnd );
  		}
  		this.memsize = bEnd - p;
  	}
  	return this
  };
  XXH64.prototype.digest = function () {
  	var input = this.memory;
  	var isString = typeof input == 'string';
  	var p = 0;
  	var bEnd = this.memsize;
  	var h64, h;
  	var u = new UINT64;
  	if (this.total_len >= 32)
  	{
  		h64 = this.v1.clone().rotl(1);
  		h64.add( this.v2.clone().rotl(7) );
  		h64.add( this.v3.clone().rotl(12) );
  		h64.add( this.v4.clone().rotl(18) );
  		h64.xor( this.v1.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
  		h64.multiply(PRIME64_1).add(PRIME64_4);
  		h64.xor( this.v2.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
  		h64.multiply(PRIME64_1).add(PRIME64_4);
  		h64.xor( this.v3.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
  		h64.multiply(PRIME64_1).add(PRIME64_4);
  		h64.xor( this.v4.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
  		h64.multiply(PRIME64_1).add(PRIME64_4);
  	}
  	else
  	{
  		h64  = this.seed.clone().add( PRIME64_5 );
  	}
  	h64.add( u.fromNumber(this.total_len) );
  	while (p <= bEnd - 8)
  	{
  		if (isString) {
  			u.fromBits(
  				(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  			,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  			,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  			,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  			);
  		} else {
  			u.fromBits(
  				(input[p+1] << 8) | input[p]
  			,	(input[p+3] << 8) | input[p+2]
  			,	(input[p+5] << 8) | input[p+4]
  			,	(input[p+7] << 8) | input[p+6]
  			);
  		}
  		u.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1);
  		h64
  			.xor(u)
  			.rotl(27)
  			.multiply( PRIME64_1 )
  			.add( PRIME64_4 );
  		p += 8;
  	}
  	if (p + 4 <= bEnd) {
  		if (isString) {
  			u.fromBits(
  				(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  			,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  			,	0
  			,	0
  			);
  		} else {
  			u.fromBits(
  				(input[p+1] << 8) | input[p]
  			,	(input[p+3] << 8) | input[p+2]
  			,	0
  			,	0
  			);
  		}
  		h64
  			.xor( u.multiply(PRIME64_1) )
  			.rotl(23)
  			.multiply( PRIME64_2 )
  			.add( PRIME64_3 );
  		p += 4;
  	}
  	while (p < bEnd)
  	{
  		u.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0, 0, 0 );
  		h64
  			.xor( u.multiply(PRIME64_5) )
  			.rotl(11)
  			.multiply(PRIME64_1);
  	}
  	h = h64.clone().shiftRight(33);
  	h64.xor(h).multiply(PRIME64_2);
  	h = h64.clone().shiftRight(29);
  	h64.xor(h).multiply(PRIME64_3);
  	h = h64.clone().shiftRight(32);
  	h64.xor(h);
  	this.init( this.seed );
  	return h64
  };
  var xxhash64 = XXH64;

  var lib = {
  	h32: xxhash
  ,	h64: xxhash64
  };
  const xx = lib;

  function xxhash64AsValue(data, seed) {
    return xx.h64(u8aToU8a(data).buffer, seed);
  }

  function xxhash64AsRaw(data, seed) {
    return xxhash64AsValue(data, seed).toString(16);
  }

  function xxhash64AsBn(data, seed) {
    return new BN$8(xxhash64AsRaw(data, seed), 16);
  }

  function xxhashAsU8a(data, bitLength = 64, onlyJs = false) {
    const iterations = Math.ceil(bitLength / 64);
    const u8a = u8aToU8a(data);
    if (isReady() && !onlyJs) {
      return twox(u8a, iterations);
    }
    const result = new Uint8Array(Math.ceil(bitLength / 8));
    for (let seed = 0; seed < iterations; seed++) {
      result.set(xxhash64AsBn(u8a, seed).toArray('le', 8), seed * 8);
    }
    return result;
  }

  const emptyCheck = {
    extrinsic: {},
    payload: {}
  };

  const polkadot = {
    LimitParathreadCommits: emptyCheck,
    OnlyStakingAndClaims: emptyCheck,
    PrevalidateAttests: emptyCheck,
    RestrictFunctionality: emptyCheck,
    TransactionCallFilter: emptyCheck,
    ValidateDoubleVoteReports: emptyCheck
  };

  const shell = {
    DisallowSigned: emptyCheck
  };

  const statemint = {
    ChargeAssetTxPayment: {
      extrinsic: {
        tip: 'Compact<Balance>',
        assetId: 'Option<AssetId>'
      },
      payload: {}
    }
  };

  const CheckMortality = {
    extrinsic: {
      era: 'ExtrinsicEra'
    },
    payload: {
      blockHash: 'Hash'
    }
  };
  const substrate$1 = {
    ChargeTransactionPayment: {
      extrinsic: {
        tip: 'Compact<Balance>'
      },
      payload: {}
    },
    CheckBlockGasLimit: emptyCheck,
    CheckEra: CheckMortality,
    CheckGenesis: {
      extrinsic: {},
      payload: {
        genesisHash: 'Hash'
      }
    },
    CheckMortality,
    CheckNonce: {
      extrinsic: {
        nonce: 'Compact<Index>'
      },
      payload: {}
    },
    CheckSpecVersion: {
      extrinsic: {},
      payload: {
        specVersion: 'u32'
      }
    },
    CheckTxVersion: {
      extrinsic: {},
      payload: {
        transactionVersion: 'u32'
      }
    },
    CheckVersion: {
      extrinsic: {},
      payload: {
        specVersion: 'u32'
      }
    },
    CheckWeight: emptyCheck,
    LockStakingStatus: emptyCheck,
    ValidateEquivocationReport: emptyCheck
  };

  const allExtensions = objectSpread$1({}, substrate$1, polkadot, shell, statemint);
  const fallbackExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];
  function findUnknownExtensions(extensions, userExtensions = {}) {
    const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
    return extensions.filter(k => !names.includes(k));
  }
  function expandExtensionTypes(extensions, type, userExtensions = {}) {
    return extensions
    .map(key => userExtensions[key] || allExtensions[key]).filter(info => !!info).reduce((result, info) => objectSpread$1(result, info[type]), {});
  }

  function decodeEvent(registry, value) {
    if (!value || !value.length) {
      return {
        DataType: Null
      };
    }
    const index = value.subarray(0, 2);
    return {
      DataType: registry.findMetaEvent(index),
      value: {
        data: value.subarray(2),
        index
      }
    };
  }
  var _meta = _classPrivateFieldKey("meta");
  var _method = _classPrivateFieldKey("method");
  var _section = _classPrivateFieldKey("section");
  var _typeDef = _classPrivateFieldKey("typeDef");
  class GenericEventData extends Tuple {
    constructor(registry, value, meta, section = '<unknown>', method = '<unknown>') {
      const fields = (meta === null || meta === void 0 ? void 0 : meta.fields) || [];
      super(registry, fields.map(({
        type
      }) => registry.createLookupType(type)), value);
      Object.defineProperty(this, _meta, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _method, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _section, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _typeDef, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _meta)[_meta] = meta;
      _classPrivateFieldBase(this, _method)[_method] = method;
      _classPrivateFieldBase(this, _section)[_section] = section;
      _classPrivateFieldBase(this, _typeDef)[_typeDef] = fields.map(({
        type
      }) => registry.lookup.getTypeDef(type));
    }
    get meta() {
      return _classPrivateFieldBase(this, _meta)[_meta];
    }
    get method() {
      return _classPrivateFieldBase(this, _method)[_method];
    }
    get section() {
      return _classPrivateFieldBase(this, _section)[_section];
    }
    get typeDef() {
      return _classPrivateFieldBase(this, _typeDef)[_typeDef];
    }
  }
  class GenericEvent extends Struct {
    constructor(registry, _value) {
      const {
        DataType,
        value
      } = decodeEvent(registry, _value);
      super(registry, {
        index: 'EventId',
        data: DataType
      }, value);
    }
    get data() {
      return this.get('data');
    }
    get index() {
      return this.get('index');
    }
    get meta() {
      return this.data.meta;
    }
    get method() {
      return this.data.method;
    }
    get section() {
      return this.data.section;
    }
    get typeDef() {
      return this.data.typeDef;
    }
    toHuman(isExpanded) {
      return objectSpread$1({
        method: this.method,
        section: this.section
      }, isExpanded ? {
        docs: this.meta.docs.map(d => d.toString())
      } : null, super.toHuman(isExpanded));
    }
  }

  const BIT_SIGNED = 0b10000000;
  const BIT_UNSIGNED = 0;
  const EMPTY_U8A$1 = new Uint8Array();
  const DEFAULT_VERSION = 4;
  const IMMORTAL_ERA = new Uint8Array([0]);
  const UNMASK_VERSION = 0b01111111;

  const EXTRINSIC_VERSION = 4;
  class GenericExtrinsicV4 extends Struct {
    constructor(registry, value, {
      isSigned
    } = {}) {
      super(registry, {
        signature: 'ExtrinsicSignatureV4',
        method: 'Call'
      }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
    }
    static decodeExtrinsic(registry, value, isSigned = false) {
      if (value instanceof GenericExtrinsicV4) {
        return value;
      } else if (value instanceof registry.createClass('Call')) {
        return {
          method: value
        };
      } else if (isU8a$1(value)) {
        const signature = registry.createType('ExtrinsicSignatureV4', value, {
          isSigned
        });
        const method = registry.createType('Call', value.subarray(signature.encodedLength));
        return {
          method,
          signature
        };
      }
      return value || {};
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get method() {
      return this.get('method');
    }
    get signature() {
      return this.get('signature');
    }
    get version() {
      return EXTRINSIC_VERSION;
    }
    addSignature(signer, signature, payload) {
      this.signature.addSignature(signer, signature, payload);
      return this;
    }
    sign(account, options) {
      this.signature.sign(this.method, account, options);
      return this;
    }
    signFake(signer, options) {
      this.signature.signFake(this.method, signer, options);
      return this;
    }
  }

  const VERSIONS$1 = ['ExtrinsicUnknown',
  'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];
  class ExtrinsicBase extends Base$3 {
    constructor(registry, value, initialU8aLength) {
      super(registry, value, initialU8aLength);
      const signKeys = Object.keys(registry.getSignedExtensionTypes());
      const getter = key => this._raw.signature[key];
      for (let i = 0; i < signKeys.length; i++) {
        objectProperty(this, signKeys[i], getter);
      }
    }
    get args() {
      return this.method.args;
    }
    get argsDef() {
      return this.method.argsDef;
    }
    get callIndex() {
      return this.method.callIndex;
    }
    get data() {
      return this.method.data;
    }
    get era() {
      return this._raw.signature.era;
    }
    get encodedLength() {
      return this.toU8a().length;
    }
    get isSigned() {
      return this._raw.signature.isSigned;
    }
    get length() {
      return this.toU8a(true).length;
    }
    get meta() {
      return this.method.meta;
    }
    get method() {
      return this._raw.method;
    }
    get nonce() {
      return this._raw.signature.nonce;
    }
    get signature() {
      return this._raw.signature.signature;
    }
    get signer() {
      return this._raw.signature.signer;
    }
    get tip() {
      return this._raw.signature.tip;
    }
    get type() {
      return this._raw.version;
    }
    get version() {
      return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
    }
    is(other) {
      return this.method.is(other);
    }
  }
  var _hashCache = _classPrivateFieldKey("hashCache");
  class GenericExtrinsic extends ExtrinsicBase {
    constructor(registry, value, {
      version
    } = {}) {
      super(registry, GenericExtrinsic._decodeExtrinsic(registry, value, version));
      Object.defineProperty(this, _hashCache, {
        writable: true,
        value: void 0
      });
    }
    static _newFromValue(registry, value, version) {
      if (value instanceof GenericExtrinsic) {
        return value._raw;
      }
      const isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
      const type = VERSIONS$1[version & UNMASK_VERSION] || VERSIONS$1[0];
      return registry.createType(type, value, {
        isSigned,
        version
      });
    }
    static _decodeExtrinsic(registry, value, version = DEFAULT_VERSION) {
      if (isU8a$1(value) || Array.isArray(value) || isHex$1(value)) {
        return GenericExtrinsic._decodeU8a(registry, u8aToU8a$1(value), version);
      } else if (value instanceof registry.createClass('Call')) {
        return GenericExtrinsic._newFromValue(registry, {
          method: value
        }, version);
      }
      return GenericExtrinsic._newFromValue(registry, value, version);
    }
    static _decodeU8a(registry, value, version) {
      if (!value.length) {
        return GenericExtrinsic._newFromValue(registry, new Uint8Array(), version);
      }
      const [offset, length] = compactFromU8a(value);
      const total = offset + length.toNumber();
      assert$h(total <= value.length, () => `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
      const data = value.subarray(offset, total);
      return GenericExtrinsic._newFromValue(registry, data.subarray(1), data[0]);
    }
    get hash() {
      if (!_classPrivateFieldBase(this, _hashCache)[_hashCache]) {
        _classPrivateFieldBase(this, _hashCache)[_hashCache] = super.hash;
      }
      return _classPrivateFieldBase(this, _hashCache)[_hashCache];
    }
    addSignature(signer, signature, payload) {
      this._raw.addSignature(signer, signature, payload);
      _classPrivateFieldBase(this, _hashCache)[_hashCache] = undefined;
      return this;
    }
    sign(account, options) {
      this._raw.sign(account, options);
      _classPrivateFieldBase(this, _hashCache)[_hashCache] = undefined;
      return this;
    }
    signFake(signer, options) {
      this._raw.signFake(signer, options);
      _classPrivateFieldBase(this, _hashCache)[_hashCache] = undefined;
      return this;
    }
    toHex(isBare) {
      return u8aToHex$1(this.toU8a(isBare));
    }
    toHuman(isExpanded) {
      return objectSpread$1({}, {
        isSigned: this.isSigned,
        method: this.method.toHuman(isExpanded)
      }, this.isSigned ? {
        era: this.era.toHuman(isExpanded),
        nonce: this.nonce.toHuman(isExpanded),
        signature: this.signature.toHex(),
        signer: this.signer.toHuman(isExpanded),
        tip: this.tip.toHuman(isExpanded)
      } : null);
    }
    toJSON() {
      return this.toHex();
    }
    toRawType() {
      return 'Extrinsic';
    }
    toU8a(isBare) {
      const encoded = u8aConcat$1(new Uint8Array([this.version]), this._raw.toU8a());
      return isBare ? encoded : compactAddLength(encoded);
    }
  }

  function getTrailingZeros(period) {
    const binary = period.toString(2);
    let index = 0;
    while (binary[binary.length - 1 - index] === '0') {
      index++;
    }
    return index;
  }
  class ImmortalEra extends Raw {
    constructor(registry, value) {
      super(registry, IMMORTAL_ERA);
    }
  }
  class MortalEra extends Tuple {
    constructor(registry, value) {
      super(registry, {
        period: u64,
        phase: u64
      }, MortalEra._decodeMortalEra(registry, value));
    }
    static _decodeMortalEra(registry, value) {
      if (isU8a$1(value) || isHex$1(value) || Array.isArray(value)) {
        return MortalEra._decodeMortalU8a(registry, u8aToU8a$1(value));
      } else if (!value) {
        return [new u64(registry), new u64(registry)];
      } else if (isObject(value)) {
        return MortalEra._decodeMortalObject(registry, value);
      }
      throw new Error('Invalid data passed to Mortal era');
    }
    static _decodeMortalObject(registry, value) {
      const {
        current,
        period
      } = value;
      let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
      calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
      const phase = current % calPeriod;
      const quantizeFactor = Math.max(calPeriod >> 12, 1);
      const quantizedPhase = phase / quantizeFactor * quantizeFactor;
      return [new u64(registry, calPeriod), new u64(registry, quantizedPhase)];
    }
    static _decodeMortalU8a(registry, value) {
      if (value.length === 0) {
        return [new u64(registry), new u64(registry)];
      }
      const first = u8aToBn(value.subarray(0, 1)).toNumber();
      const second = u8aToBn(value.subarray(1, 2)).toNumber();
      const encoded = first + (second << 8);
      const period = 2 << encoded % (1 << 4);
      const quantizeFactor = Math.max(period >> 12, 1);
      const phase = (encoded >> 4) * quantizeFactor;
      assert$h(period >= 4 && phase < period, 'Invalid data passed to Mortal era');
      return [new u64(registry, period), new u64(registry, phase)];
    }
    get encodedLength() {
      return 2;
    }
    get period() {
      return this[0];
    }
    get phase() {
      return this[1];
    }
    toHuman() {
      return {
        period: formatNumber(this.period),
        phase: formatNumber(this.phase)
      };
    }
    toJSON() {
      return this.toHex();
    }
    toU8a(isBare) {
      const period = this.period.toNumber();
      const phase = this.phase.toNumber();
      const quantizeFactor = Math.max(period >> 12, 1);
      const trailingZeros = getTrailingZeros(period);
      const encoded = Math.min(15, Math.max(1, trailingZeros - 1)) + (phase / quantizeFactor << 4);
      const first = encoded >> 8;
      const second = encoded & 0xff;
      return new Uint8Array([second, first]);
    }
    birth(current) {
      return Math.floor((Math.max(bnToBn$1(current).toNumber(), this.phase.toNumber()) - this.phase.toNumber()) / this.period.toNumber()) * this.period.toNumber() + this.phase.toNumber();
    }
    death(current) {
      return this.birth(current) + this.period.toNumber();
    }
  }
  class GenericExtrinsicEra extends Enum {
    constructor(registry, value) {
      super(registry, {
        ImmortalEra,
        MortalEra
      }, GenericExtrinsicEra._decodeExtrinsicEra(value));
    }
    static _decodeExtrinsicEra(value = new Uint8Array()) {
      if (isU8a$1(value)) {
        return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
      } else if (!value) {
        return new Uint8Array([0]);
      } else if (value instanceof GenericExtrinsicEra) {
        return GenericExtrinsicEra._decodeExtrinsicEra(value.toU8a());
      } else if (isHex$1(value)) {
        return GenericExtrinsicEra._decodeExtrinsicEra(hexToU8a$1(value));
      } else if (isObject(value)) {
        const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
        const mortal = entries.find(([k]) => k.toLowerCase() === 'mortalera');
        const immortal = entries.find(([k]) => k.toLowerCase() === 'immortalera');
        return mortal ? {
          MortalEra: mortal[1]
        } : immortal ? {
          ImmortalEra: immortal[1]
        } : {
          MortalEra: value
        };
      }
      throw new Error('Invalid data passed to Era');
    }
    get encodedLength() {
      return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
    }
    get asImmortalEra() {
      assert$h(this.isImmortalEra, () => `Cannot convert '${this.type}' via asImmortalEra`);
      return this.value;
    }
    get asMortalEra() {
      assert$h(this.isMortalEra, () => `Cannot convert '${this.type}' via asMortalEra`);
      return this.value;
    }
    get isImmortalEra() {
      return this.index === 0;
    }
    get isMortalEra() {
      return this.index > 0;
    }
    toU8a(isBare) {
      return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
    }
  }

  const VERSIONS = ['ExtrinsicPayloadUnknown',
  'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];
  class GenericExtrinsicPayload extends Base$3 {
    constructor(registry, value, {
      version
    } = {}) {
      super(registry, GenericExtrinsicPayload.decodeExtrinsicPayload(registry, value, version));
    }
    static decodeExtrinsicPayload(registry, value, version = DEFAULT_VERSION) {
      if (value instanceof GenericExtrinsicPayload) {
        return value._raw;
      }
      return registry.createType(VERSIONS[version] || VERSIONS[0], value, {
        version
      });
    }
    get blockHash() {
      return this._raw.blockHash;
    }
    get era() {
      return this._raw.era;
    }
    get genesisHash() {
      return this._raw.genesisHash || this.registry.createType('Hash');
    }
    get method() {
      return this._raw.method;
    }
    get nonce() {
      return this._raw.nonce;
    }
    get specVersion() {
      return this._raw.specVersion || this.registry.createType('u32');
    }
    get tip() {
      return this._raw.tip || this.registry.createType('Compact<Balance>');
    }
    get transactionVersion() {
      return this._raw.transactionVersion || this.registry.createType('u32');
    }
    eq(other) {
      return this._raw.eq(other);
    }
    sign(signerPair) {
      const signature = this._raw.sign(signerPair);
      return {
        signature: u8aToHex$1(signature)
      };
    }
    toHuman(isExtended) {
      return this._raw.toHuman(isExtended);
    }
    toJSON() {
      return this.toHex();
    }
    toString() {
      return this.toHex();
    }
    toU8a(isBare) {
      return super.toU8a(isBare ? {
        method: true
      } : false);
    }
  }

  class GenericExtrinsicPayloadUnknown extends Struct {
    constructor(registry, value, {
      version = 0
    } = {}) {
      super(registry, {});
      throw new Error(`Unsupported extrinsic payload version ${version}`);
    }
  }

  class GenericExtrinsicUnknown extends Struct {
    constructor(registry, value, {
      isSigned = false,
      version = 0
    } = {}) {
      super(registry, {});
      throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & UNMASK_VERSION}`);
    }
  }

  const knownTypes = {
    address: 'Address',
    blockHash: 'Hash',
    blockNumber: 'BlockNumber',
    era: 'ExtrinsicEra',
    genesisHash: 'Hash',
    method: 'Call',
    nonce: 'Compact<Index>',
    runtimeVersion: 'RuntimeVersion',
    signedExtensions: 'Vec<Text>',
    tip: 'Compact<Balance>',
    version: 'u8'
  };
  class GenericSignerPayload extends Struct {
    constructor(registry, value) {
      const extensionTypes = objectSpread$1({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
      super(registry, objectSpread$1({}, extensionTypes, knownTypes), value);
      this._extraTypes = void 0;
      this._extraTypes = {};
      const getter = key => this.get(key);
      for (const [key, type] of Object.entries(extensionTypes)) {
        if (!knownTypes[key]) {
          this._extraTypes[key] = type;
        }
        objectProperty(this, key, getter);
      }
    }
    get address() {
      return this.get('address');
    }
    get blockHash() {
      return this.get('blockHash');
    }
    get blockNumber() {
      return this.get('blockNumber');
    }
    get era() {
      return this.get('era');
    }
    get genesisHash() {
      return this.get('genesisHash');
    }
    get method() {
      return this.get('method');
    }
    get nonce() {
      return this.get('nonce');
    }
    get runtimeVersion() {
      return this.get('runtimeVersion');
    }
    get signedExtensions() {
      return this.get('signedExtensions');
    }
    get tip() {
      return this.get('tip');
    }
    get version() {
      return this.get('version');
    }
    toPayload() {
      const result = {};
      const keys = Object.keys(this._extraTypes);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const value = this.get(key);
        const isOption = value instanceof Option;
        if (!isOption || value.isSome) {
          result[key] = value.toHex();
        }
      }
      return objectSpread$1(result, {
        address: this.address.toString(),
        blockHash: this.blockHash.toHex(),
        blockNumber: this.blockNumber.toHex(),
        era: this.era.toHex(),
        genesisHash: this.genesisHash.toHex(),
        method: this.method.toHex(),
        nonce: this.nonce.toHex(),
        signedExtensions: this.signedExtensions.map(e => e.toString()),
        specVersion: this.runtimeVersion.specVersion.toHex(),
        tip: this.tip.toHex(),
        transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
        version: this.version.toNumber()
      });
    }
    toRaw() {
      const payload = this.toPayload();
      const data = u8aToHex$1(this.registry.createType('ExtrinsicPayload', payload, {
        version: payload.version
      })
      .toU8a({
        method: true
      }));
      return {
        address: payload.address,
        data,
        type: 'payload'
      };
    }
  }

  function sign(registry, signerPair, u8a, options) {
    const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
    return signerPair.sign(encoded, options);
  }

  var _signOptions = _classPrivateFieldKey("signOptions");
  class GenericExtrinsicPayloadV4 extends Struct {
    constructor(registry, value) {
      super(registry, objectSpread$1({
        method: 'Bytes'
      }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
      Object.defineProperty(this, _signOptions, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _signOptions)[_signOptions] = {
        withType: registry.createType('ExtrinsicSignature') instanceof Enum
      };
    }
    get blockHash() {
      return this.get('blockHash');
    }
    get era() {
      return this.get('era');
    }
    get genesisHash() {
      return this.get('genesisHash');
    }
    get method() {
      return this.get('method');
    }
    get nonce() {
      return this.get('nonce');
    }
    get specVersion() {
      return this.get('specVersion');
    }
    get tip() {
      return this.get('tip');
    }
    get transactionVersion() {
      return this.get('transactionVersion');
    }
    get assetId() {
      return this.get('assetId');
    }
    sign(signerPair) {
      return sign(this.registry, signerPair, this.toU8a({
        method: true
      }), _classPrivateFieldBase(this, _signOptions)[_signOptions]);
    }
  }

  const FAKE_NONE = new Uint8Array();
  const FAKE_SOME = new Uint8Array([1]);
  function toAddress(registry, address) {
    return registry.createType('Address', isU8a$1(address) ? u8aToHex$1(address) : address);
  }
  var _fakePrefix = _classPrivateFieldKey("fakePrefix");
  var _signKeys = _classPrivateFieldKey("signKeys");
  class GenericExtrinsicSignatureV4 extends Struct {
    constructor(registry, value, {
      isSigned
    } = {}) {
      const signTypes = registry.getSignedExtensionTypes();
      super(registry, objectSpread$1(
      {
        signer: 'Address',
        signature: 'ExtrinsicSignature'
      }, signTypes), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
      Object.defineProperty(this, _fakePrefix, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _signKeys, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _fakePrefix)[_fakePrefix] = registry.createType('ExtrinsicSignature') instanceof Enum ? FAKE_SOME : FAKE_NONE;
      _classPrivateFieldBase(this, _signKeys)[_signKeys] = Object.keys(signTypes);
      objectProperties(this, _classPrivateFieldBase(this, _signKeys)[_signKeys], k => this.get(k));
    }
    static decodeExtrinsicSignature(value, isSigned = false) {
      if (!value) {
        return EMPTY_U8A$1;
      } else if (value instanceof GenericExtrinsicSignatureV4) {
        return value;
      }
      return isSigned ? value : EMPTY_U8A$1;
    }
    get encodedLength() {
      return this.isSigned ? super.encodedLength : 0;
    }
    get isSigned() {
      return !this.signature.isEmpty;
    }
    get era() {
      return this.get('era');
    }
    get nonce() {
      return this.get('nonce');
    }
    get signature() {
      return this.multiSignature.value || this.multiSignature;
    }
    get multiSignature() {
      return this.get('signature');
    }
    get signer() {
      return this.get('signer');
    }
    get tip() {
      return this.get('tip');
    }
    _injectSignature(signer, signature, payload) {
      for (let i = 0; i < _classPrivateFieldBase(this, _signKeys)[_signKeys].length; i++) {
        const k = _classPrivateFieldBase(this, _signKeys)[_signKeys][i];
        const v = payload.get(k);
        if (!isUndefined(v)) {
          this.set(k, v);
        }
      }
      this.set('signer', signer);
      this.set('signature', signature);
      return this;
    }
    addSignature(signer, signature, payload) {
      return this._injectSignature(toAddress(this.registry, signer), this.registry.createType('ExtrinsicSignature', signature), new GenericExtrinsicPayloadV4(this.registry, payload));
    }
    createPayload(method, options) {
      const {
        era,
        runtimeVersion: {
          specVersion,
          transactionVersion
        }
      } = options;
      return new GenericExtrinsicPayloadV4(this.registry, objectSpread$1({}, options, {
        era: era || IMMORTAL_ERA,
        method: method.toHex(),
        specVersion,
        transactionVersion
      }));
    }
    sign(method, account, options) {
      assert$h(account && account.addressRaw, () => `Expected a valid keypair for signing, found ${stringify(account)}`);
      const signer = toAddress(this.registry, account.addressRaw);
      const payload = this.createPayload(method, options);
      const signature = this.registry.createType('ExtrinsicSignature', payload.sign(account));
      return this._injectSignature(signer, signature, payload);
    }
    signFake(method, address, options) {
      assert$h(address, () => `Expected a valid address for signing, found ${stringify(address)}`);
      const signer = toAddress(this.registry, address);
      const payload = this.createPayload(method, options);
      const signature = this.registry.createType('ExtrinsicSignature', u8aConcat$1(_classPrivateFieldBase(this, _fakePrefix)[_fakePrefix], new Uint8Array(64).fill(0x42)));
      return this._injectSignature(signer, signature, payload);
    }
    toU8a(isBare) {
      return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A$1;
    }
  }

  function decodeAccountId$1(value) {
    if (isU8a$1(value) || Array.isArray(value)) {
      return u8aToU8a$1(value);
    } else if (isHex$1(value) || isEthereumAddress(value)) {
      return hexToU8a$1(value);
    } else if (isString$1(value)) {
      return u8aToU8a$1(value);
    }
    return value;
  }
  class GenericEthereumAccountId extends U8aFixed {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAccountId$1(value), 160);
    }
    static encode(value) {
      return ethereumEncode(value);
    }
    eq(other) {
      return super.eq(decodeAccountId$1(other));
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.toString();
    }
    toString() {
      return GenericEthereumAccountId.encode(this);
    }
    toRawType() {
      return 'AccountId';
    }
  }

  const PREFIX_1BYTE = 0xef;
  const PREFIX_2BYTE = 0xfc;
  const PREFIX_4BYTE = 0xfd;
  const PREFIX_8BYTE = 0xfe;
  const MAX_1BYTE = new BN$8(PREFIX_1BYTE);
  const MAX_2BYTE = new BN$8(1).shln(16);
  const MAX_4BYTE = new BN$8(1).shln(32);
  function decodeAccountIndex(value) {
    if (value instanceof GenericAccountIndex) {
      return value.toBn();
    } else if (isBn(value) || isNumber$1(value) || isHex$1(value) || isU8a$1(value) || isBigInt$1(value)) {
      return value;
    }
    return decodeAccountIndex(decodeAddress(value));
  }
  class GenericAccountIndex extends u32$1 {
    constructor(registry, value = new BN$8(0)) {
      super(registry, decodeAccountIndex(value));
    }
    static calcLength(_value) {
      const value = bnToBn$1(_value);
      if (value.lte(MAX_1BYTE)) {
        return 1;
      } else if (value.lt(MAX_2BYTE)) {
        return 2;
      } else if (value.lt(MAX_4BYTE)) {
        return 4;
      }
      return 8;
    }
    static readLength(input) {
      const first = input[0];
      if (first === PREFIX_2BYTE) {
        return [1, 2];
      } else if (first === PREFIX_4BYTE) {
        return [1, 4];
      } else if (first === PREFIX_8BYTE) {
        return [1, 8];
      }
      return [0, 1];
    }
    static writeLength(input) {
      switch (input.length) {
        case 2:
          return new Uint8Array([PREFIX_2BYTE]);
        case 4:
          return new Uint8Array([PREFIX_4BYTE]);
        case 8:
          return new Uint8Array([PREFIX_8BYTE]);
        default:
          return new Uint8Array([]);
      }
    }
    eq(other) {
      if (isBn(other) || isNumber$1(other)) {
        return super.eq(other);
      }
      return super.eq(this.registry.createType('AccountIndex', other));
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.toString();
    }
    toString() {
      const length = GenericAccountIndex.calcLength(this);
      return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
    }
    toRawType() {
      return 'AccountIndex';
    }
  }

  const ACCOUNT_ID_PREFIX$1 = new Uint8Array([0xff]);
  function decodeString$1(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 20 ? registry.createType('EthereumAccountId', decoded) : registry.createType('AccountIndex', u8aToBn(decoded, true));
  }
  function decodeU8a$2(registry, value) {
    if (value.length === 20) {
      return registry.createType('EthereumAccountId', value);
    } else if (value[0] === 0xff) {
      return registry.createType('EthereumAccountId', value.subarray(1));
    }
    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createType('AccountIndex', u8aToBn(value.subarray(offset, offset + length), true));
  }
  class GenericEthereumLookupSource extends Base$3 {
    constructor(registry, value = new Uint8Array()) {
      super(registry, GenericEthereumLookupSource._decodeAddress(registry, value));
    }
    static _decodeAddress(registry, value) {
      return value instanceof GenericEthereumLookupSource ? value._raw : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a$1(value) || Array.isArray(value) || isHex$1(value) ? decodeU8a$2(registry, u8aToU8a$1(value)) : isBn(value) || isNumber$1(value) || isBigInt$1(value) ? registry.createType('AccountIndex', value) : decodeString$1(registry, value);
    }
    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + (
      rawLength > 1 ? 1 : 0);
    }
    get _rawLength() {
      return this._raw instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this._raw) : this._raw.encodedLength;
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toRawType() {
      return 'Address';
    }
    toU8a(isBare) {
      const encoded = this._raw.toU8a().subarray(0, this._rawLength);
      return isBare ? encoded : u8aConcat$1(this._raw instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX$1, encoded);
    }
  }

  function decodeAccountId(value) {
    if (isU8a$1(value) || Array.isArray(value)) {
      return u8aToU8a$1(value);
    } else if (!value) {
      return new Uint8Array();
    } else if (isHex$1(value)) {
      return hexToU8a$1(value);
    } else if (isString$1(value)) {
      return decodeAddress(value);
    }
    throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
  }
  class GenericAccountId extends U8aFixed {
    constructor(registry, value) {
      const decoded = decodeAccountId(value);
      assert$h(decoded.length >= 32 || !decoded.some(b => b), () => `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);
      super(registry, decoded, 256);
    }
    eq(other) {
      return super.eq(decodeAccountId(other));
    }
    toHuman() {
      return this.toJSON();
    }
    toJSON() {
      return this.toString();
    }
    toString() {
      return encodeAddress(this, this.registry.chainSS58);
    }
    toRawType() {
      return 'AccountId';
    }
  }

  class GenericBlock extends Struct {
    constructor(registry, value) {
      super(registry, {
        header: 'Header',
        extrinsics: 'Vec<Extrinsic>'
      }, value);
    }
    get contentHash() {
      return this.registry.hash(this.toU8a());
    }
    get extrinsics() {
      return this.get('extrinsics');
    }
    get hash() {
      return this.header.hash;
    }
    get header() {
      return this.get('header');
    }
  }

  function getArgsDef(registry, meta) {
    return meta.fields.reduce((result, {
      name,
      type
    }, index) => {
      result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
      return result;
    }, {});
  }
  function decodeCallViaObject(registry, value, _meta) {
    const {
      args,
      callIndex
    } = value;
    const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex;
    const meta = _meta || registry.findMetaCall(lookupIndex).meta;
    return {
      args,
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  function decodeCallViaU8a(registry, value, _meta) {
    const callIndex = new Uint8Array(2);
    callIndex.set(value.subarray(0, 2), 0);
    const meta = _meta || registry.findMetaCall(callIndex).meta;
    return {
      args: value.subarray(2),
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  function decodeCall(registry, value = new Uint8Array(), _meta) {
    if (isU8a$1(value) || isHex$1(value)) {
      return decodeCallViaU8a(registry, u8aToU8a$1(value), _meta);
    } else if (isObject(value) && value.callIndex && value.args) {
      return decodeCallViaObject(registry, value, _meta);
    }
    throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
  }
  class GenericCallIndex extends U8aFixed {
    constructor(registry, value) {
      super(registry, value, 16);
    }
  }
  class GenericCall extends Struct {
    constructor(registry, value, meta) {
      const decoded = decodeCall(registry, value, meta);
      try {
        super(registry, {
          callIndex: GenericCallIndex,
          args: Struct.with(decoded.argsDef)
        }, decoded);
        this._meta = void 0;
      } catch (error) {
        let method = 'unknown.unknown';
        try {
          const c = registry.findMetaCall(decoded.callIndex);
          method = `${c.section}.${c.method}`;
        } catch (error) {
        }
        throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
      }
      this._meta = decoded.meta;
    }
    get args() {
      return [...this.get('args').values()];
    }
    get argsDef() {
      return getArgsDef(this.registry, this.meta);
    }
    get argsEntries() {
      return [...this.get('args').entries()];
    }
    get callIndex() {
      return this.get('callIndex').toU8a();
    }
    get data() {
      return this.get('args').toU8a();
    }
    get meta() {
      return this._meta;
    }
    get method() {
      return this.registry.findMetaCall(this.callIndex).method;
    }
    get section() {
      return this.registry.findMetaCall(this.callIndex).section;
    }
    is(other) {
      return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
    }
    toHuman(isExpanded) {
      var _call, _call2;
      let call;
      try {
        call = this.registry.findMetaCall(this.callIndex);
      } catch (error) {
      }
      return objectSpread$1({
        args: this.argsEntries.reduce((args, [n, a]) => objectSpread$1(args, {
          [n]: a.toHuman(isExpanded)
        }), {}),
        method: (_call = call) === null || _call === void 0 ? void 0 : _call.method,
        section: (_call2 = call) === null || _call2 === void 0 ? void 0 : _call2.section
      }, isExpanded && call ? {
        docs: call.meta.docs.map(d => d.toString())
      } : null);
    }
    toRawType() {
      return 'Call';
    }
  }

  function createValue(registry, type, value, asArray = true) {
    if (value && isFunction$1(value.unwrapOrDefault)) {
      return value;
    }
    return registry.createType(type, asArray ? isNull(value) || isUndefined(value) ? null : Array.isArray(value) ? value : [value] : value);
  }
  function decodeValue(registry, key, value) {
    return key === 'ss58Format' ? createValue(registry, 'Option<u32>', value, false) : key === 'tokenDecimals' ? createValue(registry, 'Option<Vec<u32>>', value) : key === 'tokenSymbol' ? createValue(registry, 'Option<Vec<Text>>', value) : value;
  }
  function decode(registry, value) {
    return (
    value && isFunction$1(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all, [key, value]) => {
      all[key] = decodeValue(registry, key, value);
      return all;
    }, {
      ss58Format: registry.createType('Option<u32>'),
      tokenDecimals: registry.createType('Option<Vec<u32>>'),
      tokenSymbol: registry.createType('Option<Vec<Text>>')
    });
  }
  class GenericChainProperties extends Json {
    constructor(registry, value) {
      super(registry, decode(registry, value));
    }
    get ss58Format() {
      return this.get('ss58Format');
    }
    get tokenDecimals() {
      return this.get('tokenDecimals');
    }
    get tokenSymbol() {
      return this.get('tokenSymbol');
    }
  }

  const CID_AURA = stringToU8a$1('aura');
  const CID_BABE = stringToU8a$1('BABE');
  const CID_GRPA = stringToU8a$1('FRNK');
  const CID_POW = stringToU8a$1('pow_');
  class GenericConsensusEngineId extends U8aFixed {
    constructor(registry, value) {
      super(registry, isNumber$1(value) ? bnToU8a$1(value, {
        isLe: false
      }) : value, 32);
    }
    get isAura() {
      return this.eq(CID_AURA);
    }
    get isBabe() {
      return this.eq(CID_BABE);
    }
    get isGrandpa() {
      return this.eq(CID_GRPA);
    }
    get isPow() {
      return this.eq(CID_POW);
    }
    _getAuraAuthor(bytes, sessionValidators) {
      return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new BN$8(sessionValidators.length)).toNumber()];
    }
    _getBabeAuthor(bytes, sessionValidators) {
      const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));
      return sessionValidators[digest.value.toNumber()];
    }
    _getBytesAsAuthor(bytes) {
      return this.registry.createType('AccountId', bytes);
    }
    extractAuthor(bytes, sessionValidators) {
      if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {
        if (this.isAura) {
          return this._getAuraAuthor(bytes, sessionValidators);
        } else if (this.isBabe) {
          return this._getBabeAuthor(bytes, sessionValidators);
        }
      }
      if (this.isPow || bytes.length === 20) {
        return this._getBytesAsAuthor(bytes);
      }
      return undefined;
    }
    toHuman() {
      return this.toString();
    }
    toRawType() {
      return 'ConsensusEngineId';
    }
    toString() {
      return this.isAscii ? u8aToString$1(this) : u8aToHex$1(this);
    }
  }

  const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
  function decodeString(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 32 ? registry.createType('AccountId', decoded) : registry.createType('AccountIndex', u8aToBn(decoded, true));
  }
  function decodeU8a$1(registry, value) {
    if (value.length === 32) {
      return registry.createType('AccountId', value);
    } else if (value[0] === 0xff) {
      return registry.createType('AccountId', value.subarray(1));
    }
    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createType('AccountIndex', u8aToBn(value.subarray(offset, offset + length), true));
  }
  class GenericLookupSource extends Base$3 {
    constructor(registry, value = new Uint8Array()) {
      super(registry, GenericLookupSource._decodeAddress(registry, value));
    }
    static _decodeAddress(registry, value) {
      return value instanceof GenericLookupSource ? value._raw : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber$1(value) || isBigInt$1(value) ? registry.createType('AccountIndex', value) : Array.isArray(value) || isHex$1(value) || isU8a$1(value) ? decodeU8a$1(registry, u8aToU8a$1(value)) : decodeString(registry, value);
    }
    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + (
      rawLength > 1 ? 1 : 0);
    }
    get _rawLength() {
      return this._raw instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this._raw) : this._raw.encodedLength;
    }
    toHex() {
      return u8aToHex$1(this.toU8a());
    }
    toRawType() {
      return 'Address';
    }
    toU8a(isBare) {
      const encoded = this._raw.toU8a().subarray(0, this._rawLength);
      return isBare ? encoded : u8aConcat$1(this._raw instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
    }
  }

  function decodeU8a(registry, u8a) {
    if ([0, 32].includes(u8a.length)) {
      return {
        Id: u8a
      };
    } else if (u8a.length === 20) {
      return {
        Address20: u8a
      };
    } else if (u8a.length <= 8) {
      return {
        Index: registry.createType('AccountIndex', u8a).toNumber()
      };
    }
    return u8a;
  }
  function decodeMultiAny(registry, value) {
    if (value instanceof GenericAccountId) {
      return {
        Id: value
      };
    } else if (isU8a$1(value)) {
      return decodeU8a(registry, value);
    } else if (value instanceof GenericMultiAddress) {
      return value;
    } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber$1(value)) {
      return {
        Index: isNumber$1(value) ? value : value.toNumber()
      };
    } else if (isString$1(value)) {
      return decodeU8a(registry, decodeAddress(value.toString()));
    }
    return value;
  }
  class GenericMultiAddress extends Enum {
    constructor(registry, value) {
      super(registry, {
        Id: 'AccountId',
        Index: 'Compact<AccountIndex>',
        Raw: 'Bytes',
        Address32: 'H256',
        Address20: 'H160'
      }, decodeMultiAny(registry, value));
    }
    toString() {
      return this.value.toString();
    }
  }

  const AYE_BITS = 0b10000000;
  const NAY_BITS = 0b00000000;
  const CON_MASK = 0b01111111;
  const DEF_CONV = 0b00000000;
  function decodeVoteBool(value) {
    return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
  }
  function decodeVoteU8a(value) {
    return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
  }
  function decodeVoteType(registry, value) {
    const vote = new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS;
    const conviction = registry.createType('Conviction', value.conviction || DEF_CONV);
    return new Uint8Array([vote | conviction.index]);
  }
  function decodeVote(registry, value) {
    if (isU8a$1(value)) {
      return decodeVoteU8a(value);
    } else if (isUndefined(value) || value instanceof Boolean || isBoolean$1(value)) {
      return decodeVoteBool(new bool(registry, value).isTrue);
    } else if (isNumber$1(value)) {
      return decodeVoteBool(value < 0);
    }
    return decodeVoteType(registry, value);
  }
  class GenericVote extends U8aFixed {
    constructor(registry, value) {
      const decoded = decodeVote(registry, value);
      super(registry, decoded, 8);
      this._aye = void 0;
      this._conviction = void 0;
      this._aye = (decoded[0] & AYE_BITS) === AYE_BITS;
      this._conviction = this.registry.createType('Conviction', decoded[0] & CON_MASK);
    }
    get conviction() {
      return this._conviction;
    }
    get isAye() {
      return this._aye;
    }
    get isNay() {
      return !this.isAye;
    }
    toHuman(isExpanded) {
      return {
        conviction: this.conviction.toHuman(isExpanded),
        vote: this.isAye ? 'Aye' : 'Nay'
      };
    }
    toRawType() {
      return 'Vote';
    }
  }

  const baseTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GenericExtrinsic: GenericExtrinsic,
    GenericExtrinsicEra: GenericExtrinsicEra,
    GenericMortalEra: MortalEra,
    GenericImmortalEra: ImmortalEra,
    GenericExtrinsicPayload: GenericExtrinsicPayload,
    GenericExtrinsicPayloadUnknown: GenericExtrinsicPayloadUnknown,
    GenericExtrinsicUnknown: GenericExtrinsicUnknown,
    GenericSignerPayload: GenericSignerPayload,
    GenericExtrinsicV4: GenericExtrinsicV4,
    GenericExtrinsicPayloadV4: GenericExtrinsicPayloadV4,
    GenericExtrinsicSignatureV4: GenericExtrinsicSignatureV4,
    GenericAccountId: GenericAccountId,
    GenericAccountIndex: GenericAccountIndex,
    GenericBlock: GenericBlock,
    GenericCall: GenericCall,
    GenericChainProperties: GenericChainProperties,
    GenericConsensusEngineId: GenericConsensusEngineId,
    GenericEvent: GenericEvent,
    GenericEventData: GenericEventData,
    GenericLookupSource: GenericLookupSource,
    GenericMultiAddress: GenericMultiAddress,
    GenericAddress: GenericMultiAddress,
    GenericVote: GenericVote,
    GenericEthereumAccountId: GenericEthereumAccountId,
    GenericEthereumLookupSource: GenericEthereumLookupSource,
    BitVec: BitVec,
    bool: bool,
    Bool: bool,
    Bytes: Bytes,
    Data: Data,
    i8: i8,
    I8: i8,
    i16: i16,
    I16: i16,
    i32: i32,
    I32: i32,
    i64: i64,
    I64: i64,
    i128: i128,
    I128: i128,
    i256: i256,
    I256: i256,
    Null: Null,
    StorageKey: StorageKey,
    Text: Text,
    Type: Type,
    u8: u8$1,
    U8: u8$1,
    u16: u16$1,
    U16: u16$1,
    u32: u32$1,
    U32: u32$1,
    u64: u64,
    U64: u64,
    u128: u128,
    U128: u128,
    u256: u256,
    U256: u256,
    usize: usize,
    USize: usize
  });

  function createStorageHasher(registry, hasher) {
    if (hasher.toNumber() >= 2) {
      return registry.createType('StorageHasherV10', hasher.toNumber() + 1);
    }
    return registry.createType('StorageHasherV10', hasher);
  }
  function createStorageType(registry, entryType) {
    if (entryType.isMap) {
      return [{ ...entryType.asMap,
        hasher: createStorageHasher(registry, entryType.asMap.hasher)
      }, 1];
    }
    if (entryType.isDoubleMap) {
      return [{ ...entryType.asDoubleMap,
        hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
        key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
      }, 2];
    }
    return [entryType.asPlain, 0];
  }
  function convertModule(registry, mod) {
    const storage = mod.storage.unwrapOr(null);
    return registry.createType('ModuleMetadataV10', { ...mod,
      storage: storage ? { ...storage,
        items: storage.items.map(item => ({ ...item,
          type: registry.createType('StorageEntryTypeV10', ...createStorageType(registry, item.type))
        }))
      } : null
    });
  }
  function toV10(registry, {
    modules
  }) {
    return registry.createType('MetadataV10', {
      modules: modules.map(mod => convertModule(registry, mod))
    });
  }

  function toV11(registry, {
    modules
  }) {
    return registry.createType('MetadataV11', {
      extrinsic: {
        signedExtensions: [],
        version: 0
      },
      modules
    });
  }

  function toV12(registry, {
    extrinsic,
    modules
  }) {
    return registry.createType('MetadataV12', {
      extrinsic,
      modules: modules.map(mod => registry.createType('ModuleMetadataV12', { ...mod,
        index: 255
      }))
    });
  }

  function toV13(registry, metadata) {
    return registry.createType('MetadataV13', metadata);
  }

  const BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];
  function compatType(compatTypes, _type) {
    const type = _type.toString();
    const index = compatTypes.findIndex(({
      def
    }) => def.HistoricMetaCompat === type);
    if (index !== -1) {
      return index;
    }
    return compatTypes.push({
      def: {
        HistoricMetaCompat: type
      }
    }) - 1;
  }
  function makeTupleType(compatTypes, entries) {
    return compatTypes.push({
      def: {
        Tuple: entries
      }
    }) - 1;
  }
  function makeVariantType(modName, variantType, compatTypes, variants) {
    return compatTypes.push({
      def: {
        Variant: {
          variants
        }
      },
      path: [`pallet_${modName.toString()}`, 'pallet', variantType]
    }) - 1;
  }
  function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
      OriginCaller: {
        _enum: modules.map((mod, index) => [mod.name.toString(), metaVersion >= 12 ? mod.index.toNumber() : index]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
          for (let i = Object.keys(result).length; i < index; i++) {
            result[`Empty${i}`] = 'Null';
          }
          result[name] = typesKnown.knownOrigins[name] || 'Null';
          return result;
        }, {})
      }
    });
  }
  function setTypeOverride(sectionTypes, types) {
    types.forEach(type => {
      const override = Object.keys(sectionTypes).find(aliased => type.eq(aliased));
      if (override) {
        type.setOverride(sectionTypes[override]);
      } else {
        const orig = type.toString();
        const alias = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);
        if (orig !== alias) {
          type.setOverride(alias);
        }
      }
    });
  }
  function convertCalls(compatTypes, registry, modName, calls, sectionTypes) {
    const variants = calls.map(({
      args,
      docs,
      name
    }, index) => {
      setTypeOverride(sectionTypes, args.map(({
        type
      }) => type));
      return registry.createType('SiVariant', {
        docs,
        fields: args.map(({
          name,
          type
        }) => registry.createType('SiField', {
          name,
          type: compatType(compatTypes, type)
        })),
        index,
        name
      });
    });
    return registry.createType('PalletCallMetadataV14', {
      type: makeVariantType(modName, 'Call', compatTypes, variants)
    });
  }
  function convertConstants(compatTypes, registry, constants, sectionTypes) {
    return constants.map(({
      docs,
      name,
      type,
      value
    }) => {
      setTypeOverride(sectionTypes, [type]);
      return registry.createType('PalletConstantMetadataV14', {
        docs,
        name,
        type: compatType(compatTypes, type),
        value
      });
    });
  }
  function convertErrors(compatTypes, registry, modName, errors, _sectionTypes) {
    const variants = errors.map(({
      docs,
      name
    }, index) => registry.createType('SiVariant', {
      docs,
      fields: [],
      index,
      name
    }));
    return registry.createType('PalletErrorMetadataV14', {
      type: makeVariantType(modName, 'Error', compatTypes, variants)
    });
  }
  function convertEvents(compatTypes, registry, modName, events, sectionTypes) {
    const variants = events.map(({
      args,
      docs,
      name
    }, index) => {
      setTypeOverride(sectionTypes, args);
      return registry.createType('SiVariant', {
        docs,
        fields: args.map(t => registry.createType('SiField', {
          type: compatType(compatTypes, t)
        })),
        index,
        name
      });
    });
    return registry.createType('PalletEventMetadataV14', {
      type: makeVariantType(modName, 'Event', compatTypes, variants)
    });
  }
  function createMapEntry(compatTypes, registry, sectionTypes, {
    hashers,
    keys,
    value
  }) {
    setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);
    return registry.createType('StorageEntryTypeV14', {
      Map: {
        hashers,
        key: hashers.length === 1 ? compatType(compatTypes, keys[0]) : makeTupleType(compatTypes, keys.map(t => compatType(compatTypes, t))),
        value: compatType(compatTypes, value)
      }
    });
  }
  function convertStorage(compatTypes, registry, {
    items,
    prefix
  }, sectionTypes) {
    return registry.createType('PalletStorageMetadataV14', {
      items: items.map(({
        docs,
        fallback,
        modifier,
        name,
        type
      }) => {
        let entryType;
        if (type.isPlain) {
          const plain = type.asPlain;
          setTypeOverride(sectionTypes, [plain]);
          entryType = registry.createType('StorageEntryTypeV14', {
            Plain: compatType(compatTypes, plain)
          });
        } else if (type.isMap) {
          const map = type.asMap;
          entryType = createMapEntry(compatTypes, registry, sectionTypes, {
            hashers: [map.hasher],
            keys: [map.key],
            value: map.value
          });
        } else if (type.isDoubleMap) {
          const dm = type.asDoubleMap;
          entryType = createMapEntry(compatTypes, registry, sectionTypes, {
            hashers: [dm.hasher, dm.key2Hasher],
            keys: [dm.key1, dm.key2],
            value: dm.value
          });
        } else {
          const nm = type.asNMap;
          entryType = createMapEntry(compatTypes, registry, sectionTypes, {
            hashers: nm.hashers,
            keys: nm.keyVec,
            value: nm.value
          });
        }
        return registry.createType('StorageEntryMetadataV14', {
          docs,
          fallback,
          modifier,
          name,
          type: entryType
        });
      }),
      prefix
    });
  }
  function convertExtrinsic(registry, {
    signedExtensions,
    version
  }) {
    return registry.createType('ExtrinsicMetadataV14', {
      signedExtensions: signedExtensions.map(identifier => ({
        identifier,
        type: 0
      })),
      type: 0,
      version: version
    });
  }
  function createPallet(compatTypes, registry, mod, {
    calls,
    constants,
    errors,
    events,
    storage
  }) {
    const sectionTypes = typesKnown.getModuleTypes(registry, stringCamelCase(mod.name));
    return registry.createType('PalletMetadataV14', {
      calls: calls && convertCalls(compatTypes, registry, mod.name, calls, sectionTypes),
      constants: convertConstants(compatTypes, registry, constants, sectionTypes),
      errors: errors && convertErrors(compatTypes, registry, mod.name, errors, sectionTypes),
      events: events && convertEvents(compatTypes, registry, mod.name, events, sectionTypes),
      index: mod.index,
      name: mod.name,
      storage: storage && convertStorage(compatTypes, registry, storage, sectionTypes)
    });
  }
  function toV14(registry, v13, metaVersion) {
    const compatTypes = [];
    compatType(compatTypes, 'Null');
    registerOriginCaller(registry, v13.modules, metaVersion);
    const extrinsic = convertExtrinsic(registry, v13.extrinsic);
    const pallets = v13.modules.map(mod => createPallet(compatTypes, registry, mod, {
      calls: mod.calls.unwrapOr(null),
      constants: mod.constants,
      errors: mod.errors.length ? mod.errors : null,
      events: mod.events.unwrapOr(null),
      storage: mod.storage.unwrapOr(null)
    }));
    return registry.createType('MetadataV14', {
      extrinsic,
      lookup: {
        types: compatTypes.map((type, id) => registry.createType('PortableType', {
          id,
          type
        }))
      },
      pallets
    });
  }

  function toLatest(registry, v14, _metaVersion) {
    return v14;
  }

  const MAGIC_NUMBER = 0x6174656d;
  class MagicNumber extends u32$1 {
    constructor(registry, value) {
      super(registry, value);
      if (!this.isEmpty) {
        assert$h(this.eq(MAGIC_NUMBER), () => `MagicNumber mismatch: expected ${registry.createType('u32', MAGIC_NUMBER).toHex()}, found ${this.toHex()}`);
      }
    }
  }

  const LATEST_VERSION = 14;
  var _converted = _classPrivateFieldKey("converted");
  var _assertVersion = _classPrivateFieldKey("assertVersion");
  var _getVersion = _classPrivateFieldKey("getVersion");
  var _metadata$1 = _classPrivateFieldKey("metadata");
  class MetadataVersioned extends Struct {
    constructor(registry, value) {
      super(registry, {
        magicNumber: MagicNumber,
        metadata: 'MetadataAll'
      }, value);
      Object.defineProperty(this, _converted, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _assertVersion, {
        writable: true,
        value: version => {
          assert$h(this.version <= version, () => `Cannot convert metadata from version ${this.version} to ${version}`);
          return this.version === version;
        }
      });
      Object.defineProperty(this, _getVersion, {
        writable: true,
        value: (version, fromPrev) => {
          const asCurr = `asV${version}`;
          const asPrev = version === 'latest' ? `asV${LATEST_VERSION}` : `asV${version - 1}`;
          if (version !== 'latest' && _classPrivateFieldBase(this, _assertVersion)[_assertVersion](version)) {
            return _classPrivateFieldBase(this, _metadata$1)[_metadata$1]()[asCurr];
          }
          if (!_classPrivateFieldBase(this, _converted)[_converted].has(version)) {
            _classPrivateFieldBase(this, _converted)[_converted].set(version, fromPrev(this.registry, this[asPrev], this.version));
          }
          return _classPrivateFieldBase(this, _converted)[_converted].get(version);
        }
      });
      Object.defineProperty(this, _metadata$1, {
        writable: true,
        value: () => {
          return this.get('metadata');
        }
      });
    }
    get asCallsOnly() {
      return new MetadataVersioned(this.registry, {
        magicNumber: this.magicNumber,
        metadata: this.registry.createType('MetadataAll', toCallsOnly(this.registry, this.asLatest), LATEST_VERSION)
      });
    }
    get asV9() {
      _classPrivateFieldBase(this, _assertVersion)[_assertVersion](9);
      return _classPrivateFieldBase(this, _metadata$1)[_metadata$1]().asV9;
    }
    get asV10() {
      return _classPrivateFieldBase(this, _getVersion)[_getVersion](10, toV10);
    }
    get asV11() {
      return _classPrivateFieldBase(this, _getVersion)[_getVersion](11, toV11);
    }
    get asV12() {
      return _classPrivateFieldBase(this, _getVersion)[_getVersion](12, toV12);
    }
    get asV13() {
      return _classPrivateFieldBase(this, _getVersion)[_getVersion](13, toV13);
    }
    get asV14() {
      return _classPrivateFieldBase(this, _getVersion)[_getVersion](14, toV14);
    }
    get asLatest() {
      return _classPrivateFieldBase(this, _getVersion)[_getVersion]('latest', toLatest);
    }
    get magicNumber() {
      return this.get('magicNumber');
    }
    get version() {
      return _classPrivateFieldBase(this, _metadata$1)[_metadata$1]().index;
    }
    getUniqTypes(throwError) {
      return getUniqTypes(this.registry, this.asLatest, throwError);
    }
    toJSON() {
      this.asLatest;
      return super.toJSON();
    }
  }

  const VERSION_IDX = 4;
  const EMPTY_METADATA = new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]);
  const EMPTY_U8A = new Uint8Array();
  function toU8a(value = EMPTY_U8A) {
    if (isHex$1(value)) {
      return toU8a(u8aToU8a$1(value));
    } else if (isU8a$1(value)) {
      return value.length === 0 ? EMPTY_METADATA : value;
    }
    throw new Error('Invalid type passed to Metadata constructor');
  }
  function decodeMetadata(registry, _value) {
    if (isU8a$1(_value) || !_value || isHex$1(_value)) {
      const value = toU8a(_value);
      const version = value[VERSION_IDX];
      try {
        return new MetadataVersioned(registry, value);
      } catch (error) {
        if (version === 9) {
          value[VERSION_IDX] = 10;
          return decodeMetadata(registry, value);
        }
        throw error;
      }
    }
    return new MetadataVersioned(registry, _value);
  }
  class Metadata extends MetadataVersioned {
    constructor(registry, value) {
      super(registry, decodeMetadata(registry, value));
    }
  }

  function objectNameFirstLower({
    name
  }) {
    return stringLowerFirst(name);
  }
  function objectNameToCamel({
    name
  }) {
    return stringCamelCase(name);
  }
  function objectNameToString({
    name
  }) {
    return name.toString();
  }

  function decorateConstants(registry, {
    pallets
  }, _version) {
    const result = {};
    for (let i = 0; i < pallets.length; i++) {
      const {
        constants,
        name
      } = pallets[i];
      if (!constants.isEmpty) {
        lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, constant => {
          const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a$1(constant.value.toHex())]);
          codec.meta = constant;
          return codec;
        }, objectNameToCamel));
      }
    }
    return result;
  }

  function variantToMeta(lookup, variant) {
    return objectSpread$1({
      args: variant.fields.map(({
        type
      }) => lookup.getTypeDef(type).type)
    }, variant);
  }
  function decorateErrors(registry, {
    lookup,
    pallets
  }, version) {
    const result = {};
    for (let i = 0; i < pallets.length; i++) {
      const {
        errors,
        index,
        name
      } = pallets[i];
      if (errors.isSome) {
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, variant => ({
          is: ({
            error,
            index
          }) => index.eq(sectionIndex) && error.eq(variant.index),
          meta: registry.createType('ErrorMetadataLatest', variantToMeta(lookup, variant))
        })));
      }
    }
    return result;
  }

  function filterEventsSome({
    events
  }) {
    return events.isSome;
  }
  function decorateEvents(registry, {
    lookup,
    pallets
  }, version) {
    const result = {};
    const filtered = pallets.filter(filterEventsSome);
    for (let i = 0; i < filtered.length; i++) {
      const {
        events,
        index,
        name
      } = filtered[i];
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events.unwrap(), objectNameToString, variant => ({
        is: eventRecord => sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
        meta: registry.createType('EventMetadataLatest', variantToMeta(lookup, variant))
      })));
    }
    return result;
  }

  function isTx(tx, callIndex) {
    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
  }
  function createUnchecked(registry, section, callIndex, callMetadata) {
    const expectedArgs = callMetadata.fields;
    const funcName = stringCamelCase(callMetadata.name);
    const extrinsicFn = (...args) => {
      assert$h(expectedArgs.length === args.length, () => `Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
      return registry.createType('Call', {
        args,
        callIndex
      }, callMetadata);
    };
    extrinsicFn.is = tx => isTx(tx, callIndex);
    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section;
    extrinsicFn.toJSON = () => callMetadata.toJSON();
    return extrinsicFn;
  }

  function filterCallsSome({
    calls
  }) {
    return calls.isSome;
  }
  function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
    const {
      fields,
      index
    } = variant;
    const args = new Array(fields.length);
    for (let a = 0; a < fields.length; a++) {
      const {
        name,
        type,
        typeName
      } = fields[a];
      args[a] = objectSpread$1({
        name: stringCamelCase(name.unwrapOr(`param${a}`)),
        type: getSiName(lookup, type)
      }, typeName.isSome ? {
        typeName: typeName.unwrap()
      } : null);
    }
    return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createType('FunctionMetadataLatest', objectSpread$1({
      args
    }, variant)));
  }
  function decorateExtrinsics(registry, {
    lookup,
    pallets
  }, version) {
    const result = {};
    const filtered = pallets.filter(filterCallsSome);
    for (let i = 0; i < filtered.length; i++) {
      const {
        calls,
        index,
        name
      } = filtered[i];
      const sectionName = stringCamelCase(name);
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, variant => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    }
    return result;
  }

  const DEFAULT_FN = data => xxhashAsU8a(data, 128);
  const HASHERS = {
    Blake2_128: data =>
    blake2AsU8a(data, 128),
    Blake2_128Concat: data =>
    u8aConcat$1(blake2AsU8a(data, 128), u8aToU8a$1(data)),
    Blake2_256: data =>
    blake2AsU8a(data, 256),
    Identity: data => u8aToU8a$1(data),
    Twox128: data => xxhashAsU8a(data, 128),
    Twox256: data => xxhashAsU8a(data, 256),
    Twox64Concat: data => u8aConcat$1(xxhashAsU8a(data, 64), u8aToU8a$1(data))
  };
  function getHasher(hasher) {
    return HASHERS[hasher.type] || DEFAULT_FN;
  }

  function createKeyRaw(registry, itemFn, keys, hashers, args) {
    const extra = new Array(keys.length);
    for (let i = 0; i < keys.length; i++) {
      extra[i] = getHasher(hashers[i])(registry.createType(registry.createLookupType(keys[i]), args[i]).toU8a());
    }
    return u8aConcat$1(xxhashAsU8a(itemFn.prefix, 128), xxhashAsU8a(itemFn.method, 128), ...extra);
  }
  function filterDefined(a) {
    return !isUndefined(a);
  }
  function createKey(registry, itemFn, keys, hashers, args) {
    const {
      method,
      section
    } = itemFn;
    assert$h(Array.isArray(args), () => `Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments`);
    assert$h(args.filter(filterDefined).length === keys.length, () => `Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments, found [${args.join(', ')}]`);
    return compactAddLength(createKeyRaw(registry, itemFn, keys, hashers, args));
  }
  function expandWithMeta({
    meta,
    method,
    prefix,
    section
  }, _storageFn) {
    const storageFn = _storageFn;
    storageFn.meta = meta;
    storageFn.method = stringLowerFirst(method);
    storageFn.prefix = prefix;
    storageFn.section = section;
    storageFn.toJSON = () => objectSpread$1({
      storage: {
        method,
        prefix,
        section
      }
    }, meta.toJSON());
    return storageFn;
  }
  function extendHeadMeta(registry, {
    meta: {
      docs,
      name,
      type
    },
    section
  }, {
    method
  }, iterFn) {
    const outputType = registry.createLookupType(type.asMap.key);
    iterFn.meta = registry.createType('StorageEntryMetadataLatest', {
      docs,
      fallback: registry.createType('Bytes'),
      modifier: registry.createType('StorageEntryModifierLatest', 1),
      name,
      type: registry.createType('StorageEntryTypeLatest', outputType, 0)
    });
    return (...args) => registry.createType('StorageKey', iterFn(...args), {
      method,
      section
    });
  }
  function extendPrefixedMap(registry, itemFn, storageFn) {
    const {
      meta: {
        type
      },
      method,
      section
    } = itemFn;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
      assert$h(args.length === 0 || type.isMap && args.length < type.asMap.hashers.length, () => `Iteration ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs arguments to be at least one less than the full arguments, found [${args.join(', ')}]`);
      if (args.length) {
        if (type.isMap) {
          const {
            hashers,
            key
          } = type.asMap;
          const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
          return new Raw(registry, createKeyRaw(registry, itemFn, keysVec.slice(0, args.length), hashers.slice(0, args.length), args));
        }
      }
      return new Raw(registry, createKeyRaw(registry, itemFn, [], [], []));
    });
    return storageFn;
  }
  function createFunction(registry, itemFn, options) {
    const {
      meta: {
        type
      }
    } = itemFn;
    let cacheKey = null;
    const storageFn = expandWithMeta(itemFn, (...args) => {
      if (type.isPlain) {
        if (!cacheKey) {
          cacheKey = options.skipHashing ? compactAddLength(u8aToU8a$1(options.key)) : createKey(registry, itemFn, [], [], []);
        }
        return cacheKey;
      }
      const {
        hashers,
        key
      } = type.asMap;
      return hashers.length === 1 ? createKey(registry, itemFn, [key], hashers, args) : createKey(registry, itemFn, registry.lookup.getSiType(key).def.asTuple, hashers, args);
    });
    if (type.isMap) {
      extendPrefixedMap(registry, itemFn, storageFn);
    }
    storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength(storageFn())[1];
    return storageFn;
  }

  function findSiPrimitive(registry, _prim) {
    const prim = _prim.toLowerCase();
    return registry.lookup.types.find(t => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
  }
  function findSiType(registry, orig) {
    let portable = findSiPrimitive(registry, orig);
    if (!portable && orig === 'Bytes') {
      const u8 = findSiPrimitive(registry, 'u8');
      if (u8) {
        portable = registry.lookup.types.find(t => t.type.def.isSequence && t.type.def.asSequence.type.eq(u8.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(orig));
      }
    }
    if (!portable) {
      console.warn(`Unable to map ${orig} to a lookup index`);
    }
    return portable;
  }
  function createRuntimeFunction({
    method,
    prefix,
    section
  }, key, {
    docs,
    type
  }) {
    return registry => {
      var _findSiType;
      return createFunction(registry, {
        meta: registry.createType('StorageEntryMetadataLatest', {
          docs: registry.createType('Vec<Text>', [docs]),
          modifier: registry.createType('StorageEntryModifierLatest', 'Required'),
          name: registry.createType('Text', method),
          toJSON: () => key,
          type: registry.createType('StorageEntryTypeLatest', {
            Plain: ((_findSiType = findSiType(registry, type)) === null || _findSiType === void 0 ? void 0 : _findSiType.id) || 0
          })
        }),
        method,
        prefix,
        section
      }, {
        key,
        skipHashing: true
      });
    };
  }

  const prefix = 'Substrate';
  const section = 'substrate';
  function createSubstrateFn(method, key, meta) {
    return createRuntimeFunction({
      method,
      prefix,
      section
    }, key, meta);
  }
  const substrate = {
    changesTrieConfig: createSubstrateFn('changesTrieConfig', ':changes_trie', {
      docs: 'Changes trie configuration is stored under this key.',
      type: 'u32'
    }),
    childStorageKeyPrefix: createSubstrateFn('childStorageKeyPrefix', ':child_storage:', {
      docs: 'Prefix of child storage keys.',
      type: 'u32'
    }),
    code: createSubstrateFn('code', ':code', {
      docs: 'Wasm code of the runtime.',
      type: 'Bytes'
    }),
    extrinsicIndex: createSubstrateFn('extrinsicIndex', ':extrinsic_index', {
      docs: 'Current extrinsic index (u32) is stored under this key.',
      type: 'u32'
    }),
    heapPages: createSubstrateFn('heapPages', ':heappages', {
      docs: 'Number of wasm linear memory pages required for execution of the runtime.',
      type: 'u64'
    })
  };

  function getStorage(registry) {
    const storage = {};
    const entries = Object.entries(substrate);
    for (let e = 0; e < entries.length; e++) {
      storage[entries[e][0]] = entries[e][1](registry);
    }
    return {
      substrate: storage
    };
  }

  const VERSION_NAME = 'palletVersion';
  const VERSION_KEY = ':__STORAGE_VERSION__:';
  const VERSION_DOCS = {
    docs: 'Returns the current pallet version from storage',
    type: 'u16'
  };
  function decorateStorage(registry, {
    pallets
  }, _metaVersion) {
    const result = getStorage(registry);
    for (let i = 0; i < pallets.length; i++) {
      const {
        name,
        storage
      } = pallets[i];
      if (storage.isSome) {
        const section = stringCamelCase(name);
        const {
          items,
          prefix: _prefix
        } = storage.unwrap();
        const prefix = _prefix.toString();
        lazyMethod(result, section, () => lazyMethods({
          palletVersion: createRuntimeFunction({
            method: VERSION_NAME,
            prefix,
            section
          }, createKeyRaw(registry, {
            method: VERSION_KEY,
            prefix: name.toString()
          }, [], [], []), VERSION_DOCS)(registry)
        }, items, meta => createFunction(registry, {
          meta,
          method: meta.name.toString(),
          prefix,
          section
        }, {}), objectNameFirstLower));
      }
    }
    return result;
  }

  function expandMetadata(registry, metadata) {
    assert$h(metadata instanceof Metadata, 'You need to pass a valid Metadata instance to Decorated');
    const latest = metadata.asLatest;
    const version = metadata.version;
    return {
      consts: decorateConstants(registry, latest),
      errors: decorateErrors(registry, latest, version),
      events: decorateEvents(registry, latest, version),
      query: decorateStorage(registry, latest),
      registry,
      tx: decorateExtrinsics(registry, latest, version)
    };
  }

  const TYPE_UNWRAP = {
    toNumber: () => -1
  };
  const PRIMITIVE_ALIAS = {
    Char: 'u32',
    Str: 'Text'
  };
  const PATHS_ALIAS = splitNamespace([
  '*_runtime::Call', '*_runtime::Event',
  'pallet_democracy::vote::Vote', 'pallet_identity::types::Data',
  'sp_core::crypto::AccountId32', 'sp_runtime::generic::era::Era', 'sp_runtime::multiaddress::MultiAddress',
  'account::AccountId20', 'polkadot_runtime_common::claims::EthereumAddress',
  'primitive_types::*', 'sp_arithmetic::per_things::*',
  'ink_env::types::*']);
  const PATHS_SET = splitNamespace(['pallet_identity::types::BitFlags']);
  const WRAPPERS = ['BoundedBTreeMap', 'BoundedVec', 'Box', 'BTreeMap', 'Cow', 'Result', 'Option', 'WeakBoundedVec', 'WrapperOpaque'];
  const RESERVED = ['entries', 'hash', 'keys', 'new', 'size'];
  function splitNamespace(values) {
    return values.map(v => v.split('::'));
  }
  function createNamespace({
    path
  }) {
    return sanitizeDocs(path).join('::');
  }
  function sanitizeDocs(docs) {
    return docs.map(d => d.toString());
  }
  function matchParts(first, second) {
    return first.length === second.length && first.every((a, index) => {
      const b = second[index].toString();
      if (a === '*' || a === b) {
        return true;
      }
      if (a.includes('*') && a.includes('_') && b.includes('_')) {
        const suba = a.split('_');
        const subb = b.split('_');
        if (suba[0] === '*') {
          while (suba.length < subb.length) {
            subb.shift();
          }
        }
        return matchParts(suba, subb);
      }
      return false;
    });
  }
  function getAliasPath(path) {
    return path.length && PATHS_ALIAS.some(p => matchParts(p, path)) ? path[path.length - 1].toString() : null;
  }
  function removeDuplicateNames(lookup, names) {
    const rewrite = {};
    return names.map(([lookupIndex, name, params]) => {
      if (!name) {
        return [lookupIndex, null, params];
      }
      const allSame = names.filter(([, oName]) => name === oName);
      const anyDiff = allSame.some(([oIndex,, oParams]) => lookupIndex !== oIndex && (params.length !== oParams.length || params.some((p, index) => !p.name.eq(oParams[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== oParams[index].type.unwrapOr(TYPE_UNWRAP).toNumber())));
      if (!anyDiff || !allSame[0][2].length) {
        return [lookupIndex, name, params];
      }
      const paramIdx = allSame[0][2].findIndex(({
        type
      }, index) => allSame.every(([,, params]) => params[index].type.isSome) && allSame.every(([,, params], aIndex) => aIndex === 0 || !params[index].type.eq(type)));
      if (paramIdx === -1) {
        return [lookupIndex, name, params];
      }
      const adjusted = allSame.map(([oIndex, oName, oParams]) => {
        const {
          def,
          path
        } = lookup.getSiType(oParams[paramIdx].type.unwrap());
        if (!def.isPrimitive && !path.length) {
          return [oIndex, null, params];
        }
        return [oIndex, def.isPrimitive ? `${oName}${def.asPrimitive.toString()}` : `${oName}${path[path.length - 1].toString()}`, params];
      });
      const noDupes = adjusted.every(([i, n]) => !!n && !adjusted.some(([ai, an]) => i !== ai && n === an));
      if (noDupes) {
        adjusted.forEach(([index, name]) => {
          rewrite[index] = name;
        });
      }
      return noDupes ? [lookupIndex, name, params] : [lookupIndex, null, params];
    }).filter(n => !!n[1]).map(([lookupIndex, name, params]) => [lookupIndex, rewrite[lookupIndex] || name, params]);
  }
  function extractName(types, {
    id,
    type: {
      params,
      path
    }
  }) {
    const lookupIndex = id.toNumber();
    if (!path.length || WRAPPERS.includes(path[path.length - 1].toString())) {
      return [lookupIndex, null, []];
    }
    const parts = path.map(p => stringUpperFirst(stringCamelCase(p))).filter((p, index) => (
    index !== 1 || !['Generic', 'Misc', 'Pallet', 'Traits', 'Types'].includes(p.toString())) && (
    index === path.length - 1 || p.toLowerCase() !== path[index + 1].toLowerCase()));
    let typeName = parts.join('');
    if (parts.length === 2 && parts[parts.length - 1] === 'RawOrigin' && params.length === 2 && params[1].type.isSome) {
      const instanceType = types[params[1].type.unwrap().toNumber()];
      if (instanceType.type.path.length === 2) {
        typeName = `${typeName}${instanceType.type.path[1].toString()}`;
      }
    }
    return [lookupIndex, typeName, params];
  }
  function registerTypes(lookup, lookups, names, params) {
    lookup.registry.register(lookups);
    if (params.SpRuntimeUncheckedExtrinsic) {
      const [addrParam,, sigParam] = params.SpRuntimeUncheckedExtrinsic;
      const siAddress = lookup.getSiType(addrParam.type.unwrap());
      const siSignature = lookup.getSiType(sigParam.type.unwrap());
      const nsSignature = createNamespace(siSignature);
      let nsAccountId = createNamespace(siAddress);
      const isMultiAddress = nsAccountId === 'sp_runtime::multiaddress::MultiAddress';
      if (isMultiAddress) {
        const [idParam] = siAddress.params;
        nsAccountId = createNamespace(lookup.getSiType(idParam.type.unwrap()));
      }
      lookup.registry.register({
        AccountId: ['sp_core::crypto::AccountId32'].includes(nsAccountId) ? 'AccountId32' : ['account::AccountId20', 'primitive_types::H160'].includes(nsAccountId) ? 'AccountId20' : 'AccountId32',
        Address: isMultiAddress ? 'MultiAddress' : 'AccountId',
        ExtrinsicSignature: ['sp_runtime::MultiSignature'].includes(nsSignature) ? 'MultiSignature' : names[sigParam.type.unwrap().toNumber()] || 'MultiSignature'
      });
    }
  }
  function extractNames(lookup, types) {
    const dedup = removeDuplicateNames(lookup, types.map(t => extractName(types, t)));
    const lookups = {};
    const names = {};
    const params = {};
    for (let i = 0; i < dedup.length; i++) {
      const [lookupIndex, name, p] = dedup[i];
      names[lookupIndex] = name;
      lookups[name] = lookup.registry.createLookupType(lookupIndex);
      params[name] = p;
    }
    registerTypes(lookup, lookups, names, params);
    return names;
  }
  function extractTypeMap(types) {
    const result = {};
    for (let i = 0; i < types.length; i++) {
      const p = types[i];
      result[p.id.toNumber()] = p;
    }
    return result;
  }
  var _names = _classPrivateFieldKey("names");
  var _typeDefs = _classPrivateFieldKey("typeDefs");
  var _types = _classPrivateFieldKey("types");
  var _createSiDef = _classPrivateFieldKey("createSiDef");
  var _getLookupId = _classPrivateFieldKey("getLookupId");
  var _extract = _classPrivateFieldKey("extract");
  var _extractArray = _classPrivateFieldKey("extractArray");
  var _extractBitSequence = _classPrivateFieldKey("extractBitSequence");
  var _extractCompact = _classPrivateFieldKey("extractCompact");
  var _extractComposite = _classPrivateFieldKey("extractComposite");
  var _extractCompositeSet = _classPrivateFieldKey("extractCompositeSet");
  var _extractFields = _classPrivateFieldKey("extractFields");
  var _extractFieldsAlias = _classPrivateFieldKey("extractFieldsAlias");
  var _extractHistoric = _classPrivateFieldKey("extractHistoric");
  var _extractPrimitive = _classPrivateFieldKey("extractPrimitive");
  var _extractAliasPath = _classPrivateFieldKey("extractAliasPath");
  var _extractSequence = _classPrivateFieldKey("extractSequence");
  var _extractTuple = _classPrivateFieldKey("extractTuple");
  var _extractVariant = _classPrivateFieldKey("extractVariant");
  var _extractVariantEnum = _classPrivateFieldKey("extractVariantEnum");
  class PortableRegistry extends Struct {
    constructor(registry, value) {
      super(registry, {
        types: 'Vec<PortableType>'
      }, value);
      Object.defineProperty(this, _extractVariantEnum, {
        value: _extractVariantEnum2
      });
      Object.defineProperty(this, _extractVariant, {
        value: _extractVariant2
      });
      Object.defineProperty(this, _extractTuple, {
        value: _extractTuple2
      });
      Object.defineProperty(this, _extractSequence, {
        value: _extractSequence2
      });
      Object.defineProperty(this, _extractAliasPath, {
        value: _extractAliasPath2
      });
      Object.defineProperty(this, _extractPrimitive, {
        value: _extractPrimitive2
      });
      Object.defineProperty(this, _extractHistoric, {
        value: _extractHistoric2
      });
      Object.defineProperty(this, _extractFieldsAlias, {
        value: _extractFieldsAlias2
      });
      Object.defineProperty(this, _extractFields, {
        value: _extractFields2
      });
      Object.defineProperty(this, _extractCompositeSet, {
        value: _extractCompositeSet2
      });
      Object.defineProperty(this, _extractComposite, {
        value: _extractComposite2
      });
      Object.defineProperty(this, _extractCompact, {
        value: _extractCompact2
      });
      Object.defineProperty(this, _extractBitSequence, {
        value: _extractBitSequence2
      });
      Object.defineProperty(this, _extractArray, {
        value: _extractArray2
      });
      Object.defineProperty(this, _extract, {
        value: _extract2
      });
      Object.defineProperty(this, _getLookupId, {
        value: _getLookupId2
      });
      Object.defineProperty(this, _createSiDef, {
        value: _createSiDef2
      });
      Object.defineProperty(this, _names, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _typeDefs, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _types, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _names)[_names] = extractNames(this, this.types);
      _classPrivateFieldBase(this, _types)[_types] = extractTypeMap(this.types);
    }
    get names() {
      return Object.values(_classPrivateFieldBase(this, _names)[_names]);
    }
    get types() {
      return this.get('types');
    }
    getName(lookupId) {
      return _classPrivateFieldBase(this, _names)[_names][_classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId)];
    }
    getSiType(lookupId) {
      const found = (_classPrivateFieldBase(this, _types)[_types] || this.types)[_classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId)];
      assert$h(found, () => `PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
      return found.type;
    }
    getTypeDef(lookupId) {
      const lookupIndex = _classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId);
      if (!_classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex]) {
        const lookupName = _classPrivateFieldBase(this, _names)[_names][lookupIndex];
        const empty = {
          info: exports.TypeDefInfo.DoNotConstruct,
          lookupIndex,
          lookupName,
          type: this.registry.createLookupType(lookupIndex)
        };
        if (lookupName) {
          _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex] = empty;
        }
        const extracted = _classPrivateFieldBase(this, _extract)[_extract](this.getSiType(lookupId), lookupIndex);
        if (!lookupName) {
          _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex] = empty;
        }
        Object.keys(extracted).forEach(k => {
          if (k !== 'lookupName' || extracted[k]) {
            _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex][k] = extracted[k];
          }
        });
        if (extracted.info === exports.TypeDefInfo.Plain) {
          _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupNameRoot = _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
          delete _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
        }
      }
      return _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex];
    }
  }
  function _createSiDef2(lookupId) {
    const typeDef = this.getTypeDef(lookupId);
    const lookupIndex = lookupId.toNumber();
    return [exports.TypeDefInfo.DoNotConstruct, exports.TypeDefInfo.Enum, exports.TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
      docs: typeDef.docs,
      info: exports.TypeDefInfo.Si,
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      type: this.registry.createLookupType(lookupId)
    } : typeDef;
  }
  function _getLookupId2(lookupId) {
    if (isString$1(lookupId)) {
      assert$h(this.registry.isLookupType(lookupId), () => `PortableRegistry: Expected a lookup string type, found ${lookupId}`);
      return parseInt(lookupId.replace('Lookup', ''), 10);
    } else if (isNumber$1(lookupId)) {
      return lookupId;
    }
    return lookupId.toNumber();
  }
  function _extract2(type, lookupIndex) {
    const namespace = [...type.path].join('::');
    let typeDef;
    const aliasType = getAliasPath(type.path);
    try {
      if (aliasType) {
        typeDef = _classPrivateFieldBase(this, _extractAliasPath)[_extractAliasPath](lookupIndex, aliasType);
      } else if (type.def.isArray) {
        typeDef = _classPrivateFieldBase(this, _extractArray)[_extractArray](lookupIndex, type.def.asArray);
      } else if (type.def.isBitSequence) {
        typeDef = _classPrivateFieldBase(this, _extractBitSequence)[_extractBitSequence](lookupIndex, type.def.asBitSequence);
      } else if (type.def.isCompact) {
        typeDef = _classPrivateFieldBase(this, _extractCompact)[_extractCompact](lookupIndex, type.def.asCompact);
      } else if (type.def.isComposite) {
        typeDef = _classPrivateFieldBase(this, _extractComposite)[_extractComposite](lookupIndex, type, type.def.asComposite);
      } else if (type.def.isHistoricMetaCompat) {
        typeDef = _classPrivateFieldBase(this, _extractHistoric)[_extractHistoric](lookupIndex, type.def.asHistoricMetaCompat);
      } else if (type.def.isPrimitive) {
        typeDef = _classPrivateFieldBase(this, _extractPrimitive)[_extractPrimitive](lookupIndex, type);
      } else if (type.def.isSequence) {
        typeDef = _classPrivateFieldBase(this, _extractSequence)[_extractSequence](lookupIndex, type.def.asSequence);
      } else if (type.def.isTuple) {
        typeDef = _classPrivateFieldBase(this, _extractTuple)[_extractTuple](lookupIndex, type.def.asTuple);
      } else if (type.def.isVariant) {
        typeDef = _classPrivateFieldBase(this, _extractVariant)[_extractVariant](lookupIndex, type, type.def.asVariant);
      } else {
        throw new Error(`No SiTypeDef handler for ${type.def.toString()}`);
      }
    } catch (error) {
      throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ''}: Error extracting ${stringify(type)}: ${error.message}`);
    }
    return objectSpread$1({
      docs: sanitizeDocs(type.docs),
      namespace
    }, typeDef);
  }
  function _extractArray2(_, {
    len: length,
    type
  }) {
    assert$h(!length || length.toNumber() <= 256, 'Only support for [Type; <length>], where length <= 256');
    return withTypeString(this.registry, {
      info: exports.TypeDefInfo.VecFixed,
      length: length.toNumber(),
      sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type)
    });
  }
  function _extractBitSequence2(_, {
    bitOrderType,
    bitStoreType
  }) {
    const bitOrder = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](bitOrderType);
    const bitStore = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](bitStoreType);
    assert$h(['bitvec::order::Lsb0', 'bitvec::order::Msb0'].includes(bitOrder.namespace || ''), () => `Unexpected bitOrder found as ${bitOrder.namespace || '<unknown>'}`);
    assert$h(bitStore.info === exports.TypeDefInfo.Plain && bitStore.type === 'u8', () => `Only u8 bitStore is currently supported, found ${bitStore.type}`);
    return {
      info: exports.TypeDefInfo.Plain,
      type: 'BitVec'
    };
  }
  function _extractCompact2(_, {
    type
  }) {
    return withTypeString(this.registry, {
      info: exports.TypeDefInfo.Compact,
      sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type)
    });
  }
  function _extractComposite2(lookupIndex, {
    params,
    path
  }, {
    fields
  }) {
    const specialVariant = path[0].toString();
    if (path.length === 1 && specialVariant === 'BTreeMap') {
      return withTypeString(this.registry, {
        info: exports.TypeDefInfo.BTreeMap,
        sub: params.map(({
          type
        }) => _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type.unwrap()))
      });
    } else if (['Range', 'RangeInclusive'].includes(specialVariant)) {
      return withTypeString(this.registry, {
        info: exports.TypeDefInfo.Range,
        sub: fields.map(({
          name,
          type,
          typeName
        }, index) => objectSpread$1({
          name: name.isSome ? name.unwrap().toString() : ['start', 'end'][index]
        }, _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type), typeName.isSome ? {
          typeName: sanitize(typeName.unwrap())
        } : null))
      });
    } else if (path.length) {
      if (path[path.length - 1].toString() === 'WrapperOpaque') {
        return withTypeString(this.registry, {
          info: exports.TypeDefInfo.WrapperOpaque,
          sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
        });
      } else if (path[path.length - 1].toString() === 'WrapperKeepOpaque') {
        return {
          info: exports.TypeDefInfo.Plain,
          type: 'Bytes'
        };
      }
    }
    return PATHS_SET.some(p => matchParts(p, path)) ? _classPrivateFieldBase(this, _extractCompositeSet)[_extractCompositeSet](lookupIndex, params, fields) : _classPrivateFieldBase(this, _extractFields)[_extractFields](lookupIndex, fields);
  }
  function _extractCompositeSet2(_, params, fields) {
    assert$h(params.length === 1 && fields.length === 1, 'Set handling expects param/field as single entries');
    return withTypeString(this.registry, {
      info: exports.TypeDefInfo.Set,
      length: this.registry.createType(this.registry.createLookupType(fields[0].type)).bitLength(),
      sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({
        index,
        name
      }) => ({
        index: index.toNumber(),
        info: exports.TypeDefInfo.Plain,
        name: name.toString(),
        type: 'Null'
      }))
    });
  }
  function _extractFields2(lookupIndex, fields) {
    let isStruct = true;
    let isTuple = true;
    for (let f = 0; f < fields.length; f++) {
      const {
        name
      } = fields[f];
      isStruct = isStruct && name.isSome;
      isTuple = isTuple && name.isNone;
    }
    assert$h(isTuple || isStruct, 'Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)');
    if (fields.length === 0) {
      return {
        info: exports.TypeDefInfo.Null,
        type: 'Null'
      };
    } else if (isTuple && fields.length === 1) {
      const typeDef = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](fields[0].type);
      return objectSpread$1({}, typeDef, lookupIndex === -1 ? {} : {
        lookupIndex,
        lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
        lookupNameRoot: typeDef.lookupName
      }, fields[0].typeName.isSome ? {
        typeName: sanitize(fields[0].typeName.unwrap())
      } : null);
    }
    const [sub, alias] = _classPrivateFieldBase(this, _extractFieldsAlias)[_extractFieldsAlias](fields);
    return withTypeString(this.registry, objectSpread$1({
      info: isTuple
      ? exports.TypeDefInfo.Tuple : exports.TypeDefInfo.Struct
    }, alias.size ? {
      alias
    } : null, lookupIndex === -1 ? {} : {
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex]
    }, {
      sub
    }));
  }
  function _extractFieldsAlias2(fields) {
    const alias = new Map();
    const sub = new Array(fields.length);
    for (let i = 0; i < fields.length; i++) {
      const {
        docs,
        name,
        type,
        typeName
      } = fields[i];
      const typeDef = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type);
      if (name.isNone) {
        sub[i] = typeDef;
      } else {
        let nameField = stringCamelCase(name.unwrap());
        let nameOrig = null;
        if (nameField.includes('#')) {
          nameOrig = nameField;
          nameField = nameOrig.replace(/#/g, '_');
        } else if (RESERVED.includes(nameField)) {
          nameOrig = nameField;
          nameField = `${nameField}_`;
        }
        if (nameOrig) {
          alias.set(nameField, nameOrig);
        }
        sub[i] = objectSpread$1({}, typeDef, {
          docs: sanitizeDocs(docs),
          name: nameField
        }, typeName.isSome ? {
          typeName: sanitize(typeName.unwrap())
        } : null);
      }
    }
    return [sub, alias];
  }
  function _extractHistoric2(_, type) {
    return objectSpread$1({}, getTypeDef(type), {
      displayName: type.toString(),
      isFromSi: true
    });
  }
  function _extractPrimitive2(_, type) {
    const typeStr = type.def.asPrimitive.type.toString();
    return {
      info: exports.TypeDefInfo.Plain,
      type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
    };
  }
  function _extractAliasPath2(_, type) {
    return {
      info: exports.TypeDefInfo.Plain,
      type
    };
  }
  function _extractSequence2(lookupIndex, {
    type
  }) {
    const sub = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type);
    if (sub.type === 'u8') {
      return {
        info: exports.TypeDefInfo.Plain,
        type: 'Bytes'
      };
    }
    return withTypeString(this.registry, {
      info: exports.TypeDefInfo.Vec,
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      sub
    });
  }
  function _extractTuple2(lookupIndex, ids) {
    if (ids.length === 0) {
      return {
        info: exports.TypeDefInfo.Null,
        type: 'Null'
      };
    } else if (ids.length === 1) {
      return this.getTypeDef(ids[0]);
    }
    const sub = ids.map(type => _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type));
    return withTypeString(this.registry, {
      info: exports.TypeDefInfo.Tuple,
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      sub
    });
  }
  function _extractVariant2(lookupIndex, {
    params,
    path
  }, {
    variants
  }) {
    const specialVariant = path[0].toString();
    if (specialVariant === 'Option') {
      return withTypeString(this.registry, {
        info: exports.TypeDefInfo.Option,
        sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
      });
    } else if (specialVariant === 'Result') {
      return withTypeString(this.registry, {
        info: exports.TypeDefInfo.Result,
        sub: params.map(({
          type
        }, index) => objectSpread$1({
          name: ['Ok', 'Error'][index]
        }, _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type.unwrap())))
      });
    } else if (variants.length === 0) {
      return {
        info: exports.TypeDefInfo.Null,
        type: 'Null'
      };
    }
    return _classPrivateFieldBase(this, _extractVariantEnum)[_extractVariantEnum](lookupIndex, variants);
  }
  function _extractVariantEnum2(lookupIndex, variants) {
    const sub = [];
    [...variants].sort((a, b) => a.index.cmp(b.index)).forEach(({
      fields,
      index,
      name
    }) => {
      const desired = index.toNumber();
      while (sub.length !== desired) {
        sub.push({
          index: sub.length,
          info: exports.TypeDefInfo.Null,
          name: `__Unused${sub.length}`,
          type: 'Null'
        });
      }
      sub.push(objectSpread$1(_classPrivateFieldBase(this, _extractFields)[_extractFields](-1, fields), {
        index: index.toNumber(),
        name: name.toString()
      }));
    });
    return withTypeString(this.registry, {
      info: exports.TypeDefInfo.Enum,
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      sub
    });
  }

  function convertArray(registry, {
    len,
    type
  }) {
    return registry.createType('Si1TypeDef', {
      Array: {
        len,
        type: type.toNumber()
      }
    });
  }
  function convertBitSequence(registry, {
    bitOrderType,
    bitStoreType
  }) {
    return registry.createType('Si1TypeDef', {
      BitSequence: {
        bitOrderType: bitOrderType.toNumber(),
        bitStoreType: bitStoreType.toNumber()
      }
    });
  }
  function convertCompact(registry, {
    type
  }) {
    return registry.createType('Si1TypeDef', {
      Compact: {
        type: type.toNumber()
      }
    });
  }
  function convertComposite(registry, {
    fields
  }) {
    return registry.createType('Si1TypeDef', {
      Composite: {
        fields: convertFields(registry, fields)
      }
    });
  }
  function convertFields(registry, fields) {
    return fields.map(({
      docs,
      name,
      type,
      typeName
    }) => registry.createType('Si1Field', {
      docs,
      name,
      type: type.toNumber(),
      typeName
    }));
  }
  function convertPhantom(registry, path) {
    console.warn(`Converting phantom type ${path.map(p => p.toString()).join('::')} to empty tuple`);
    return registry.createType('Si1TypeDef', {
      Tuple: []
    });
  }
  function convertPrimitive(registry, prim) {
    return registry.createType('Si1TypeDef', {
      Primitive: prim.toString()
    });
  }
  function convertSequence(registry, {
    type
  }) {
    return registry.createType('Si1TypeDef', {
      Sequence: {
        type: type.toNumber()
      }
    });
  }
  function convertTuple(registry, types) {
    return registry.createType('Si1TypeDef', {
      Tuple: types.map(t => t.toNumber())
    });
  }
  function convertVariant(registry, {
    variants
  }) {
    return registry.createType('Si1TypeDef', {
      Variant: {
        variants: variants.map(({
          discriminant,
          docs,
          fields,
          name
        }, index) => registry.createType('Si1Variant', {
          docs,
          fields: convertFields(registry, fields),
          index: discriminant.isSome ? discriminant.unwrap().toNumber() : index,
          name
        }))
      }
    });
  }
  function convertDef(registry, {
    def,
    path
  }) {
    if (def.isArray) {
      return convertArray(registry, def.asArray);
    } else if (def.isBitSequence) {
      return convertBitSequence(registry, def.asBitSequence);
    } else if (def.isCompact) {
      return convertCompact(registry, def.asCompact);
    } else if (def.isComposite) {
      return convertComposite(registry, def.asComposite);
    } else if (def.isPhantom) {
      return convertPhantom(registry, path);
    } else if (def.isPrimitive) {
      return convertPrimitive(registry, def.asPrimitive);
    } else if (def.isSequence) {
      return convertSequence(registry, def.asSequence);
    } else if (def.isTuple) {
      return convertTuple(registry, def.asTuple);
    } else if (def.isVariant) {
      return convertVariant(registry, def.asVariant);
    }
    throw new Error(`Cannot convert type ${def.toString()}`);
  }
  function toV1(registry, types) {
    return types.map((t, index) => registry.createType('PortableType', {
      id: index + 1,
      type: {
        def: convertDef(registry, t),
        docs: [],
        params: t.params.map(p => registry.createType('Si1TypeParameter', {
          type: p.toNumber()
        })),
        path: t.path.map(p => p.toString())
      }
    }));
  }

  const l = logger('registry');
  function valueToString(v) {
    return v.toString();
  }
  function getFieldArgs(lookup, fields) {
    const args = new Array(fields.length);
    for (let i = 0; i < fields.length; i++) {
      args[i] = lookup.getTypeDef(fields[i].type).type;
    }
    return args;
  }
  function clearRecord(record) {
    const keys = Object.keys(record);
    for (let i = 0; i < keys.length; i++) {
      delete record[keys[i]];
    }
  }
  function getVariantStringIdx({
    index
  }) {
    return index.toString();
  }
  function injectErrors(_, {
    lookup,
    pallets
  }, version, result) {
    clearRecord(result);
    for (let i = 0; i < pallets.length; i++) {
      const {
        errors,
        index,
        name
      } = pallets[i];
      if (errors.isSome) {
        const sectionName = stringCamelCase(name);
        lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({
          docs,
          fields,
          index,
          name
        }) => ({
          args: getFieldArgs(lookup, fields),
          docs: docs.map(valueToString),
          fields,
          index: index.toNumber(),
          method: name.toString(),
          name: name.toString(),
          section: sectionName
        })));
      }
    }
  }
  function injectEvents(registry, {
    lookup,
    pallets
  }, version, result) {
    const filtered = pallets.filter(filterEventsSome);
    clearRecord(result);
    for (let i = 0; i < filtered.length; i++) {
      const {
        events,
        index,
        name
      } = filtered[i];
      lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events.unwrap(), getVariantStringIdx, variant => {
        const meta = registry.createType('EventMetadataLatest', objectSpread$1({}, variant, {
          args: getFieldArgs(lookup, variant.fields)
        }));
        return class extends GenericEventData {
          constructor(registry, value) {
            super(registry, value, meta, stringCamelCase(name), variant.name.toString());
          }
        };
      }));
    }
  }
  function injectExtrinsics(registry, {
    lookup,
    pallets
  }, version, result) {
    const filtered = pallets.filter(filterCallsSome);
    clearRecord(result);
    for (let i = 0; i < filtered.length; i++) {
      const {
        calls,
        index,
        name
      } = filtered[i];
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, sectionIndex, () => lazyVariants(lookup, calls.unwrap(), getVariantStringIdx, variant => createCallFunction(registry, lookup, variant, stringCamelCase(name), sectionIndex)));
    }
  }
  function extractProperties(registry, metadata) {
    var _constants$system;
    const original = registry.getChainProperties();
    const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
    const ss58Format = (_constants$system = constants.system) === null || _constants$system === void 0 ? void 0 : _constants$system.ss58Prefix;
    if (!ss58Format) {
      return original;
    }
    const {
      tokenDecimals,
      tokenSymbol
    } = original || {};
    return registry.createType('ChainProperties', {
      ss58Format,
      tokenDecimals,
      tokenSymbol
    });
  }
  var _classes = _classPrivateFieldKey("classes");
  var _definitions = _classPrivateFieldKey("definitions");
  var _lookup = _classPrivateFieldKey("lookup");
  var _metadata = _classPrivateFieldKey("metadata");
  var _metadataVersion = _classPrivateFieldKey("metadataVersion");
  var _metadataCalls = _classPrivateFieldKey("metadataCalls");
  var _metadataErrors = _classPrivateFieldKey("metadataErrors");
  var _metadataEvents = _classPrivateFieldKey("metadataEvents");
  var _unknownTypes = _classPrivateFieldKey("unknownTypes");
  var _chainProperties = _classPrivateFieldKey("chainProperties");
  var _hasher = _classPrivateFieldKey("hasher");
  var _knownDefaults = _classPrivateFieldKey("knownDefaults");
  var _knownDefinitions = _classPrivateFieldKey("knownDefinitions");
  var _knownTypes = _classPrivateFieldKey("knownTypes");
  var _signedExtensions = _classPrivateFieldKey("signedExtensions");
  var _userExtensions = _classPrivateFieldKey("userExtensions");
  class TypeRegistry {
    constructor(createdAtHash) {
      Object.defineProperty(this, _classes, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _definitions, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _lookup, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _metadata, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _metadataVersion, {
        writable: true,
        value: 0
      });
      Object.defineProperty(this, _metadataCalls, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _metadataErrors, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _metadataEvents, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _unknownTypes, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _chainProperties, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _hasher, {
        writable: true,
        value: blake2AsU8a
      });
      Object.defineProperty(this, _knownDefaults, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _knownDefinitions, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _knownTypes, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _signedExtensions, {
        writable: true,
        value: fallbackExtensions
      });
      Object.defineProperty(this, _userExtensions, {
        writable: true,
        value: void 0
      });
      this.createdAtHash = void 0;
      _classPrivateFieldBase(this, _knownDefaults)[_knownDefaults] = objectSpread$1({
        Json,
        Metadata,
        PortableRegistry,
        Raw
      }, baseTypes);
      _classPrivateFieldBase(this, _knownDefinitions)[_knownDefinitions] = definitions;
      this.init();
      if (createdAtHash) {
        this.createdAtHash = this.createType('Hash', createdAtHash);
      }
    }
    init() {
      _classPrivateFieldBase(this, _classes)[_classes] = new Map();
      _classPrivateFieldBase(this, _definitions)[_definitions] = new Map();
      _classPrivateFieldBase(this, _unknownTypes)[_unknownTypes] = new Map();
      _classPrivateFieldBase(this, _knownTypes)[_knownTypes] = {};
      this.register(_classPrivateFieldBase(this, _knownDefaults)[_knownDefaults]);
      const allKnown = Object.values(_classPrivateFieldBase(this, _knownDefinitions)[_knownDefinitions]);
      for (let i = 0; i < allKnown.length; i++) {
        this.register(allKnown[i].types);
      }
      return this;
    }
    get chainDecimals() {
      var _classPrivateFieldLoo;
      if ((_classPrivateFieldLoo = _classPrivateFieldBase(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo !== void 0 && _classPrivateFieldLoo.tokenDecimals.isSome) {
        const allDecimals = _classPrivateFieldBase(this, _chainProperties)[_chainProperties].tokenDecimals.unwrap();
        if (allDecimals.length) {
          return allDecimals.map(b => b.toNumber());
        }
      }
      return [12];
    }
    get chainSS58() {
      var _classPrivateFieldLoo2;
      return (_classPrivateFieldLoo2 = _classPrivateFieldBase(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo2 !== void 0 && _classPrivateFieldLoo2.ss58Format.isSome ? _classPrivateFieldBase(this, _chainProperties)[_chainProperties].ss58Format.unwrap().toNumber() : undefined;
    }
    get chainTokens() {
      var _classPrivateFieldLoo3;
      if ((_classPrivateFieldLoo3 = _classPrivateFieldBase(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo3 !== void 0 && _classPrivateFieldLoo3.tokenSymbol.isSome) {
        const allTokens = _classPrivateFieldBase(this, _chainProperties)[_chainProperties].tokenSymbol.unwrap();
        if (allTokens.length) {
          return allTokens.map(valueToString);
        }
      }
      return [formatBalance.getDefaults().unit];
    }
    isLookupType(value) {
      return /Lookup\d+$/.test(value);
    }
    createLookupType(lookupId) {
      return `Lookup${lookupId.toString()}`;
    }
    get knownTypes() {
      return _classPrivateFieldBase(this, _knownTypes)[_knownTypes];
    }
    get lookup() {
      return _classPrivateFieldBase(this, _lookup)[_lookup] || this.metadata.lookup;
    }
    get metadata() {
      assert$h(_classPrivateFieldBase(this, _metadata)[_metadata], 'Metadata has not been set on this registry');
      return _classPrivateFieldBase(this, _metadata)[_metadata];
    }
    get unknownTypes() {
      return [..._classPrivateFieldBase(this, _unknownTypes)[_unknownTypes].keys()];
    }
    get signedExtensions() {
      return _classPrivateFieldBase(this, _signedExtensions)[_signedExtensions];
    }
    createClass(type) {
      return createClass(this, type);
    }
    createType(type, ...params) {
      return this.createTypeUnsafe(type, params);
    }
    createTypeUnsafe(type, params, options) {
      return createTypeUnsafe(this, type, params, options);
    }
    findMetaCall(callIndex) {
      const [section, method] = [callIndex[0], callIndex[1]];
      return assertReturn(_classPrivateFieldBase(this, _metadataCalls)[_metadataCalls][`${section}`] && _classPrivateFieldBase(this, _metadataCalls)[_metadataCalls][`${section}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section}, ${method}]/[${callIndex.toString()}]`);
    }
    findMetaError(errorIndex) {
      const [section, method] = isU8a$1(errorIndex) ? [errorIndex[0], errorIndex[1]] : [errorIndex.index.toNumber(), errorIndex.error.toNumber()];
      return assertReturn(_classPrivateFieldBase(this, _metadataErrors)[_metadataErrors][`${section}`] && _classPrivateFieldBase(this, _metadataErrors)[_metadataErrors][`${section}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section}, ${method}]/[${errorIndex.toString()}]`);
    }
    findMetaEvent(eventIndex) {
      const [section, method] = [eventIndex[0], eventIndex[1]];
      return assertReturn(_classPrivateFieldBase(this, _metadataEvents)[_metadataEvents][`${section}`] && _classPrivateFieldBase(this, _metadataEvents)[_metadataEvents][`${section}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section}, ${method}]/[${eventIndex.toString()}]`);
    }
    get(name, withUnknown, knownTypeDef) {
      let Type = _classPrivateFieldBase(this, _classes)[_classes].get(name);
      if (!Type) {
        const definition = _classPrivateFieldBase(this, _definitions)[_definitions].get(name);
        let BaseType;
        if (definition) {
          BaseType = createClass(this, definition);
        } else if (knownTypeDef) {
          BaseType = constructTypeClass(this, knownTypeDef);
        } else if (withUnknown) {
          l.warn(`Unable to resolve type ${name}, it will fail on construction`);
          _classPrivateFieldBase(this, _unknownTypes)[_unknownTypes].set(name, true);
          BaseType = DoNotConstruct.with(name);
        }
        if (BaseType) {
          Type = class extends BaseType {};
          _classPrivateFieldBase(this, _classes)[_classes].set(name, Type);
        }
      }
      return Type;
    }
    getChainProperties() {
      return _classPrivateFieldBase(this, _chainProperties)[_chainProperties];
    }
    getClassName(Type) {
      const names = [];
      for (const [name, Clazz] of _classPrivateFieldBase(this, _classes)[_classes].entries()) {
        if (Type === Clazz) {
          names.push(name);
        }
      }
      names.sort().reverse();
      return names.length ? names[0] : undefined;
    }
    getDefinition(typeName) {
      return _classPrivateFieldBase(this, _definitions)[_definitions].get(typeName);
    }
    getModuleInstances(specName, moduleName) {
      var _classPrivateFieldLoo4, _classPrivateFieldLoo5, _classPrivateFieldLoo6, _classPrivateFieldLoo7, _classPrivateFieldLoo8;
      return (_classPrivateFieldLoo4 = _classPrivateFieldBase(this, _knownTypes)[_knownTypes]) === null || _classPrivateFieldLoo4 === void 0 ? void 0 : (_classPrivateFieldLoo5 = _classPrivateFieldLoo4.typesBundle) === null || _classPrivateFieldLoo5 === void 0 ? void 0 : (_classPrivateFieldLoo6 = _classPrivateFieldLoo5.spec) === null || _classPrivateFieldLoo6 === void 0 ? void 0 : (_classPrivateFieldLoo7 = _classPrivateFieldLoo6[specName]) === null || _classPrivateFieldLoo7 === void 0 ? void 0 : (_classPrivateFieldLoo8 = _classPrivateFieldLoo7.instances) === null || _classPrivateFieldLoo8 === void 0 ? void 0 : _classPrivateFieldLoo8[moduleName];
    }
    getOrThrow(name, msg) {
      const Clazz = this.get(name);
      assert$h(Clazz, msg || `type ${name} not found`);
      return Clazz;
    }
    getOrUnknown(name) {
      return this.get(name, true);
    }
    getSignedExtensionExtra() {
      return expandExtensionTypes(_classPrivateFieldBase(this, _signedExtensions)[_signedExtensions], 'payload', _classPrivateFieldBase(this, _userExtensions)[_userExtensions]);
    }
    getSignedExtensionTypes() {
      return expandExtensionTypes(_classPrivateFieldBase(this, _signedExtensions)[_signedExtensions], 'extrinsic', _classPrivateFieldBase(this, _userExtensions)[_userExtensions]);
    }
    hasClass(name) {
      return _classPrivateFieldBase(this, _classes)[_classes].has(name);
    }
    hasDef(name) {
      return _classPrivateFieldBase(this, _definitions)[_definitions].has(name);
    }
    hasType(name) {
      return !_classPrivateFieldBase(this, _unknownTypes)[_unknownTypes].get(name) && (this.hasClass(name) || this.hasDef(name));
    }
    hash(data) {
      return this.createType('CodecHash', _classPrivateFieldBase(this, _hasher)[_hasher](data));
    }
    register(arg1, arg2) {
      if (isFunction$1(arg1)) {
        _classPrivateFieldBase(this, _classes)[_classes].set(arg1.name, arg1);
      } else if (isString$1(arg1)) {
        assert$h(isFunction$1(arg2), () => `Expected class definition passed to '${arg1}' registration`);
        assert$h(arg1 !== arg2.toString(), () => `Unable to register circular ${arg1} === ${arg1}`);
        _classPrivateFieldBase(this, _classes)[_classes].set(arg1, arg2);
      } else {
        this._registerObject(arg1);
      }
    }
    _registerObject(obj) {
      const entries = Object.entries(obj);
      for (let e = 0; e < entries.length; e++) {
        const [name, type] = entries[e];
        if (isFunction$1(type)) {
          _classPrivateFieldBase(this, _classes)[_classes].set(name, type);
        } else {
          const def = isString$1(type) ? type : stringify(type);
          assert$h(name !== def, () => `Unable to register circular ${name} === ${def}`);
          if (_classPrivateFieldBase(this, _classes)[_classes].has(name)) {
            _classPrivateFieldBase(this, _classes)[_classes].delete(name);
          }
          _classPrivateFieldBase(this, _definitions)[_definitions].set(name, def);
        }
      }
    }
    setChainProperties(properties) {
      if (properties) {
        _classPrivateFieldBase(this, _chainProperties)[_chainProperties] = properties;
      }
    }
    setHasher(hasher) {
      _classPrivateFieldBase(this, _hasher)[_hasher] = hasher || blake2AsU8a;
    }
    setKnownTypes(knownTypes) {
      _classPrivateFieldBase(this, _knownTypes)[_knownTypes] = knownTypes;
    }
    setLookup(lookup) {
      _classPrivateFieldBase(this, _lookup)[_lookup] = lookup;
    }
    setMetadata(metadata, signedExtensions, userExtensions) {
      _classPrivateFieldBase(this, _metadata)[_metadata] = metadata.asLatest;
      _classPrivateFieldBase(this, _metadataVersion)[_metadataVersion] = metadata.version;
      injectExtrinsics(this, _classPrivateFieldBase(this, _metadata)[_metadata], _classPrivateFieldBase(this, _metadataVersion)[_metadataVersion], _classPrivateFieldBase(this, _metadataCalls)[_metadataCalls]);
      injectErrors(this, _classPrivateFieldBase(this, _metadata)[_metadata], _classPrivateFieldBase(this, _metadataVersion)[_metadataVersion], _classPrivateFieldBase(this, _metadataErrors)[_metadataErrors]);
      injectEvents(this, _classPrivateFieldBase(this, _metadata)[_metadata], _classPrivateFieldBase(this, _metadataVersion)[_metadataVersion], _classPrivateFieldBase(this, _metadataEvents)[_metadataEvents]);
      this.setSignedExtensions(signedExtensions || (_classPrivateFieldBase(this, _metadata)[_metadata].extrinsic.version.gt(BN_ZERO)
      ? _classPrivateFieldBase(this, _metadata)[_metadata].extrinsic.signedExtensions.map(({
        identifier
      }) => identifier.toString()) : fallbackExtensions), userExtensions);
      this.setChainProperties(extractProperties(this, metadata));
    }
    setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions) {
      _classPrivateFieldBase(this, _signedExtensions)[_signedExtensions] = signedExtensions;
      _classPrivateFieldBase(this, _userExtensions)[_userExtensions] = userExtensions;
      const unknown = findUnknownExtensions(_classPrivateFieldBase(this, _signedExtensions)[_signedExtensions], _classPrivateFieldBase(this, _userExtensions)[_userExtensions]);
      if (unknown.length) {
        l.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
      }
    }
  }

  const packageInfo = {
    name: '@5ire/types',
    version: '0.2.2'
  };

  exports.BTreeMap = BTreeMap;
  exports.BTreeSet = BTreeSet;
  exports.BitVec = BitVec;
  exports.Bool = bool;
  exports.Bytes = Bytes;
  exports.CodecMap = CodecMap;
  exports.CodecSet = CodecSet;
  exports.Compact = Compact;
  exports.Data = Data;
  exports.DoNotConstruct = DoNotConstruct;
  exports.Enum = Enum;
  exports.GenericAccountId = GenericAccountId;
  exports.GenericAccountIndex = GenericAccountIndex;
  exports.GenericAddress = GenericMultiAddress;
  exports.GenericBlock = GenericBlock;
  exports.GenericCall = GenericCall;
  exports.GenericChainProperties = GenericChainProperties;
  exports.GenericConsensusEngineId = GenericConsensusEngineId;
  exports.GenericEthereumAccountId = GenericEthereumAccountId;
  exports.GenericEthereumLookupSource = GenericEthereumLookupSource;
  exports.GenericEvent = GenericEvent;
  exports.GenericEventData = GenericEventData;
  exports.GenericExtrinsic = GenericExtrinsic;
  exports.GenericExtrinsicEra = GenericExtrinsicEra;
  exports.GenericExtrinsicPayload = GenericExtrinsicPayload;
  exports.GenericExtrinsicPayloadUnknown = GenericExtrinsicPayloadUnknown;
  exports.GenericExtrinsicPayloadV4 = GenericExtrinsicPayloadV4;
  exports.GenericExtrinsicSignatureV4 = GenericExtrinsicSignatureV4;
  exports.GenericExtrinsicUnknown = GenericExtrinsicUnknown;
  exports.GenericExtrinsicV4 = GenericExtrinsicV4;
  exports.GenericImmortalEra = ImmortalEra;
  exports.GenericLookupSource = GenericLookupSource;
  exports.GenericMortalEra = MortalEra;
  exports.GenericMultiAddress = GenericMultiAddress;
  exports.GenericSignerPayload = GenericSignerPayload;
  exports.GenericVote = GenericVote;
  exports.HashMap = HashMap;
  exports.I128 = i128;
  exports.I16 = i16;
  exports.I256 = i256;
  exports.I32 = i32;
  exports.I64 = i64;
  exports.I8 = i8;
  exports.Int = Int;
  exports.Json = Json;
  exports.Linkage = Linkage;
  exports.Map = CodecMap;
  exports.Metadata = Metadata;
  exports.Null = Null;
  exports.Option = Option;
  exports.PortableRegistry = PortableRegistry;
  exports.Range = Range;
  exports.RangeInclusive = RangeInclusive;
  exports.Raw = Raw;
  exports.Result = Result;
  exports.Set = CodecSet;
  exports.StorageKey = StorageKey;
  exports.Struct = Struct;
  exports.Text = Text;
  exports.Tuple = Tuple;
  exports.Type = Type;
  exports.TypeRegistry = TypeRegistry;
  exports.U128 = u128;
  exports.U16 = u16$1;
  exports.U256 = u256;
  exports.U32 = u32$1;
  exports.U64 = u64;
  exports.U8 = u8$1;
  exports.U8aFixed = U8aFixed;
  exports.UInt = UInt;
  exports.USize = usize;
  exports.Vec = Vec;
  exports.VecFixed = VecFixed;
  exports.WrapperOpaque = WrapperOpaque;
  exports.bool = bool;
  exports.constructTypeClass = constructTypeClass;
  exports.convertSiV0toV1 = toV1;
  exports.createClass = createClass;
  exports.createType = createType;
  exports.createTypeUnsafe = createTypeUnsafe;
  exports.decorateConstants = decorateConstants;
  exports.decorateExtrinsics = decorateExtrinsics;
  exports.decorateStorage = decorateStorage;
  exports.encodeTypeDef = encodeTypeDef;
  exports.expandMetadata = expandMetadata;
  exports.getTypeClass = getTypeClass;
  exports.getTypeDef = getTypeDef;
  exports.i128 = i128;
  exports.i16 = i16;
  exports.i256 = i256;
  exports.i32 = i32;
  exports.i64 = i64;
  exports.i8 = i8;
  exports.lazyVariants = lazyVariants;
  exports.packageInfo = packageInfo;
  exports.paramsNotation = paramsNotation;
  exports.rpcDefinitions = jsonrpc$1;
  exports.typeDefinitions = definitions;
  exports.typeSplit = typeSplit;
  exports.u128 = u128;
  exports.u16 = u16$1;
  exports.u256 = u256;
  exports.u32 = u32$1;
  exports.u64 = u64;
  exports.u8 = u8$1;
  exports.unwrapStorageType = unwrapStorageType;
  exports.usize = usize;
  exports.withTypeString = withTypeString;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({}, typesKnown, require$$0$1);
